var g_data = {"name":"axi_adapter_rd.v","src":"/*\n\nCopyright (c) 2018 Alex Forencich\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n*/\n\n// Language: Verilog 2001\n\n`resetall\n`timescale 1ns / 1ps\n`default_nettype none\n\n/*\n * AXI4 width adapter\n */\nmodule axi_adapter_rd #\n(\n    // Width of address bus in bits\n    parameter ADDR_WIDTH = 32,\n    // Width of input (slave) interface data bus in bits\n    parameter S_DATA_WIDTH = 32,\n    // Width of input (slave) interface wstrb (width of data bus in words)\n    parameter S_STRB_WIDTH = (S_DATA_WIDTH/8),\n    // Width of output (master) interface data bus in bits\n    parameter M_DATA_WIDTH = 32,\n    // Width of output (master) interface wstrb (width of data bus in words)\n    parameter M_STRB_WIDTH = (M_DATA_WIDTH/8),\n    // Width of ID signal\n    parameter ID_WIDTH = 8,\n    // Propagate aruser signal\n    parameter ARUSER_ENABLE = 0,\n    // Width of aruser signal\n    parameter ARUSER_WIDTH = 1,\n    // Propagate ruser signal\n    parameter RUSER_ENABLE = 0,\n    // Width of ruser signal\n    parameter RUSER_WIDTH = 1,\n    // When adapting to a wider bus, re-pack full-width burst instead of passing through narrow burst if possible\n    parameter CONVERT_BURST = 1,\n    // When adapting to a wider bus, re-pack all bursts instead of passing through narrow burst if possible\n    parameter CONVERT_NARROW_BURST = 0,\n    // Forward ID through adapter\n    parameter FORWARD_ID = 0\n)\n(\n    input  wire                     clk,\n    input  wire                     rst,\n\n    /*\n     * AXI slave interface\n     */\n    input  wire [ID_WIDTH-1:0]      s_axi_arid,\n    input  wire [ADDR_WIDTH-1:0]    s_axi_araddr,\n    input  wire [7:0]               s_axi_arlen,\n    input  wire [2:0]               s_axi_arsize,\n    input  wire [1:0]               s_axi_arburst,\n    input  wire                     s_axi_arlock,\n    input  wire [3:0]               s_axi_arcache,\n    input  wire [2:0]               s_axi_arprot,\n    input  wire [3:0]               s_axi_arqos,\n    input  wire [3:0]               s_axi_arregion,\n    input  wire [ARUSER_WIDTH-1:0]  s_axi_aruser,\n    input  wire                     s_axi_arvalid,\n    output wire                     s_axi_arready,\n    output wire [ID_WIDTH-1:0]      s_axi_rid,\n    output wire [S_DATA_WIDTH-1:0]  s_axi_rdata,\n    output wire [1:0]               s_axi_rresp,\n    output wire                     s_axi_rlast,\n    output wire [RUSER_WIDTH-1:0]   s_axi_ruser,\n    output wire                     s_axi_rvalid,\n    input  wire                     s_axi_rready,\n\n    /*\n     * AXI master interface\n     */\n    output wire [ID_WIDTH-1:0]      m_axi_arid,\n    output wire [ADDR_WIDTH-1:0]    m_axi_araddr,\n    output wire [7:0]               m_axi_arlen,\n    output wire [2:0]               m_axi_arsize,\n    output wire [1:0]               m_axi_arburst,\n    output wire                     m_axi_arlock,\n    output wire [3:0]               m_axi_arcache,\n    output wire [2:0]               m_axi_arprot,\n    output wire [3:0]               m_axi_arqos,\n    output wire [3:0]               m_axi_arregion,\n    output wire [ARUSER_WIDTH-1:0]  m_axi_aruser,\n    output wire                     m_axi_arvalid,\n    input  wire                     m_axi_arready,\n    input  wire [ID_WIDTH-1:0]      m_axi_rid,\n    input  wire [M_DATA_WIDTH-1:0]  m_axi_rdata,\n    input  wire [1:0]               m_axi_rresp,\n    input  wire                     m_axi_rlast,\n    input  wire [RUSER_WIDTH-1:0]   m_axi_ruser,\n    input  wire                     m_axi_rvalid,\n    output wire                     m_axi_rready\n);\n\nparameter S_ADDR_BIT_OFFSET = $clog2(S_STRB_WIDTH);\nparameter M_ADDR_BIT_OFFSET = $clog2(M_STRB_WIDTH);\nparameter S_WORD_WIDTH = S_STRB_WIDTH;\nparameter M_WORD_WIDTH = M_STRB_WIDTH;\nparameter S_WORD_SIZE = S_DATA_WIDTH/S_WORD_WIDTH;\nparameter M_WORD_SIZE = M_DATA_WIDTH/M_WORD_WIDTH;\nparameter S_BURST_SIZE = $clog2(S_STRB_WIDTH);\nparameter M_BURST_SIZE = $clog2(M_STRB_WIDTH);\n\n// output bus is wider\nparameter EXPAND = M_STRB_WIDTH > S_STRB_WIDTH;\nparameter DATA_WIDTH = EXPAND ? M_DATA_WIDTH : S_DATA_WIDTH;\nparameter STRB_WIDTH = EXPAND ? M_STRB_WIDTH : S_STRB_WIDTH;\n// required number of segments in wider bus\nparameter SEGMENT_COUNT = EXPAND ? (M_STRB_WIDTH / S_STRB_WIDTH) : (S_STRB_WIDTH / M_STRB_WIDTH);\n// data width and keep width per segment\nparameter SEGMENT_DATA_WIDTH = DATA_WIDTH / SEGMENT_COUNT;\nparameter SEGMENT_STRB_WIDTH = STRB_WIDTH / SEGMENT_COUNT;\n\n// bus width assertions\ninitial begin\n    if (S_WORD_SIZE * S_STRB_WIDTH != S_DATA_WIDTH) begin\n        $error(\"Error: AXI slave interface data width not evenly divisble (instance %m)\");\n        $finish;\n    end\n\n    if (M_WORD_SIZE * M_STRB_WIDTH != M_DATA_WIDTH) begin\n        $error(\"Error: AXI master interface data width not evenly divisble (instance %m)\");\n        $finish;\n    end\n\n    if (S_WORD_SIZE != M_WORD_SIZE) begin\n        $error(\"Error: word size mismatch (instance %m)\");\n        $finish;\n    end\n\n    if (2**$clog2(S_WORD_WIDTH) != S_WORD_WIDTH) begin\n        $error(\"Error: AXI slave interface word width must be even power of two (instance %m)\");\n        $finish;\n    end\n\n    if (2**$clog2(M_WORD_WIDTH) != M_WORD_WIDTH) begin\n        $error(\"Error: AXI master interface word width must be even power of two (instance %m)\");\n        $finish;\n    end\nend\n\nlocalparam [1:0]\n    STATE_IDLE = 2'd0,\n    STATE_DATA = 2'd1,\n    STATE_DATA_READ = 2'd2,\n    STATE_DATA_SPLIT = 2'd3;\n\nreg [1:0] state_reg = STATE_IDLE, state_next;\n\nreg [ID_WIDTH-1:0] id_reg = {ID_WIDTH{1'b0}}, id_next;\nreg [ADDR_WIDTH-1:0] addr_reg = {ADDR_WIDTH{1'b0}}, addr_next;\nreg [DATA_WIDTH-1:0] data_reg = {DATA_WIDTH{1'b0}}, data_next;\nreg [1:0] resp_reg = 2'd0, resp_next;\nreg [RUSER_WIDTH-1:0] ruser_reg = {RUSER_WIDTH{1'b0}}, ruser_next;\nreg [7:0] burst_reg = 8'd0, burst_next;\nreg [2:0] burst_size_reg = 3'd0, burst_size_next;\nreg [7:0] master_burst_reg = 8'd0, master_burst_next;\nreg [2:0] master_burst_size_reg = 3'd0, master_burst_size_next;\n\nreg s_axi_arready_reg = 1'b0, s_axi_arready_next;\n\nreg [ID_WIDTH-1:0] m_axi_arid_reg = {ID_WIDTH{1'b0}}, m_axi_arid_next;\nreg [ADDR_WIDTH-1:0] m_axi_araddr_reg = {ADDR_WIDTH{1'b0}}, m_axi_araddr_next;\nreg [7:0] m_axi_arlen_reg = 8'd0, m_axi_arlen_next;\nreg [2:0] m_axi_arsize_reg = 3'd0, m_axi_arsize_next;\nreg [1:0] m_axi_arburst_reg = 2'd0, m_axi_arburst_next;\nreg m_axi_arlock_reg = 1'b0, m_axi_arlock_next;\nreg [3:0] m_axi_arcache_reg = 4'd0, m_axi_arcache_next;\nreg [2:0] m_axi_arprot_reg = 3'd0, m_axi_arprot_next;\nreg [3:0] m_axi_arqos_reg = 4'd0, m_axi_arqos_next;\nreg [3:0] m_axi_arregion_reg = 4'd0, m_axi_arregion_next;\nreg [ARUSER_WIDTH-1:0] m_axi_aruser_reg = {ARUSER_WIDTH{1'b0}}, m_axi_aruser_next;\nreg m_axi_arvalid_reg = 1'b0, m_axi_arvalid_next;\nreg m_axi_rready_reg = 1'b0, m_axi_rready_next;\n\n// internal datapath\nreg  [ID_WIDTH-1:0]     s_axi_rid_int;\nreg  [S_DATA_WIDTH-1:0] s_axi_rdata_int;\nreg  [1:0]              s_axi_rresp_int;\nreg                     s_axi_rlast_int;\nreg  [RUSER_WIDTH-1:0]  s_axi_ruser_int;\nreg                     s_axi_rvalid_int;\nreg                     s_axi_rready_int_reg = 1'b0;\nwire                    s_axi_rready_int_early;\n\nassign s_axi_arready = s_axi_arready_reg;\n\nassign m_axi_arid = FORWARD_ID ? m_axi_arid_reg : {ID_WIDTH{1'b0}};\nassign m_axi_araddr = m_axi_araddr_reg;\nassign m_axi_arlen = m_axi_arlen_reg;\nassign m_axi_arsize = m_axi_arsize_reg;\nassign m_axi_arburst = m_axi_arburst_reg;\nassign m_axi_arlock = m_axi_arlock_reg;\nassign m_axi_arcache = m_axi_arcache_reg;\nassign m_axi_arprot = m_axi_arprot_reg;\nassign m_axi_arqos = m_axi_arqos_reg;\nassign m_axi_arregion = m_axi_arregion_reg;\nassign m_axi_aruser = ARUSER_ENABLE ? m_axi_aruser_reg : {ARUSER_WIDTH{1'b0}};\nassign m_axi_arvalid = m_axi_arvalid_reg;\nassign m_axi_rready = m_axi_rready_reg;\n\nalways @* begin\n    state_next = STATE_IDLE;\n\n    id_next = id_reg;\n    addr_next = addr_reg;\n    data_next = data_reg;\n    resp_next = resp_reg;\n    ruser_next = ruser_reg;\n    burst_next = burst_reg;\n    burst_size_next = burst_size_reg;\n    master_burst_next = master_burst_reg;\n    master_burst_size_next = master_burst_size_reg;\n\n    s_axi_arready_next = 1'b0;\n    m_axi_arid_next = m_axi_arid_reg;\n    m_axi_araddr_next = m_axi_araddr_reg;\n    m_axi_arlen_next = m_axi_arlen_reg;\n    m_axi_arsize_next = m_axi_arsize_reg;\n    m_axi_arburst_next = m_axi_arburst_reg;\n    m_axi_arlock_next = m_axi_arlock_reg;\n    m_axi_arcache_next = m_axi_arcache_reg;\n    m_axi_arprot_next = m_axi_arprot_reg;\n    m_axi_arqos_next = m_axi_arqos_reg;\n    m_axi_arregion_next = m_axi_arregion_reg;\n    m_axi_aruser_next = m_axi_aruser_reg;\n    m_axi_arvalid_next = m_axi_arvalid_reg && !m_axi_arready;\n    m_axi_rready_next = 1'b0;\n\n    if (SEGMENT_COUNT == 1) begin\n        // master output is same width; direct transfer with no splitting/merging\n        s_axi_rid_int = id_reg;\n        s_axi_rdata_int = m_axi_rdata;\n        s_axi_rresp_int = m_axi_rresp;\n        s_axi_rlast_int = m_axi_rlast;\n        s_axi_ruser_int = m_axi_ruser;\n        s_axi_rvalid_int = 0;\n\n        case (state_reg)\n            STATE_IDLE: begin\n                // idle state; wait for new burst\n                s_axi_arready_next = !m_axi_arvalid;\n\n                if (s_axi_arready && s_axi_arvalid) begin\n                    s_axi_arready_next = 1'b0;\n                    id_next = s_axi_arid;\n                    m_axi_arid_next = s_axi_arid;\n                    m_axi_araddr_next = s_axi_araddr;\n                    m_axi_arlen_next = s_axi_arlen;\n                    m_axi_arsize_next = s_axi_arsize;\n                    m_axi_arburst_next = s_axi_arburst;\n                    m_axi_arlock_next = s_axi_arlock;\n                    m_axi_arcache_next = s_axi_arcache;\n                    m_axi_arprot_next = s_axi_arprot;\n                    m_axi_arqos_next = s_axi_arqos;\n                    m_axi_arregion_next = s_axi_arregion;\n                    m_axi_aruser_next = s_axi_aruser;\n                    m_axi_arvalid_next = 1'b1;\n                    m_axi_rready_next = s_axi_rready_int_early;\n                    state_next = STATE_DATA;\n                end else begin\n                    state_next = STATE_IDLE;\n                end\n            end\n            STATE_DATA: begin\n                // data state; transfer read data\n                m_axi_rready_next = s_axi_rready_int_early;\n\n                if (m_axi_rready && m_axi_rvalid) begin\n                    s_axi_rid_int = id_reg;\n                    s_axi_rdata_int = m_axi_rdata;\n                    s_axi_rresp_int = m_axi_rresp;\n                    s_axi_rlast_int = m_axi_rlast;\n                    s_axi_ruser_int = m_axi_ruser;\n                    s_axi_rvalid_int = 1'b1;\n                    if (m_axi_rlast) begin\n                        // last data word, return to idle\n                        m_axi_rready_next = 1'b0;\n                        s_axi_arready_next = !m_axi_arvalid;\n                        state_next = STATE_IDLE;\n                    end else begin\n                        state_next = STATE_DATA;\n                    end\n                end else begin\n                    state_next = STATE_DATA;\n                end\n            end\n        endcase\n    end else if (EXPAND) begin\n        // master output is wider; split reads\n        s_axi_rid_int = id_reg;\n        s_axi_rdata_int = m_axi_rdata;\n        s_axi_rresp_int = m_axi_rresp;\n        s_axi_rlast_int = m_axi_rlast;\n        s_axi_ruser_int = m_axi_ruser;\n        s_axi_rvalid_int = 0;\n\n        case (state_reg)\n            STATE_IDLE: begin\n                // idle state; wait for new burst\n                s_axi_arready_next = !m_axi_arvalid;\n\n                if (s_axi_arready && s_axi_arvalid) begin\n                    s_axi_arready_next = 1'b0;\n                    id_next = s_axi_arid;\n                    m_axi_arid_next = s_axi_arid;\n                    m_axi_araddr_next = s_axi_araddr;\n                    addr_next = s_axi_araddr;\n                    burst_next = s_axi_arlen;\n                    burst_size_next = s_axi_arsize;\n                    if (CONVERT_BURST && s_axi_arcache[1] && (CONVERT_NARROW_BURST || s_axi_arsize == S_BURST_SIZE)) begin\n                        // split reads\n                        // require CONVERT_BURST and arcache[1] set\n                        master_burst_size_next = M_BURST_SIZE;\n                        if (CONVERT_NARROW_BURST) begin\n                            m_axi_arlen_next = (({{S_ADDR_BIT_OFFSET+1{1'b0}}, s_axi_arlen} << s_axi_arsize) + s_axi_araddr[M_ADDR_BIT_OFFSET-1:0]) >> M_BURST_SIZE;\n                        end else begin\n                            m_axi_arlen_next = ({1'b0, s_axi_arlen} + s_axi_araddr[M_ADDR_BIT_OFFSET-1:S_ADDR_BIT_OFFSET]) >> $clog2(SEGMENT_COUNT);\n                        end\n                        m_axi_arsize_next = M_BURST_SIZE;\n                        state_next = STATE_DATA_READ;\n                    end else begin\n                        // output narrow burst\n                        master_burst_size_next = s_axi_arsize;\n                        m_axi_arlen_next = s_axi_arlen;\n                        m_axi_arsize_next = s_axi_arsize;\n                        state_next = STATE_DATA;\n                    end\n                    m_axi_arburst_next = s_axi_arburst;\n                    m_axi_arlock_next = s_axi_arlock;\n                    m_axi_arcache_next = s_axi_arcache;\n                    m_axi_arprot_next = s_axi_arprot;\n                    m_axi_arqos_next = s_axi_arqos;\n                    m_axi_arregion_next = s_axi_arregion;\n                    m_axi_aruser_next = s_axi_aruser;\n                    m_axi_arvalid_next = 1'b1;\n                    m_axi_rready_next = s_axi_rready_int_early;\n                end else begin\n                    state_next = STATE_IDLE;\n                end\n            end\n            STATE_DATA: begin\n                m_axi_rready_next = s_axi_rready_int_early;\n\n                if (m_axi_rready && m_axi_rvalid) begin\n                    s_axi_rid_int = id_reg;\n                    s_axi_rdata_int = m_axi_rdata >> (addr_reg[M_ADDR_BIT_OFFSET-1:S_ADDR_BIT_OFFSET] * S_DATA_WIDTH);\n                    s_axi_rresp_int = m_axi_rresp;\n                    s_axi_rlast_int = m_axi_rlast;\n                    s_axi_ruser_int = m_axi_ruser;\n                    s_axi_rvalid_int = 1'b1;\n                    addr_next = addr_reg + (1 << burst_size_reg);\n                    if (m_axi_rlast) begin\n                        m_axi_rready_next = 1'b0;\n                        s_axi_arready_next = !m_axi_arvalid;\n                        state_next = STATE_IDLE;\n                    end else begin\n                        state_next = STATE_DATA;\n                    end\n                end else begin\n                    state_next = STATE_DATA;\n                end\n            end\n            STATE_DATA_READ: begin\n                m_axi_rready_next = s_axi_rready_int_early;\n\n                if (m_axi_rready && m_axi_rvalid) begin\n                    s_axi_rid_int = id_reg;\n                    data_next = m_axi_rdata;\n                    resp_next = m_axi_rresp;\n                    ruser_next = m_axi_ruser;\n                    s_axi_rdata_int = m_axi_rdata >> (addr_reg[M_ADDR_BIT_OFFSET-1:S_ADDR_BIT_OFFSET] * S_DATA_WIDTH);\n                    s_axi_rresp_int = m_axi_rresp;\n                    s_axi_rlast_int = 1'b0;\n                    s_axi_ruser_int = m_axi_ruser;\n                    s_axi_rvalid_int = 1'b1;\n                    burst_next = burst_reg - 1;\n                    addr_next = addr_reg + (1 << burst_size_reg);\n                    if (burst_reg == 0) begin\n                        m_axi_rready_next = 1'b0;\n                        s_axi_arready_next = !m_axi_arvalid;\n                        s_axi_rlast_int = 1'b1;\n                        state_next = STATE_IDLE;\n                    end else if (addr_next[master_burst_size_reg] != addr_reg[master_burst_size_reg]) begin\n                        state_next = STATE_DATA_READ;\n                    end else begin\n                        m_axi_rready_next = 1'b0;\n                        state_next = STATE_DATA_SPLIT;\n                    end\n                end else begin\n                    state_next = STATE_DATA_READ;\n                end\n            end\n            STATE_DATA_SPLIT: begin\n                m_axi_rready_next = 1'b0;\n\n                if (s_axi_rready_int_reg) begin\n                    s_axi_rid_int = id_reg;\n                    s_axi_rdata_int = data_reg >> (addr_reg[M_ADDR_BIT_OFFSET-1:S_ADDR_BIT_OFFSET] * S_DATA_WIDTH);\n                    s_axi_rresp_int = resp_reg;\n                    s_axi_rlast_int = 1'b0;\n                    s_axi_ruser_int = ruser_reg;\n                    s_axi_rvalid_int = 1'b1;\n                    burst_next = burst_reg - 1;\n                    addr_next = addr_reg + (1 << burst_size_reg);\n                    if (burst_reg == 0) begin\n                        s_axi_arready_next = !m_axi_arvalid;\n                        s_axi_rlast_int = 1'b1;\n                        state_next = STATE_IDLE;\n                    end else if (addr_next[master_burst_size_reg] != addr_reg[master_burst_size_reg]) begin\n                        m_axi_rready_next = s_axi_rready_int_early;\n                        state_next = STATE_DATA_READ;\n                    end else begin\n                        state_next = STATE_DATA_SPLIT;\n                    end\n                end else begin\n                    state_next = STATE_DATA_SPLIT;\n                end\n            end\n        endcase\n    end else begin\n        // master output is narrower; merge reads and possibly split burst\n        s_axi_rid_int = id_reg;\n        s_axi_rdata_int = data_reg;\n        s_axi_rresp_int = resp_reg;\n        s_axi_rlast_int = 1'b0;\n        s_axi_ruser_int = m_axi_ruser;\n        s_axi_rvalid_int = 0;\n\n        case (state_reg)\n            STATE_IDLE: begin\n                // idle state; wait for new burst\n                s_axi_arready_next = !m_axi_arvalid;\n\n                resp_next = 2'd0;\n\n                if (s_axi_arready && s_axi_arvalid) begin\n                    s_axi_arready_next = 1'b0;\n                    id_next = s_axi_arid;\n                    m_axi_arid_next = s_axi_arid;\n                    m_axi_araddr_next = s_axi_araddr;\n                    addr_next = s_axi_araddr;\n                    burst_next = s_axi_arlen;\n                    burst_size_next = s_axi_arsize;\n                    if (s_axi_arsize > M_BURST_SIZE) begin\n                        // need to adjust burst size\n                        if (s_axi_arlen >> (8+M_BURST_SIZE-s_axi_arsize) != 0) begin\n                            // limit burst length to max\n                            master_burst_next = (8'd255 << (s_axi_arsize-M_BURST_SIZE)) | ((~s_axi_araddr & (8'hff >> (8-s_axi_arsize))) >> M_BURST_SIZE);\n                        end else begin\n                            master_burst_next = (s_axi_arlen << (s_axi_arsize-M_BURST_SIZE)) | ((~s_axi_araddr & (8'hff >> (8-s_axi_arsize))) >> M_BURST_SIZE);\n                        end\n                        master_burst_size_next = M_BURST_SIZE;\n                        m_axi_arlen_next = master_burst_next;\n                        m_axi_arsize_next = master_burst_size_next;\n                    end else begin\n                        // pass through narrow (enough) burst\n                        master_burst_next = s_axi_arlen;\n                        master_burst_size_next = s_axi_arsize;\n                        m_axi_arlen_next = s_axi_arlen;\n                        m_axi_arsize_next = s_axi_arsize;\n                    end\n                    m_axi_arburst_next = s_axi_arburst;\n                    m_axi_arlock_next = s_axi_arlock;\n                    m_axi_arcache_next = s_axi_arcache;\n                    m_axi_arprot_next = s_axi_arprot;\n                    m_axi_arqos_next = s_axi_arqos;\n                    m_axi_arregion_next = s_axi_arregion;\n                    m_axi_aruser_next = s_axi_aruser;\n                    m_axi_arvalid_next = 1'b1;\n                    m_axi_rready_next = 1'b0;\n                    state_next = STATE_DATA;\n                end else begin\n                    state_next = STATE_IDLE;\n                end\n            end\n            STATE_DATA: begin\n                m_axi_rready_next = s_axi_rready_int_early && !m_axi_arvalid;\n\n                if (m_axi_rready && m_axi_rvalid) begin\n                    data_next[addr_reg[S_ADDR_BIT_OFFSET-1:M_ADDR_BIT_OFFSET]*SEGMENT_DATA_WIDTH +: SEGMENT_DATA_WIDTH] = m_axi_rdata;\n                    if (m_axi_rresp) begin\n                        resp_next = m_axi_rresp;\n                    end\n                    s_axi_rid_int = id_reg;\n                    s_axi_rdata_int = data_next;\n                    s_axi_rresp_int = resp_next;\n                    s_axi_rlast_int = 1'b0;\n                    s_axi_ruser_int = m_axi_ruser;\n                    s_axi_rvalid_int = 1'b0;\n                    master_burst_next = master_burst_reg - 1;\n                    addr_next = (addr_reg + (1 << master_burst_size_reg)) & ({ADDR_WIDTH{1'b1}} << master_burst_size_reg);\n                    m_axi_araddr_next = addr_next;\n                    if (addr_next[burst_size_reg] != addr_reg[burst_size_reg]) begin\n                        data_next = {DATA_WIDTH{1'b0}};\n                        burst_next = burst_reg - 1;\n                        s_axi_rvalid_int = 1'b1;\n                    end\n                    if (master_burst_reg == 0) begin\n                        if (burst_next >> (8+M_BURST_SIZE-burst_size_reg) != 0) begin\n                            // limit burst length to max\n                            master_burst_next = 8'd255;\n                        end else begin\n                            master_burst_next = (burst_next << (burst_size_reg-M_BURST_SIZE)) | (8'hff >> (8-burst_size_reg) >> M_BURST_SIZE);\n                        end\n                        m_axi_arlen_next = master_burst_next;\n\n                        if (burst_reg == 0) begin\n                            m_axi_rready_next = 1'b0;\n                            s_axi_rlast_int = 1'b1;\n                            s_axi_rvalid_int = 1'b1;\n                            s_axi_arready_next = !m_axi_arvalid;\n                            state_next = STATE_IDLE;\n                        end else begin\n                            // start new burst\n                            m_axi_arvalid_next = 1'b1;\n                            m_axi_rready_next = 1'b0;\n                            state_next = STATE_DATA;\n                        end\n                    end else begin\n                        state_next = STATE_DATA;\n                    end\n                end else begin\n                    state_next = STATE_DATA;\n                end\n            end\n        endcase\n    end\nend\n\nalways @(posedge clk) begin\n    state_reg <= state_next;\n\n    id_reg <= id_next;\n    addr_reg <= addr_next;\n    data_reg <= data_next;\n    resp_reg <= resp_next;\n    ruser_reg <= ruser_next;\n    burst_reg <= burst_next;\n    burst_size_reg <= burst_size_next;\n    master_burst_reg <= master_burst_next;\n    master_burst_size_reg <= master_burst_size_next;\n\n    s_axi_arready_reg <= s_axi_arready_next;\n\n    m_axi_arid_reg <= m_axi_arid_next;\n    m_axi_araddr_reg <= m_axi_araddr_next;\n    m_axi_arlen_reg <= m_axi_arlen_next;\n    m_axi_arsize_reg <= m_axi_arsize_next;\n    m_axi_arburst_reg <= m_axi_arburst_next;\n    m_axi_arlock_reg <= m_axi_arlock_next;\n    m_axi_arcache_reg <= m_axi_arcache_next;\n    m_axi_arprot_reg <= m_axi_arprot_next;\n    m_axi_arqos_reg <= m_axi_arqos_next;\n    m_axi_arregion_reg <= m_axi_arregion_next;\n    m_axi_aruser_reg <= m_axi_aruser_next;\n    m_axi_arvalid_reg <= m_axi_arvalid_next;\n    m_axi_rready_reg <= m_axi_rready_next;\n\n    if (rst) begin\n        state_reg <= STATE_IDLE;\n\n        s_axi_arready_reg <= 1'b0;\n\n        m_axi_arvalid_reg <= 1'b0;\n        m_axi_rready_reg <= 1'b0;\n    end\nend\n\n// output datapath logic\nreg [ID_WIDTH-1:0]     s_axi_rid_reg    = {ID_WIDTH{1'b0}};\nreg [S_DATA_WIDTH-1:0] s_axi_rdata_reg  = {S_DATA_WIDTH{1'b0}};\nreg [1:0]              s_axi_rresp_reg  = 2'd0;\nreg                    s_axi_rlast_reg  = 1'b0;\nreg [RUSER_WIDTH-1:0]  s_axi_ruser_reg  = 1'b0;\nreg                    s_axi_rvalid_reg = 1'b0, s_axi_rvalid_next;\n\nreg [ID_WIDTH-1:0]     temp_s_axi_rid_reg    = {ID_WIDTH{1'b0}};\nreg [S_DATA_WIDTH-1:0] temp_s_axi_rdata_reg  = {S_DATA_WIDTH{1'b0}};\nreg [1:0]              temp_s_axi_rresp_reg  = 2'd0;\nreg                    temp_s_axi_rlast_reg  = 1'b0;\nreg [RUSER_WIDTH-1:0]  temp_s_axi_ruser_reg  = 1'b0;\nreg                    temp_s_axi_rvalid_reg = 1'b0, temp_s_axi_rvalid_next;\n\n// datapath control\nreg store_axi_r_int_to_output;\nreg store_axi_r_int_to_temp;\nreg store_axi_r_temp_to_output;\n\nassign s_axi_rid    = s_axi_rid_reg;\nassign s_axi_rdata  = s_axi_rdata_reg;\nassign s_axi_rresp  = s_axi_rresp_reg;\nassign s_axi_rlast  = s_axi_rlast_reg;\nassign s_axi_ruser  = RUSER_ENABLE ? s_axi_ruser_reg : {RUSER_WIDTH{1'b0}};\nassign s_axi_rvalid = s_axi_rvalid_reg;\n\n// enable ready input next cycle if output is ready or the temp reg will not be filled on the next cycle (output reg empty or no input)\nassign s_axi_rready_int_early = s_axi_rready | (~temp_s_axi_rvalid_reg & (~s_axi_rvalid_reg | ~s_axi_rvalid_int));\n\nalways @* begin\n    // transfer sink ready state to source\n    s_axi_rvalid_next = s_axi_rvalid_reg;\n    temp_s_axi_rvalid_next = temp_s_axi_rvalid_reg;\n\n    store_axi_r_int_to_output = 1'b0;\n    store_axi_r_int_to_temp = 1'b0;\n    store_axi_r_temp_to_output = 1'b0;\n\n    if (s_axi_rready_int_reg) begin\n        // input is ready\n        if (s_axi_rready | ~s_axi_rvalid_reg) begin\n            // output is ready or currently not valid, transfer data to output\n            s_axi_rvalid_next = s_axi_rvalid_int;\n            store_axi_r_int_to_output = 1'b1;\n        end else begin\n            // output is not ready, store input in temp\n            temp_s_axi_rvalid_next = s_axi_rvalid_int;\n            store_axi_r_int_to_temp = 1'b1;\n        end\n    end else if (s_axi_rready) begin\n        // input is not ready, but output is ready\n        s_axi_rvalid_next = temp_s_axi_rvalid_reg;\n        temp_s_axi_rvalid_next = 1'b0;\n        store_axi_r_temp_to_output = 1'b1;\n    end\nend\n\nalways @(posedge clk) begin\n    if (rst) begin\n        s_axi_rvalid_reg <= 1'b0;\n        s_axi_rready_int_reg <= 1'b0;\n        temp_s_axi_rvalid_reg <= 1'b0;\n    end else begin\n        s_axi_rvalid_reg <= s_axi_rvalid_next;\n        s_axi_rready_int_reg <= s_axi_rready_int_early;\n        temp_s_axi_rvalid_reg <= temp_s_axi_rvalid_next;\n    end\n\n    // datapath\n    if (store_axi_r_int_to_output) begin\n        s_axi_rid_reg <= s_axi_rid_int;\n        s_axi_rdata_reg <= s_axi_rdata_int;\n        s_axi_rresp_reg <= s_axi_rresp_int;\n        s_axi_rlast_reg <= s_axi_rlast_int;\n        s_axi_ruser_reg <= s_axi_ruser_int;\n    end else if (store_axi_r_temp_to_output) begin\n        s_axi_rid_reg <= temp_s_axi_rid_reg;\n        s_axi_rdata_reg <= temp_s_axi_rdata_reg;\n        s_axi_rresp_reg <= temp_s_axi_rresp_reg;\n        s_axi_rlast_reg <= temp_s_axi_rlast_reg;\n        s_axi_ruser_reg <= temp_s_axi_ruser_reg;\n    end\n\n    if (store_axi_r_int_to_temp) begin\n        temp_s_axi_rid_reg <= s_axi_rid_int;\n        temp_s_axi_rdata_reg <= s_axi_rdata_int;\n        temp_s_axi_rresp_reg <= s_axi_rresp_int;\n        temp_s_axi_rlast_reg <= s_axi_rlast_int;\n        temp_s_axi_ruser_reg <= s_axi_ruser_int;\n    end\nend\n\nendmodule\n\n`resetall\n","lang":"verilog"};
processSrcData(g_data);