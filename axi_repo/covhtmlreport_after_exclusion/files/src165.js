var g_data = {"name":"axi_crossbar_wr.v","src":"/*\n\nCopyright (c) 2018 Alex Forencich\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n*/\n\n// Language: Verilog 2001\n\n`resetall\n`timescale 1ns / 1ps\n`default_nettype none\n\n/*\n * AXI4 crossbar (write)\n */\nmodule axi_crossbar_wr #\n(\n    // Number of AXI inputs (slave interfaces)\n    parameter S_COUNT = 4,\n    // Number of AXI outputs (master interfaces)\n    parameter M_COUNT = 4,\n    // Width of data bus in bits\n    parameter DATA_WIDTH = 32,\n    // Width of address bus in bits\n    parameter ADDR_WIDTH = 32,\n    // Width of wstrb (width of data bus in words)\n    parameter STRB_WIDTH = (DATA_WIDTH/8),\n    // Input ID field width (from AXI masters)\n    parameter S_ID_WIDTH = 8,\n    // Output ID field width (towards AXI slaves)\n    // Additional bits required for response routing\n    parameter M_ID_WIDTH = S_ID_WIDTH+$clog2(S_COUNT),\n    // Propagate awuser signal\n    parameter AWUSER_ENABLE = 0,\n    // Width of awuser signal\n    parameter AWUSER_WIDTH = 1,\n    // Propagate wuser signal\n    parameter WUSER_ENABLE = 0,\n    // Width of wuser signal\n    parameter WUSER_WIDTH = 1,\n    // Propagate buser signal\n    parameter BUSER_ENABLE = 0,\n    // Width of buser signal\n    parameter BUSER_WIDTH = 1,\n    // Number of concurrent unique IDs for each slave interface\n    // S_COUNT concatenated fields of 32 bits\n    parameter S_THREADS = {S_COUNT{32'd2}},\n    // Number of concurrent operations for each slave interface\n    // S_COUNT concatenated fields of 32 bits\n    parameter S_ACCEPT = {S_COUNT{32'd16}},\n    // Number of regions per master interface\n    parameter M_REGIONS = 1,\n    // Master interface base addresses\n    // M_COUNT concatenated fields of M_REGIONS concatenated fields of ADDR_WIDTH bits\n    // set to zero for default addressing based on M_ADDR_WIDTH\n    parameter M_BASE_ADDR = 0,\n    // Master interface address widths\n    // M_COUNT concatenated fields of M_REGIONS concatenated fields of 32 bits\n    parameter M_ADDR_WIDTH = {M_COUNT{{M_REGIONS{32'd21}}}},\n    // Write connections between interfaces\n    // M_COUNT concatenated fields of S_COUNT bits\n    parameter M_CONNECT = {M_COUNT{{S_COUNT{1'b1}}}},\n    // Number of concurrent operations for each master interface\n    // M_COUNT concatenated fields of 32 bits\n    parameter M_ISSUE = {M_COUNT{32'd4}},\n    // Secure master (fail operations based on awprot/arprot)\n    // M_COUNT bits\n    parameter M_SECURE = {M_COUNT{1'b0}},\n    // Slave interface AW channel register type (input)\n    // 0 to bypass, 1 for simple buffer, 2 for skid buffer\n    parameter S_AW_REG_TYPE = {S_COUNT{2'd0}},\n    // Slave interface W channel register type (input)\n    // 0 to bypass, 1 for simple buffer, 2 for skid buffer\n    parameter S_W_REG_TYPE = {S_COUNT{2'd0}},\n    // Slave interface B channel register type (output)\n    // 0 to bypass, 1 for simple buffer, 2 for skid buffer\n    parameter S_B_REG_TYPE = {S_COUNT{2'd1}},\n    // Master interface AW channel register type (output)\n    // 0 to bypass, 1 for simple buffer, 2 for skid buffer\n    parameter M_AW_REG_TYPE = {M_COUNT{2'd1}},\n    // Master interface W channel register type (output)\n    // 0 to bypass, 1 for simple buffer, 2 for skid buffer\n    parameter M_W_REG_TYPE = {M_COUNT{2'd2}},\n    // Master interface B channel register type (input)\n    // 0 to bypass, 1 for simple buffer, 2 for skid buffer\n    parameter M_B_REG_TYPE = {M_COUNT{2'd0}}\n)\n(\n    input  wire                             clk,\n    input  wire                             rst,\n\n    /*\n     * AXI slave interfaces\n     */\n    input  wire [S_COUNT*S_ID_WIDTH-1:0]    s_axi_awid,\n    input  wire [S_COUNT*ADDR_WIDTH-1:0]    s_axi_awaddr,\n    input  wire [S_COUNT*8-1:0]             s_axi_awlen,\n    input  wire [S_COUNT*3-1:0]             s_axi_awsize,\n    input  wire [S_COUNT*2-1:0]             s_axi_awburst,\n    input  wire [S_COUNT-1:0]               s_axi_awlock,\n    input  wire [S_COUNT*4-1:0]             s_axi_awcache,\n    input  wire [S_COUNT*3-1:0]             s_axi_awprot,\n    input  wire [S_COUNT*4-1:0]             s_axi_awqos,\n    input  wire [S_COUNT*AWUSER_WIDTH-1:0]  s_axi_awuser,\n    input  wire [S_COUNT-1:0]               s_axi_awvalid,\n    output wire [S_COUNT-1:0]               s_axi_awready,\n    input  wire [S_COUNT*DATA_WIDTH-1:0]    s_axi_wdata,\n    input  wire [S_COUNT*STRB_WIDTH-1:0]    s_axi_wstrb,\n    input  wire [S_COUNT-1:0]               s_axi_wlast,\n    input  wire [S_COUNT*WUSER_WIDTH-1:0]   s_axi_wuser,\n    input  wire [S_COUNT-1:0]               s_axi_wvalid,\n    output wire [S_COUNT-1:0]               s_axi_wready,\n    output wire [S_COUNT*S_ID_WIDTH-1:0]    s_axi_bid,\n    output wire [S_COUNT*2-1:0]             s_axi_bresp,\n    output wire [S_COUNT*BUSER_WIDTH-1:0]   s_axi_buser,\n    output wire [S_COUNT-1:0]               s_axi_bvalid,\n    input  wire [S_COUNT-1:0]               s_axi_bready,\n\n    /*\n     * AXI master interfaces\n     */\n    output wire [M_COUNT*M_ID_WIDTH-1:0]    m_axi_awid,\n    output wire [M_COUNT*ADDR_WIDTH-1:0]    m_axi_awaddr,\n    output wire [M_COUNT*8-1:0]             m_axi_awlen,\n    output wire [M_COUNT*3-1:0]             m_axi_awsize,\n    output wire [M_COUNT*2-1:0]             m_axi_awburst,\n    output wire [M_COUNT-1:0]               m_axi_awlock,\n    output wire [M_COUNT*4-1:0]             m_axi_awcache,\n    output wire [M_COUNT*3-1:0]             m_axi_awprot,\n    output wire [M_COUNT*4-1:0]             m_axi_awqos,\n    output wire [M_COUNT*4-1:0]             m_axi_awregion,\n    output wire [M_COUNT*AWUSER_WIDTH-1:0]  m_axi_awuser,\n    output wire [M_COUNT-1:0]               m_axi_awvalid,\n    input  wire [M_COUNT-1:0]               m_axi_awready,\n    output wire [M_COUNT*DATA_WIDTH-1:0]    m_axi_wdata,\n    output wire [M_COUNT*STRB_WIDTH-1:0]    m_axi_wstrb,\n    output wire [M_COUNT-1:0]               m_axi_wlast,\n    output wire [M_COUNT*WUSER_WIDTH-1:0]   m_axi_wuser,\n    output wire [M_COUNT-1:0]               m_axi_wvalid,\n    input  wire [M_COUNT-1:0]               m_axi_wready,\n    input  wire [M_COUNT*M_ID_WIDTH-1:0]    m_axi_bid,\n    input  wire [M_COUNT*2-1:0]             m_axi_bresp,\n    input  wire [M_COUNT*BUSER_WIDTH-1:0]   m_axi_buser,\n    input  wire [M_COUNT-1:0]               m_axi_bvalid,\n    output wire [M_COUNT-1:0]               m_axi_bready\n);\n\nparameter CL_S_COUNT = $clog2(S_COUNT);\nparameter CL_M_COUNT = $clog2(M_COUNT);\nparameter M_COUNT_P1 = M_COUNT+1;\nparameter CL_M_COUNT_P1 = $clog2(M_COUNT_P1);\n\ninteger i;\n\n// check configuration\ninitial begin\n    if (M_ID_WIDTH < S_ID_WIDTH+$clog2(S_COUNT)) begin\n        $error(\"Error: M_ID_WIDTH must be at least $clog2(S_COUNT) larger than S_ID_WIDTH (instance %m)\");\n        $finish;\n    end\n\n    for (i = 0; i < M_COUNT*M_REGIONS; i = i + 1) begin\n        if (M_ADDR_WIDTH[i*32 +: 32] && (M_ADDR_WIDTH[i*32 +: 32] < 12 || M_ADDR_WIDTH[i*32 +: 32] > ADDR_WIDTH)) begin\n            $error(\"Error: value out of range (instance %m)\");\n            $finish;\n        end\n    end\nend\n\nwire [S_COUNT*S_ID_WIDTH-1:0]    int_s_axi_awid;\nwire [S_COUNT*ADDR_WIDTH-1:0]    int_s_axi_awaddr;\nwire [S_COUNT*8-1:0]             int_s_axi_awlen;\nwire [S_COUNT*3-1:0]             int_s_axi_awsize;\nwire [S_COUNT*2-1:0]             int_s_axi_awburst;\nwire [S_COUNT-1:0]               int_s_axi_awlock;\nwire [S_COUNT*4-1:0]             int_s_axi_awcache;\nwire [S_COUNT*3-1:0]             int_s_axi_awprot;\nwire [S_COUNT*4-1:0]             int_s_axi_awqos;\nwire [S_COUNT*4-1:0]             int_s_axi_awregion;\nwire [S_COUNT*AWUSER_WIDTH-1:0]  int_s_axi_awuser;\nwire [S_COUNT-1:0]               int_s_axi_awvalid;\nwire [S_COUNT-1:0]               int_s_axi_awready;\n\nwire [S_COUNT*M_COUNT-1:0]       int_axi_awvalid;\nwire [M_COUNT*S_COUNT-1:0]       int_axi_awready;\n\nwire [S_COUNT*DATA_WIDTH-1:0]    int_s_axi_wdata;\nwire [S_COUNT*STRB_WIDTH-1:0]    int_s_axi_wstrb;\nwire [S_COUNT-1:0]               int_s_axi_wlast;\nwire [S_COUNT*WUSER_WIDTH-1:0]   int_s_axi_wuser;\nwire [S_COUNT-1:0]               int_s_axi_wvalid;\nwire [S_COUNT-1:0]               int_s_axi_wready;\n\nwire [S_COUNT*M_COUNT-1:0]       int_axi_wvalid;\nwire [M_COUNT*S_COUNT-1:0]       int_axi_wready;\n\nwire [M_COUNT*M_ID_WIDTH-1:0]    int_m_axi_bid;\nwire [M_COUNT*2-1:0]             int_m_axi_bresp;\nwire [M_COUNT*BUSER_WIDTH-1:0]   int_m_axi_buser;\nwire [M_COUNT-1:0]               int_m_axi_bvalid;\nwire [M_COUNT-1:0]               int_m_axi_bready;\n\nwire [M_COUNT*S_COUNT-1:0]       int_axi_bvalid;\nwire [S_COUNT*M_COUNT-1:0]       int_axi_bready;\n\ngenerate\n\n    genvar m, n;\n\n    for (m = 0; m < S_COUNT; m = m + 1) begin : s_ifaces\n        // address decode and admission control\n        wire [CL_M_COUNT-1:0] a_select;\n\n        wire m_axi_avalid;\n        wire m_axi_aready;\n\n        wire [CL_M_COUNT-1:0] m_wc_select;\n        wire m_wc_decerr;\n        wire m_wc_valid;\n        wire m_wc_ready;\n\n        wire m_rc_decerr;\n        wire m_rc_valid;\n        wire m_rc_ready;\n\n        wire [S_ID_WIDTH-1:0] s_cpl_id;\n        wire s_cpl_valid;\n\n        axi_crossbar_addr #(\n            .S(m),\n            .S_COUNT(S_COUNT),\n            .M_COUNT(M_COUNT),\n            .ADDR_WIDTH(ADDR_WIDTH),\n            .ID_WIDTH(S_ID_WIDTH),\n            .S_THREADS(S_THREADS[m*32 +: 32]),\n            .S_ACCEPT(S_ACCEPT[m*32 +: 32]),\n            .M_REGIONS(M_REGIONS),\n            .M_BASE_ADDR(M_BASE_ADDR),\n            .M_ADDR_WIDTH(M_ADDR_WIDTH),\n            .M_CONNECT(M_CONNECT),\n            .M_SECURE(M_SECURE),\n            .WC_OUTPUT(1)\n        )\n        addr_inst (\n            .clk(clk),\n            .rst(rst),\n\n            /*\n             * Address input\n             */\n            .s_axi_aid(int_s_axi_awid[m*S_ID_WIDTH +: S_ID_WIDTH]),\n            .s_axi_aaddr(int_s_axi_awaddr[m*ADDR_WIDTH +: ADDR_WIDTH]),\n            .s_axi_aprot(int_s_axi_awprot[m*3 +: 3]),\n            .s_axi_aqos(int_s_axi_awqos[m*4 +: 4]),\n            .s_axi_avalid(int_s_axi_awvalid[m]),\n            .s_axi_aready(int_s_axi_awready[m]),\n\n            /*\n             * Address output\n             */\n            .m_axi_aregion(int_s_axi_awregion[m*4 +: 4]),\n            .m_select(a_select),\n            .m_axi_avalid(m_axi_avalid),\n            .m_axi_aready(m_axi_aready),\n\n            /*\n             * Write command output\n             */\n            .m_wc_select(m_wc_select),\n            .m_wc_decerr(m_wc_decerr),\n            .m_wc_valid(m_wc_valid),\n            .m_wc_ready(m_wc_ready),\n\n            /*\n             * Response command output\n             */\n            .m_rc_decerr(m_rc_decerr),\n            .m_rc_valid(m_rc_valid),\n            .m_rc_ready(m_rc_ready),\n\n            /*\n             * Completion input\n             */\n            .s_cpl_id(s_cpl_id),\n            .s_cpl_valid(s_cpl_valid)\n        );\n\n        assign int_axi_awvalid[m*M_COUNT +: M_COUNT] = m_axi_avalid << a_select;\n        assign m_axi_aready = int_axi_awready[a_select*S_COUNT+m];\n\n        // write command handling\n        reg [CL_M_COUNT-1:0] w_select_reg = 0, w_select_next;\n        reg w_drop_reg = 1'b0, w_drop_next;\n        reg w_select_valid_reg = 1'b0, w_select_valid_next;\n\n        assign m_wc_ready = !w_select_valid_reg;\n\n        always @* begin\n            w_select_next = w_select_reg;\n            w_drop_next = w_drop_reg && !(int_s_axi_wvalid[m] && int_s_axi_wready[m] && int_s_axi_wlast[m]);\n            w_select_valid_next = w_select_valid_reg && !(int_s_axi_wvalid[m] && int_s_axi_wready[m] && int_s_axi_wlast[m]);\n\n            if (m_wc_valid && !w_select_valid_reg) begin\n                w_select_next = m_wc_select;\n                w_drop_next = m_wc_decerr;\n                w_select_valid_next = m_wc_valid;\n            end\n        end\n\n        always @(posedge clk) begin\n            if (rst) begin\n                w_select_valid_reg <= 1'b0;\n            end else begin\n                w_select_valid_reg <= w_select_valid_next;\n            end\n\n            w_select_reg <= w_select_next;\n            w_drop_reg <= w_drop_next;\n        end\n\n        // write data forwarding\n        assign int_axi_wvalid[m*M_COUNT +: M_COUNT] = (int_s_axi_wvalid[m] && w_select_valid_reg && !w_drop_reg) << w_select_reg;\n        assign int_s_axi_wready[m] = int_axi_wready[w_select_reg*S_COUNT+m] || w_drop_reg;\n\n        // decode error handling\n        reg [S_ID_WIDTH-1:0]  decerr_m_axi_bid_reg = {S_ID_WIDTH{1'b0}}, decerr_m_axi_bid_next;\n        reg                   decerr_m_axi_bvalid_reg = 1'b0, decerr_m_axi_bvalid_next;\n        wire                  decerr_m_axi_bready;\n\n        assign m_rc_ready = !decerr_m_axi_bvalid_reg;\n\n        always @* begin\n            decerr_m_axi_bid_next = decerr_m_axi_bid_reg;\n            decerr_m_axi_bvalid_next = decerr_m_axi_bvalid_reg;\n\n            if (decerr_m_axi_bvalid_reg) begin\n                if (decerr_m_axi_bready) begin\n                    decerr_m_axi_bvalid_next = 1'b0;\n                end\n            end else if (m_rc_valid && m_rc_ready) begin\n                decerr_m_axi_bid_next = int_s_axi_awid[m*S_ID_WIDTH +: S_ID_WIDTH];\n                decerr_m_axi_bvalid_next = 1'b1;\n            end\n        end\n\n        always @(posedge clk) begin\n            if (rst) begin\n                decerr_m_axi_bvalid_reg <= 1'b0;\n            end else begin\n                decerr_m_axi_bvalid_reg <= decerr_m_axi_bvalid_next;\n            end\n\n            decerr_m_axi_bid_reg <= decerr_m_axi_bid_next;\n        end\n\n        // write response arbitration\n        wire [M_COUNT_P1-1:0] b_request;\n        wire [M_COUNT_P1-1:0] b_acknowledge;\n        wire [M_COUNT_P1-1:0] b_grant;\n        wire b_grant_valid;\n        wire [CL_M_COUNT_P1-1:0] b_grant_encoded;\n\n        arbiter #(\n            .PORTS(M_COUNT_P1),\n            .ARB_TYPE_ROUND_ROBIN(1),\n            .ARB_BLOCK(1),\n            .ARB_BLOCK_ACK(1),\n            .ARB_LSB_HIGH_PRIORITY(1)\n        )\n        b_arb_inst (\n            .clk(clk),\n            .rst(rst),\n            .request(b_request),\n            .acknowledge(b_acknowledge),\n            .grant(b_grant),\n            .grant_valid(b_grant_valid),\n            .grant_encoded(b_grant_encoded)\n        );\n\n        // write response mux\n        wire [S_ID_WIDTH-1:0]  m_axi_bid_mux    = {decerr_m_axi_bid_reg, int_m_axi_bid} >> b_grant_encoded*M_ID_WIDTH;\n        wire [1:0]             m_axi_bresp_mux  = {2'b11, int_m_axi_bresp} >> b_grant_encoded*2;\n        wire [BUSER_WIDTH-1:0] m_axi_buser_mux  = {{BUSER_WIDTH{1'b0}}, int_m_axi_buser} >> b_grant_encoded*BUSER_WIDTH;\n        wire                   m_axi_bvalid_mux = ({decerr_m_axi_bvalid_reg, int_m_axi_bvalid} >> b_grant_encoded) & b_grant_valid;\n        wire                   m_axi_bready_mux;\n\n        assign int_axi_bready[m*M_COUNT +: M_COUNT] = (b_grant_valid && m_axi_bready_mux) << b_grant_encoded;\n        assign decerr_m_axi_bready = (b_grant_valid && m_axi_bready_mux) && (b_grant_encoded == M_COUNT_P1-1);\n\n        for (n = 0; n < M_COUNT; n = n + 1) begin\n            assign b_request[n] = int_axi_bvalid[n*S_COUNT+m] && !b_grant[n];\n            assign b_acknowledge[n] = b_grant[n] && int_axi_bvalid[n*S_COUNT+m] && m_axi_bready_mux;\n        end\n\n        assign b_request[M_COUNT_P1-1] = decerr_m_axi_bvalid_reg && !b_grant[M_COUNT_P1-1];\n        assign b_acknowledge[M_COUNT_P1-1] = b_grant[M_COUNT_P1-1] && decerr_m_axi_bvalid_reg && m_axi_bready_mux;\n\n        assign s_cpl_id = m_axi_bid_mux;\n        assign s_cpl_valid = m_axi_bvalid_mux && m_axi_bready_mux;\n\n        // S side register\n        axi_register_wr #(\n            .DATA_WIDTH(DATA_WIDTH),\n            .ADDR_WIDTH(ADDR_WIDTH),\n            .STRB_WIDTH(STRB_WIDTH),\n            .ID_WIDTH(S_ID_WIDTH),\n            .AWUSER_ENABLE(AWUSER_ENABLE),\n            .AWUSER_WIDTH(AWUSER_WIDTH),\n            .WUSER_ENABLE(WUSER_ENABLE),\n            .WUSER_WIDTH(WUSER_WIDTH),\n            .BUSER_ENABLE(BUSER_ENABLE),\n            .BUSER_WIDTH(BUSER_WIDTH),\n            .AW_REG_TYPE(S_AW_REG_TYPE[m*2 +: 2]),\n            .W_REG_TYPE(S_W_REG_TYPE[m*2 +: 2]),\n            .B_REG_TYPE(S_B_REG_TYPE[m*2 +: 2])\n        )\n        reg_inst (\n            .clk(clk),\n            .rst(rst),\n            .s_axi_awid(s_axi_awid[m*S_ID_WIDTH +: S_ID_WIDTH]),\n            .s_axi_awaddr(s_axi_awaddr[m*ADDR_WIDTH +: ADDR_WIDTH]),\n            .s_axi_awlen(s_axi_awlen[m*8 +: 8]),\n            .s_axi_awsize(s_axi_awsize[m*3 +: 3]),\n            .s_axi_awburst(s_axi_awburst[m*2 +: 2]),\n            .s_axi_awlock(s_axi_awlock[m]),\n            .s_axi_awcache(s_axi_awcache[m*4 +: 4]),\n            .s_axi_awprot(s_axi_awprot[m*3 +: 3]),\n            .s_axi_awqos(s_axi_awqos[m*4 +: 4]),\n            .s_axi_awregion(4'd0),\n            .s_axi_awuser(s_axi_awuser[m*AWUSER_WIDTH +: AWUSER_WIDTH]),\n            .s_axi_awvalid(s_axi_awvalid[m]),\n            .s_axi_awready(s_axi_awready[m]),\n            .s_axi_wdata(s_axi_wdata[m*DATA_WIDTH +: DATA_WIDTH]),\n            .s_axi_wstrb(s_axi_wstrb[m*STRB_WIDTH +: STRB_WIDTH]),\n            .s_axi_wlast(s_axi_wlast[m]),\n            .s_axi_wuser(s_axi_wuser[m*WUSER_WIDTH +: WUSER_WIDTH]),\n            .s_axi_wvalid(s_axi_wvalid[m]),\n            .s_axi_wready(s_axi_wready[m]),\n            .s_axi_bid(s_axi_bid[m*S_ID_WIDTH +: S_ID_WIDTH]),\n            .s_axi_bresp(s_axi_bresp[m*2 +: 2]),\n            .s_axi_buser(s_axi_buser[m*BUSER_WIDTH +: BUSER_WIDTH]),\n            .s_axi_bvalid(s_axi_bvalid[m]),\n            .s_axi_bready(s_axi_bready[m]),\n            .m_axi_awid(int_s_axi_awid[m*S_ID_WIDTH +: S_ID_WIDTH]),\n            .m_axi_awaddr(int_s_axi_awaddr[m*ADDR_WIDTH +: ADDR_WIDTH]),\n            .m_axi_awlen(int_s_axi_awlen[m*8 +: 8]),\n            .m_axi_awsize(int_s_axi_awsize[m*3 +: 3]),\n            .m_axi_awburst(int_s_axi_awburst[m*2 +: 2]),\n            .m_axi_awlock(int_s_axi_awlock[m]),\n            .m_axi_awcache(int_s_axi_awcache[m*4 +: 4]),\n            .m_axi_awprot(int_s_axi_awprot[m*3 +: 3]),\n            .m_axi_awqos(int_s_axi_awqos[m*4 +: 4]),\n            .m_axi_awregion(),\n            .m_axi_awuser(int_s_axi_awuser[m*AWUSER_WIDTH +: AWUSER_WIDTH]),\n            .m_axi_awvalid(int_s_axi_awvalid[m]),\n            .m_axi_awready(int_s_axi_awready[m]),\n            .m_axi_wdata(int_s_axi_wdata[m*DATA_WIDTH +: DATA_WIDTH]),\n            .m_axi_wstrb(int_s_axi_wstrb[m*STRB_WIDTH +: STRB_WIDTH]),\n            .m_axi_wlast(int_s_axi_wlast[m]),\n            .m_axi_wuser(int_s_axi_wuser[m*WUSER_WIDTH +: WUSER_WIDTH]),\n            .m_axi_wvalid(int_s_axi_wvalid[m]),\n            .m_axi_wready(int_s_axi_wready[m]),\n            .m_axi_bid(m_axi_bid_mux),\n            .m_axi_bresp(m_axi_bresp_mux),\n            .m_axi_buser(m_axi_buser_mux),\n            .m_axi_bvalid(m_axi_bvalid_mux),\n            .m_axi_bready(m_axi_bready_mux)\n        );\n    end // s_ifaces\n\n    for (n = 0; n < M_COUNT; n = n + 1) begin : m_ifaces\n        // in-flight transaction count\n        wire trans_start;\n        wire trans_complete;\n        reg [$clog2(M_ISSUE[n*32 +: 32]+1)-1:0] trans_count_reg = 0;\n\n        wire trans_limit = trans_count_reg >= M_ISSUE[n*32 +: 32] && !trans_complete;\n\n        always @(posedge clk) begin\n            if (rst) begin\n                trans_count_reg <= 0;\n            end else begin\n                if (trans_start && !trans_complete) begin\n                    trans_count_reg <= trans_count_reg + 1;\n                end else if (!trans_start && trans_complete) begin\n                    trans_count_reg <= trans_count_reg - 1;\n                end\n            end\n        end\n\n        // address arbitration\n        reg [CL_S_COUNT-1:0] w_select_reg = 0, w_select_next;\n        reg w_select_valid_reg = 1'b0, w_select_valid_next;\n        reg w_select_new_reg = 1'b0, w_select_new_next;\n\n        wire [S_COUNT-1:0] a_request;\n        wire [S_COUNT-1:0] a_acknowledge;\n        wire [S_COUNT-1:0] a_grant;\n        wire a_grant_valid;\n        wire [CL_S_COUNT-1:0] a_grant_encoded;\n\n        arbiter #(\n            .PORTS(S_COUNT),\n            .ARB_TYPE_ROUND_ROBIN(1),\n            .ARB_BLOCK(1),\n            .ARB_BLOCK_ACK(1),\n            .ARB_LSB_HIGH_PRIORITY(1)\n        )\n        a_arb_inst (\n            .clk(clk),\n            .rst(rst),\n            .request(a_request),\n            .acknowledge(a_acknowledge),\n            .grant(a_grant),\n            .grant_valid(a_grant_valid),\n            .grant_encoded(a_grant_encoded)\n        );\n\n        // address mux\n        wire [M_ID_WIDTH-1:0]   s_axi_awid_mux     = int_s_axi_awid[a_grant_encoded*S_ID_WIDTH +: S_ID_WIDTH] | (a_grant_encoded << S_ID_WIDTH);\n        wire [ADDR_WIDTH-1:0]   s_axi_awaddr_mux   = int_s_axi_awaddr[a_grant_encoded*ADDR_WIDTH +: ADDR_WIDTH];\n        wire [7:0]              s_axi_awlen_mux    = int_s_axi_awlen[a_grant_encoded*8 +: 8];\n        wire [2:0]              s_axi_awsize_mux   = int_s_axi_awsize[a_grant_encoded*3 +: 3];\n        wire [1:0]              s_axi_awburst_mux  = int_s_axi_awburst[a_grant_encoded*2 +: 2];\n        wire                    s_axi_awlock_mux   = int_s_axi_awlock[a_grant_encoded];\n        wire [3:0]              s_axi_awcache_mux  = int_s_axi_awcache[a_grant_encoded*4 +: 4];\n        wire [2:0]              s_axi_awprot_mux   = int_s_axi_awprot[a_grant_encoded*3 +: 3];\n        wire [3:0]              s_axi_awqos_mux    = int_s_axi_awqos[a_grant_encoded*4 +: 4];\n        wire [3:0]              s_axi_awregion_mux = int_s_axi_awregion[a_grant_encoded*4 +: 4];\n        wire [AWUSER_WIDTH-1:0] s_axi_awuser_mux   = int_s_axi_awuser[a_grant_encoded*AWUSER_WIDTH +: AWUSER_WIDTH];\n        wire                    s_axi_awvalid_mux  = int_axi_awvalid[a_grant_encoded*M_COUNT+n] && a_grant_valid;\n        wire                    s_axi_awready_mux;\n\n        assign int_axi_awready[n*S_COUNT +: S_COUNT] = (a_grant_valid && s_axi_awready_mux) << a_grant_encoded;\n\n        for (m = 0; m < S_COUNT; m = m + 1) begin\n            assign a_request[m] = int_axi_awvalid[m*M_COUNT+n] && !a_grant[m] && !trans_limit && !w_select_valid_next;\n            assign a_acknowledge[m] = a_grant[m] && int_axi_awvalid[m*M_COUNT+n] && s_axi_awready_mux;\n        end\n\n        assign trans_start = s_axi_awvalid_mux && s_axi_awready_mux && a_grant_valid;\n\n        // write data mux\n        wire [DATA_WIDTH-1:0]  s_axi_wdata_mux   = int_s_axi_wdata[w_select_reg*DATA_WIDTH +: DATA_WIDTH];\n        wire [STRB_WIDTH-1:0]  s_axi_wstrb_mux   = int_s_axi_wstrb[w_select_reg*STRB_WIDTH +: STRB_WIDTH];\n        wire                   s_axi_wlast_mux   = int_s_axi_wlast[w_select_reg];\n        wire [WUSER_WIDTH-1:0] s_axi_wuser_mux   = int_s_axi_wuser[w_select_reg*WUSER_WIDTH +: WUSER_WIDTH];\n        wire                   s_axi_wvalid_mux  = int_axi_wvalid[w_select_reg*M_COUNT+n] && w_select_valid_reg;\n        wire                   s_axi_wready_mux;\n\n        assign int_axi_wready[n*S_COUNT +: S_COUNT] = (w_select_valid_reg && s_axi_wready_mux) << w_select_reg;\n\n        // write data routing\n        always @* begin\n            w_select_next = w_select_reg;\n            w_select_valid_next = w_select_valid_reg && !(s_axi_wvalid_mux && s_axi_wready_mux && s_axi_wlast_mux);\n            w_select_new_next = w_select_new_reg || !a_grant_valid || a_acknowledge;\n\n            if (a_grant_valid && !w_select_valid_reg && w_select_new_reg) begin\n                w_select_next = a_grant_encoded;\n                w_select_valid_next = a_grant_valid;\n                w_select_new_next = 1'b0;\n            end\n        end\n\n        always @(posedge clk) begin\n            if (rst) begin\n                w_select_valid_reg <= 1'b0;\n                w_select_new_reg <= 1'b1;\n            end else begin\n                w_select_valid_reg <= w_select_valid_next;\n                w_select_new_reg <= w_select_new_next;\n            end\n\n            w_select_reg <= w_select_next;\n        end\n\n        // write response forwarding\n        wire [CL_S_COUNT-1:0] b_select = m_axi_bid[n*M_ID_WIDTH +: M_ID_WIDTH] >> S_ID_WIDTH;\n\n        assign int_axi_bvalid[n*S_COUNT +: S_COUNT] = int_m_axi_bvalid[n] << b_select;\n        assign int_m_axi_bready[n] = int_axi_bready[b_select*M_COUNT+n];\n\n        assign trans_complete = int_m_axi_bvalid[n] && int_m_axi_bready[n];\n\n        // M side register\n        axi_register_wr #(\n            .DATA_WIDTH(DATA_WIDTH),\n            .ADDR_WIDTH(ADDR_WIDTH),\n            .STRB_WIDTH(STRB_WIDTH),\n            .ID_WIDTH(M_ID_WIDTH),\n            .AWUSER_ENABLE(AWUSER_ENABLE),\n            .AWUSER_WIDTH(AWUSER_WIDTH),\n            .WUSER_ENABLE(WUSER_ENABLE),\n            .WUSER_WIDTH(WUSER_WIDTH),\n            .BUSER_ENABLE(BUSER_ENABLE),\n            .BUSER_WIDTH(BUSER_WIDTH),\n            .AW_REG_TYPE(M_AW_REG_TYPE[n*2 +: 2]),\n            .W_REG_TYPE(M_W_REG_TYPE[n*2 +: 2]),\n            .B_REG_TYPE(M_B_REG_TYPE[n*2 +: 2])\n        )\n        reg_inst (\n            .clk(clk),\n            .rst(rst),\n            .s_axi_awid(s_axi_awid_mux),\n            .s_axi_awaddr(s_axi_awaddr_mux),\n            .s_axi_awlen(s_axi_awlen_mux),\n            .s_axi_awsize(s_axi_awsize_mux),\n            .s_axi_awburst(s_axi_awburst_mux),\n            .s_axi_awlock(s_axi_awlock_mux),\n            .s_axi_awcache(s_axi_awcache_mux),\n            .s_axi_awprot(s_axi_awprot_mux),\n            .s_axi_awqos(s_axi_awqos_mux),\n            .s_axi_awregion(s_axi_awregion_mux),\n            .s_axi_awuser(s_axi_awuser_mux),\n            .s_axi_awvalid(s_axi_awvalid_mux),\n            .s_axi_awready(s_axi_awready_mux),\n            .s_axi_wdata(s_axi_wdata_mux),\n            .s_axi_wstrb(s_axi_wstrb_mux),\n            .s_axi_wlast(s_axi_wlast_mux),\n            .s_axi_wuser(s_axi_wuser_mux),\n            .s_axi_wvalid(s_axi_wvalid_mux),\n            .s_axi_wready(s_axi_wready_mux),\n            .s_axi_bid(int_m_axi_bid[n*M_ID_WIDTH +: M_ID_WIDTH]),\n            .s_axi_bresp(int_m_axi_bresp[n*2 +: 2]),\n            .s_axi_buser(int_m_axi_buser[n*BUSER_WIDTH +: BUSER_WIDTH]),\n            .s_axi_bvalid(int_m_axi_bvalid[n]),\n            .s_axi_bready(int_m_axi_bready[n]),\n            .m_axi_awid(m_axi_awid[n*M_ID_WIDTH +: M_ID_WIDTH]),\n            .m_axi_awaddr(m_axi_awaddr[n*ADDR_WIDTH +: ADDR_WIDTH]),\n            .m_axi_awlen(m_axi_awlen[n*8 +: 8]),\n            .m_axi_awsize(m_axi_awsize[n*3 +: 3]),\n            .m_axi_awburst(m_axi_awburst[n*2 +: 2]),\n            .m_axi_awlock(m_axi_awlock[n]),\n            .m_axi_awcache(m_axi_awcache[n*4 +: 4]),\n            .m_axi_awprot(m_axi_awprot[n*3 +: 3]),\n            .m_axi_awqos(m_axi_awqos[n*4 +: 4]),\n            .m_axi_awregion(m_axi_awregion[n*4 +: 4]),\n            .m_axi_awuser(m_axi_awuser[n*AWUSER_WIDTH +: AWUSER_WIDTH]),\n            .m_axi_awvalid(m_axi_awvalid[n]),\n            .m_axi_awready(m_axi_awready[n]),\n            .m_axi_wdata(m_axi_wdata[n*DATA_WIDTH +: DATA_WIDTH]),\n            .m_axi_wstrb(m_axi_wstrb[n*STRB_WIDTH +: STRB_WIDTH]),\n            .m_axi_wlast(m_axi_wlast[n]),\n            .m_axi_wuser(m_axi_wuser[n*WUSER_WIDTH +: WUSER_WIDTH]),\n            .m_axi_wvalid(m_axi_wvalid[n]),\n            .m_axi_wready(m_axi_wready[n]),\n            .m_axi_bid(m_axi_bid[n*M_ID_WIDTH +: M_ID_WIDTH]),\n            .m_axi_bresp(m_axi_bresp[n*2 +: 2]),\n            .m_axi_buser(m_axi_buser[n*BUSER_WIDTH +: BUSER_WIDTH]),\n            .m_axi_bvalid(m_axi_bvalid[n]),\n            .m_axi_bready(m_axi_bready[n])\n        );\n    end // m_ifaces\n\nendgenerate\n\nendmodule\n\n`resetall\n","lang":"verilog"};
processSrcData(g_data);