var g_data = {"name":"axi_crossbar.v","src":"/*\n\nCopyright (c) 2018 Alex Forencich\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n*/\n\n// Language: Verilog 2001\n\n`resetall\n`timescale 1ns / 1ps\n`default_nettype none\n\n/*\n * AXI4 crossbar\n */\nmodule axi_crossbar #\n(\n    // Number of AXI inputs (slave interfaces)\n    parameter S_COUNT = 4,\n    // Number of AXI outputs (master interfaces)\n    parameter M_COUNT = 6,\n    // Width of data bus in bits\n    parameter DATA_WIDTH = 32,\n    // Width of address bus in bits\n    parameter ADDR_WIDTH = 22,\n    // Width of wstrb (width of data bus in words)\n    parameter STRB_WIDTH = (DATA_WIDTH/8),\n    // Input ID field width (from AXI masters)\n    parameter S_ID_WIDTH = 7,\n    // Output ID field width (towards AXI slaves)\n    // Additional bits required for response routing\n    parameter M_ID_WIDTH = S_ID_WIDTH+$clog2(S_COUNT),\n    // Propagate awuser signal\n    parameter AWUSER_ENABLE = 0,\n    // Width of awuser signal\n    parameter AWUSER_WIDTH = 1,\n    // Propagate wuser signal\n    parameter WUSER_ENABLE = 0,\n    // Width of wuser signal\n    parameter WUSER_WIDTH = 1,\n    // Propagate buser signal\n    parameter BUSER_ENABLE = 0,\n    // Width of buser signal\n    parameter BUSER_WIDTH = 1,\n    // Propagate aruser signal\n    parameter ARUSER_ENABLE = 0,\n    // Width of aruser signal\n    parameter ARUSER_WIDTH = 1,\n    // Propagate ruser signal\n    parameter RUSER_ENABLE = 0,\n    // Width of ruser signal\n    parameter RUSER_WIDTH = 1,\n    // Number of concurrent unique IDs for each slave interface\n    // S_COUNT concatenated fields of 32 bits\n    parameter S_THREADS = {S_COUNT{32'd2}},\n    // Number of concurrent operations for each slave interface\n    // S_COUNT concatenated fields of 32 bits\n    parameter S_ACCEPT = {S_COUNT{32'd16}},\n    // Number of regions per master interface\n    parameter M_REGIONS = 1,\n    // Master interface base addresses\n    // M_COUNT concatenated fields of M_REGIONS concatenated fields of ADDR_WIDTH bits\n    // set to zero for default addressing based on M_ADDR_WIDTH\n    parameter M_BASE_ADDR = 0,\n    // Master interface address widths\n    // M_COUNT concatenated fields of M_REGIONS concatenated fields of 32 bits\n    //parameter M_ADDR_WIDTH = {M_COUNT{{M_REGIONS{32'd12}}}},\n    parameter M_ADDR_WIDTH = {32'd13,32'd13,32'd20,32'd14,32'd13,32'd12},\n    // Read connections between interfaces\n    // M_COUNT concatenated fields of S_COUNT bits\n    parameter M_CONNECT_READ = {M_COUNT{{S_COUNT{1'b1}}}},\n    // Write connections between interfaces\n    // M_COUNT concatenated fields of S_COUNT bits\n    parameter M_CONNECT_WRITE = {M_COUNT{{S_COUNT{1'b1}}}},\n    // Number of concurrent operations for each master interface\n    // M_COUNT concatenated fields of 32 bits\n    parameter M_ISSUE = {M_COUNT{32'd4}},\n    // Secure master (fail operations based on awprot/arprot)\n    // M_COUNT bits\n    parameter M_SECURE = {M_COUNT{1'b0}},\n    // Slave interface AW channel register type (input)\n    // 0 to bypass, 1 for simple buffer, 2 for skid buffer\n    parameter S_AW_REG_TYPE = {S_COUNT{2'd0}},\n    // Slave interface W channel register type (input)\n    // 0 to bypass, 1 for simple buffer, 2 for skid buffer\n    parameter S_W_REG_TYPE = {S_COUNT{2'd0}},\n    // Slave interface B channel register type (output)\n    // 0 to bypass, 1 for simple buffer, 2 for skid buffer\n    parameter S_B_REG_TYPE = {S_COUNT{2'd1}},\n    // Slave interface AR channel register type (input)\n    // 0 to bypass, 1 for simple buffer, 2 for skid buffer\n    parameter S_AR_REG_TYPE = {S_COUNT{2'd0}},\n    // Slave interface R channel register type (output)\n    // 0 to bypass, 1 for simple buffer, 2 for skid buffer\n    parameter S_R_REG_TYPE = {S_COUNT{2'd2}},\n    // Master interface AW channel register type (output)\n    // 0 to bypass, 1 for simple buffer, 2 for skid buffer\n    parameter M_AW_REG_TYPE = {M_COUNT{2'd1}},\n    // Master interface W channel register type (output)\n    // 0 to bypass, 1 for simple buffer, 2 for skid buffer\n    parameter M_W_REG_TYPE = {M_COUNT{2'd2}},\n    // Master interface B channel register type (input)\n    // 0 to bypass, 1 for simple buffer, 2 for skid buffer\n    parameter M_B_REG_TYPE = {M_COUNT{2'd0}},\n    // Master interface AR channel register type (output)\n    // 0 to bypass, 1 for simple buffer, 2 for skid buffer\n    parameter M_AR_REG_TYPE = {M_COUNT{2'd1}},\n    // Master interface R channel register type (input)\n    // 0 to bypass, 1 for simple buffer, 2 for skid buffer\n    parameter M_R_REG_TYPE = {M_COUNT{2'd0}}\n)\n(\n    input  wire                             clk,\n    input  wire                             rst,\n\n    /*\n     * AXI slave interfaces\n     */\n    input  wire [S_COUNT*S_ID_WIDTH-1:0]    s_axi_awid,\n    input  wire [S_COUNT*ADDR_WIDTH-1:0]    s_axi_awaddr,\n    input  wire [S_COUNT*8-1:0]             s_axi_awlen,\n    input  wire [S_COUNT*3-1:0]             s_axi_awsize,\n    input  wire [S_COUNT*2-1:0]             s_axi_awburst,\n    input  wire [S_COUNT-1:0]               s_axi_awlock,\n    input  wire [S_COUNT*4-1:0]             s_axi_awcache,\n    input  wire [S_COUNT*3-1:0]             s_axi_awprot,\n    input  wire [S_COUNT*4-1:0]             s_axi_awqos,\n    input  wire [S_COUNT*AWUSER_WIDTH-1:0]  s_axi_awuser,\n    input  wire [S_COUNT-1:0]               s_axi_awvalid,\n    output wire [S_COUNT-1:0]               s_axi_awready,\n    input  wire [S_COUNT*DATA_WIDTH-1:0]    s_axi_wdata,\n    input  wire [S_COUNT*STRB_WIDTH-1:0]    s_axi_wstrb,\n    input  wire [S_COUNT-1:0]               s_axi_wlast,\n    input  wire [S_COUNT*WUSER_WIDTH-1:0]   s_axi_wuser,\n    input  wire [S_COUNT-1:0]               s_axi_wvalid,\n    output wire [S_COUNT-1:0]               s_axi_wready,\n    output wire [S_COUNT*S_ID_WIDTH-1:0]    s_axi_bid,\n    output wire [S_COUNT*2-1:0]             s_axi_bresp,\n    output wire [S_COUNT*BUSER_WIDTH-1:0]   s_axi_buser,\n    output wire [S_COUNT-1:0]               s_axi_bvalid,\n    input  wire [S_COUNT-1:0]               s_axi_bready,\n    input  wire [S_COUNT*S_ID_WIDTH-1:0]    s_axi_arid,\n    input  wire [S_COUNT*ADDR_WIDTH-1:0]    s_axi_araddr,\n    input  wire [S_COUNT*8-1:0]             s_axi_arlen,\n    input  wire [S_COUNT*3-1:0]             s_axi_arsize,\n    input  wire [S_COUNT*2-1:0]             s_axi_arburst,\n    input  wire [S_COUNT-1:0]               s_axi_arlock,\n    input  wire [S_COUNT*4-1:0]             s_axi_arcache,\n    input  wire [S_COUNT*3-1:0]             s_axi_arprot,\n    input  wire [S_COUNT*4-1:0]             s_axi_arqos,\n    input  wire [S_COUNT*ARUSER_WIDTH-1:0]  s_axi_aruser,\n    input  wire [S_COUNT-1:0]               s_axi_arvalid,\n    output wire [S_COUNT-1:0]               s_axi_arready,\n    output wire [S_COUNT*S_ID_WIDTH-1:0]    s_axi_rid,\n    output wire [S_COUNT*DATA_WIDTH-1:0]    s_axi_rdata,\n    output wire [S_COUNT*2-1:0]             s_axi_rresp,\n    output wire [S_COUNT-1:0]               s_axi_rlast,\n    output wire [S_COUNT*RUSER_WIDTH-1:0]   s_axi_ruser,\n    output wire [S_COUNT-1:0]               s_axi_rvalid,\n    input  wire [S_COUNT-1:0]               s_axi_rready,\n\n    /*\n     * AXI master interfaces\n     */\n    output wire [M_COUNT*M_ID_WIDTH-1:0]    m_axi_awid,\n    output wire [M_COUNT*ADDR_WIDTH-1:0]    m_axi_awaddr,\n    output wire [M_COUNT*8-1:0]             m_axi_awlen,\n    output wire [M_COUNT*3-1:0]             m_axi_awsize,\n    output wire [M_COUNT*2-1:0]             m_axi_awburst,\n    output wire [M_COUNT-1:0]               m_axi_awlock,\n    output wire [M_COUNT*4-1:0]             m_axi_awcache,\n    output wire [M_COUNT*3-1:0]             m_axi_awprot,\n    output wire [M_COUNT*4-1:0]             m_axi_awqos,\n    output wire [M_COUNT*4-1:0]             m_axi_awregion,\n    output wire [M_COUNT*AWUSER_WIDTH-1:0]  m_axi_awuser,\n    output wire [M_COUNT-1:0]               m_axi_awvalid,\n    input  wire [M_COUNT-1:0]               m_axi_awready,\n    output wire [M_COUNT*DATA_WIDTH-1:0]    m_axi_wdata,\n    output wire [M_COUNT*STRB_WIDTH-1:0]    m_axi_wstrb,\n    output wire [M_COUNT-1:0]               m_axi_wlast,\n    output wire [M_COUNT*WUSER_WIDTH-1:0]   m_axi_wuser,\n    output wire [M_COUNT-1:0]               m_axi_wvalid,\n    input  wire [M_COUNT-1:0]               m_axi_wready,\n    input  wire [M_COUNT*M_ID_WIDTH-1:0]    m_axi_bid,\n    input  wire [M_COUNT*2-1:0]             m_axi_bresp,\n    input  wire [M_COUNT*BUSER_WIDTH-1:0]   m_axi_buser,\n    input  wire [M_COUNT-1:0]               m_axi_bvalid,\n    output wire [M_COUNT-1:0]               m_axi_bready,\n    output wire [M_COUNT*M_ID_WIDTH-1:0]    m_axi_arid,\n    output wire [M_COUNT*ADDR_WIDTH-1:0]    m_axi_araddr,\n    output wire [M_COUNT*8-1:0]             m_axi_arlen,\n    output wire [M_COUNT*3-1:0]             m_axi_arsize,\n    output wire [M_COUNT*2-1:0]             m_axi_arburst,\n    output wire [M_COUNT-1:0]               m_axi_arlock,\n    output wire [M_COUNT*4-1:0]             m_axi_arcache,\n    output wire [M_COUNT*3-1:0]             m_axi_arprot,\n    output wire [M_COUNT*4-1:0]             m_axi_arqos,\n    output wire [M_COUNT*4-1:0]             m_axi_arregion,\n    output wire [M_COUNT*ARUSER_WIDTH-1:0]  m_axi_aruser,\n    output wire [M_COUNT-1:0]               m_axi_arvalid,\n    input  wire [M_COUNT-1:0]               m_axi_arready,\n    input  wire [M_COUNT*M_ID_WIDTH-1:0]    m_axi_rid,\n    input  wire [M_COUNT*DATA_WIDTH-1:0]    m_axi_rdata,\n    input  wire [M_COUNT*2-1:0]             m_axi_rresp,\n    input  wire [M_COUNT-1:0]               m_axi_rlast,\n    input  wire [M_COUNT*RUSER_WIDTH-1:0]   m_axi_ruser,\n    input  wire [M_COUNT-1:0]               m_axi_rvalid,\n    output wire [M_COUNT-1:0]               m_axi_rready\n);\n\naxi_crossbar_wr #(\n    .S_COUNT(S_COUNT),\n    .M_COUNT(M_COUNT),\n    .DATA_WIDTH(DATA_WIDTH),\n    .ADDR_WIDTH(ADDR_WIDTH),\n    .STRB_WIDTH(STRB_WIDTH),\n    .S_ID_WIDTH(S_ID_WIDTH),\n    .M_ID_WIDTH(M_ID_WIDTH),\n    .AWUSER_ENABLE(AWUSER_ENABLE),\n    .AWUSER_WIDTH(AWUSER_WIDTH),\n    .WUSER_ENABLE(WUSER_ENABLE),\n    .WUSER_WIDTH(WUSER_WIDTH),\n    .BUSER_ENABLE(BUSER_ENABLE),\n    .BUSER_WIDTH(BUSER_WIDTH),\n    .S_THREADS(S_THREADS),\n    .S_ACCEPT(S_ACCEPT),\n    .M_REGIONS(M_REGIONS),\n    .M_BASE_ADDR(M_BASE_ADDR),\n    .M_ADDR_WIDTH(M_ADDR_WIDTH),\n    .M_CONNECT(M_CONNECT_WRITE),\n    .M_ISSUE(M_ISSUE),\n    .M_SECURE(M_SECURE),\n    .S_AW_REG_TYPE(S_AW_REG_TYPE),\n    .S_W_REG_TYPE (S_W_REG_TYPE),\n    .S_B_REG_TYPE (S_B_REG_TYPE)\n)\naxi_crossbar_wr_inst (\n    .clk(clk),\n    .rst(rst),\n\n    /*\n     * AXI slave interfaces\n     */\n    .s_axi_awid(s_axi_awid),\n    .s_axi_awaddr(s_axi_awaddr),\n    .s_axi_awlen(s_axi_awlen),\n    .s_axi_awsize(s_axi_awsize),\n    .s_axi_awburst(s_axi_awburst),\n    .s_axi_awlock(s_axi_awlock),\n    .s_axi_awcache(s_axi_awcache),\n    .s_axi_awprot(s_axi_awprot),\n    .s_axi_awqos(s_axi_awqos),\n    .s_axi_awuser(s_axi_awuser),\n    .s_axi_awvalid(s_axi_awvalid),\n    .s_axi_awready(s_axi_awready),\n    .s_axi_wdata(s_axi_wdata),\n    .s_axi_wstrb(s_axi_wstrb),\n    .s_axi_wlast(s_axi_wlast),\n    .s_axi_wuser(s_axi_wuser),\n    .s_axi_wvalid(s_axi_wvalid),\n    .s_axi_wready(s_axi_wready),\n    .s_axi_bid(s_axi_bid),\n    .s_axi_bresp(s_axi_bresp),\n    .s_axi_buser(s_axi_buser),\n    .s_axi_bvalid(s_axi_bvalid),\n    .s_axi_bready(s_axi_bready),\n\n    /*\n     * AXI master interfaces\n     */\n    .m_axi_awid(m_axi_awid),\n    .m_axi_awaddr(m_axi_awaddr),\n    .m_axi_awlen(m_axi_awlen),\n    .m_axi_awsize(m_axi_awsize),\n    .m_axi_awburst(m_axi_awburst),\n    .m_axi_awlock(m_axi_awlock),\n    .m_axi_awcache(m_axi_awcache),\n    .m_axi_awprot(m_axi_awprot),\n    .m_axi_awqos(m_axi_awqos),\n    .m_axi_awregion(m_axi_awregion),\n    .m_axi_awuser(m_axi_awuser),\n    .m_axi_awvalid(m_axi_awvalid),\n    .m_axi_awready(m_axi_awready),\n    .m_axi_wdata(m_axi_wdata),\n    .m_axi_wstrb(m_axi_wstrb),\n    .m_axi_wlast(m_axi_wlast),\n    .m_axi_wuser(m_axi_wuser),\n    .m_axi_wvalid(m_axi_wvalid),\n    .m_axi_wready(m_axi_wready),\n    .m_axi_bid(m_axi_bid),\n    .m_axi_bresp(m_axi_bresp),\n    .m_axi_buser(m_axi_buser),\n    .m_axi_bvalid(m_axi_bvalid),\n    .m_axi_bready(m_axi_bready)\n);\n\naxi_crossbar_rd #(\n    .S_COUNT(S_COUNT),\n    .M_COUNT(M_COUNT),\n    .DATA_WIDTH(DATA_WIDTH),\n    .ADDR_WIDTH(ADDR_WIDTH),\n    .STRB_WIDTH(STRB_WIDTH),\n    .S_ID_WIDTH(S_ID_WIDTH),\n    .M_ID_WIDTH(M_ID_WIDTH),\n    .ARUSER_ENABLE(ARUSER_ENABLE),\n    .ARUSER_WIDTH(ARUSER_WIDTH),\n    .RUSER_ENABLE(RUSER_ENABLE),\n    .RUSER_WIDTH(RUSER_WIDTH),\n    .S_THREADS(S_THREADS),\n    .S_ACCEPT(S_ACCEPT),\n    .M_REGIONS(M_REGIONS),\n    .M_BASE_ADDR(M_BASE_ADDR),\n    .M_ADDR_WIDTH(M_ADDR_WIDTH),\n    .M_CONNECT(M_CONNECT_READ),\n    .M_ISSUE(M_ISSUE),\n    .M_SECURE(M_SECURE),\n    .S_AR_REG_TYPE(S_AR_REG_TYPE),\n    .S_R_REG_TYPE (S_R_REG_TYPE)\n)\naxi_crossbar_rd_inst (\n    .clk(clk),\n    .rst(rst),\n\n    /*\n     * AXI slave interfaces\n     */\n    .s_axi_arid(s_axi_arid),\n    .s_axi_araddr(s_axi_araddr),\n    .s_axi_arlen(s_axi_arlen),\n    .s_axi_arsize(s_axi_arsize),\n    .s_axi_arburst(s_axi_arburst),\n    .s_axi_arlock(s_axi_arlock),\n    .s_axi_arcache(s_axi_arcache),\n    .s_axi_arprot(s_axi_arprot),\n    .s_axi_arqos(s_axi_arqos),\n    .s_axi_aruser(s_axi_aruser),\n    .s_axi_arvalid(s_axi_arvalid),\n    .s_axi_arready(s_axi_arready),\n    .s_axi_rid(s_axi_rid),\n    .s_axi_rdata(s_axi_rdata),\n    .s_axi_rresp(s_axi_rresp),\n    .s_axi_rlast(s_axi_rlast),\n    .s_axi_ruser(s_axi_ruser),\n    .s_axi_rvalid(s_axi_rvalid),\n    .s_axi_rready(s_axi_rready),\n\n    /*\n     * AXI master interfaces\n     */\n    .m_axi_arid(m_axi_arid),\n    .m_axi_araddr(m_axi_araddr),\n    .m_axi_arlen(m_axi_arlen),\n    .m_axi_arsize(m_axi_arsize),\n    .m_axi_arburst(m_axi_arburst),\n    .m_axi_arlock(m_axi_arlock),\n    .m_axi_arcache(m_axi_arcache),\n    .m_axi_arprot(m_axi_arprot),\n    .m_axi_arqos(m_axi_arqos),\n    .m_axi_arregion(m_axi_arregion),\n    .m_axi_aruser(m_axi_aruser),\n    .m_axi_arvalid(m_axi_arvalid),\n    .m_axi_arready(m_axi_arready),\n    .m_axi_rid(m_axi_rid),\n    .m_axi_rdata(m_axi_rdata),\n    .m_axi_rresp(m_axi_rresp),\n    .m_axi_rlast(m_axi_rlast),\n    .m_axi_ruser(m_axi_ruser),\n    .m_axi_rvalid(m_axi_rvalid),\n    .m_axi_rready(m_axi_rready)\n);\n\nendmodule\n\n`resetall\n","lang":"verilog"};
processSrcData(g_data);