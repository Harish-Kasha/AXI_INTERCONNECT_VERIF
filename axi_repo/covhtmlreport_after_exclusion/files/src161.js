var g_data = {"name":"axi_adapter_wr.v","src":"/*\n\nCopyright (c) 2018 Alex Forencich\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n*/\n\n// Language: Verilog 2001\n\n`resetall\n`timescale 1ns / 1ps\n`default_nettype none\n\n/*\n * AXI4 width adapter\n */\nmodule axi_adapter_wr #\n(\n    // Width of address bus in bits\n    parameter ADDR_WIDTH = 32,\n    // Width of input (slave) interface data bus in bits\n    parameter S_DATA_WIDTH = 32,\n    // Width of input (slave) interface wstrb (width of data bus in words)\n    parameter S_STRB_WIDTH = (S_DATA_WIDTH/8),\n    // Width of output (master) interface data bus in bits\n    parameter M_DATA_WIDTH = 32,\n    // Width of output (master) interface wstrb (width of data bus in words)\n    parameter M_STRB_WIDTH = (M_DATA_WIDTH/8),\n    // Width of ID signal\n    parameter ID_WIDTH = 8,\n    // Propagate awuser signal\n    parameter AWUSER_ENABLE = 0,\n    // Width of awuser signal\n    parameter AWUSER_WIDTH = 1,\n    // Propagate wuser signal\n    parameter WUSER_ENABLE = 0,\n    // Width of wuser signal\n    parameter WUSER_WIDTH = 1,\n    // Propagate buser signal\n    parameter BUSER_ENABLE = 0,\n    // Width of buser signal\n    parameter BUSER_WIDTH = 1,\n    // When adapting to a wider bus, re-pack full-width burst instead of passing through narrow burst if possible\n    parameter CONVERT_BURST = 1,\n    // When adapting to a wider bus, re-pack all bursts instead of passing through narrow burst if possible\n    parameter CONVERT_NARROW_BURST = 0,\n    // Forward ID through adapter\n    parameter FORWARD_ID = 0\n)\n(\n    input  wire                     clk,\n    input  wire                     rst,\n\n    /*\n     * AXI slave interface\n     */\n    input  wire [ID_WIDTH-1:0]      s_axi_awid,\n    input  wire [ADDR_WIDTH-1:0]    s_axi_awaddr,\n    input  wire [7:0]               s_axi_awlen,\n    input  wire [2:0]               s_axi_awsize,\n    input  wire [1:0]               s_axi_awburst,\n    input  wire                     s_axi_awlock,\n    input  wire [3:0]               s_axi_awcache,\n    input  wire [2:0]               s_axi_awprot,\n    input  wire [3:0]               s_axi_awqos,\n    input  wire [3:0]               s_axi_awregion,\n    input  wire [AWUSER_WIDTH-1:0]  s_axi_awuser,\n    input  wire                     s_axi_awvalid,\n    output wire                     s_axi_awready,\n    input  wire [S_DATA_WIDTH-1:0]  s_axi_wdata,\n    input  wire [S_STRB_WIDTH-1:0]  s_axi_wstrb,\n    input  wire                     s_axi_wlast,\n    input  wire [WUSER_WIDTH-1:0]   s_axi_wuser,\n    input  wire                     s_axi_wvalid,\n    output wire                     s_axi_wready,\n    output wire [ID_WIDTH-1:0]      s_axi_bid,\n    output wire [1:0]               s_axi_bresp,\n    output wire [BUSER_WIDTH-1:0]   s_axi_buser,\n    output wire                     s_axi_bvalid,\n    input  wire                     s_axi_bready,\n\n    /*\n     * AXI master interface\n     */\n    output wire [ID_WIDTH-1:0]      m_axi_awid,\n    output wire [ADDR_WIDTH-1:0]    m_axi_awaddr,\n    output wire [7:0]               m_axi_awlen,\n    output wire [2:0]               m_axi_awsize,\n    output wire [1:0]               m_axi_awburst,\n    output wire                     m_axi_awlock,\n    output wire [3:0]               m_axi_awcache,\n    output wire [2:0]               m_axi_awprot,\n    output wire [3:0]               m_axi_awqos,\n    output wire [3:0]               m_axi_awregion,\n    output wire [AWUSER_WIDTH-1:0]  m_axi_awuser,\n    output wire                     m_axi_awvalid,\n    input  wire                     m_axi_awready,\n    output wire [M_DATA_WIDTH-1:0]  m_axi_wdata,\n    output wire [M_STRB_WIDTH-1:0]  m_axi_wstrb,\n    output wire                     m_axi_wlast,\n    output wire [WUSER_WIDTH-1:0]   m_axi_wuser,\n    output wire                     m_axi_wvalid,\n    input  wire                     m_axi_wready,\n    input  wire [ID_WIDTH-1:0]      m_axi_bid,\n    input  wire [1:0]               m_axi_bresp,\n    input  wire [BUSER_WIDTH-1:0]   m_axi_buser,\n    input  wire                     m_axi_bvalid,\n    output wire                     m_axi_bready\n);\n\nparameter S_ADDR_BIT_OFFSET = $clog2(S_STRB_WIDTH);\nparameter M_ADDR_BIT_OFFSET = $clog2(M_STRB_WIDTH);\nparameter S_WORD_WIDTH = S_STRB_WIDTH;\nparameter M_WORD_WIDTH = M_STRB_WIDTH;\nparameter S_WORD_SIZE = S_DATA_WIDTH/S_WORD_WIDTH;\nparameter M_WORD_SIZE = M_DATA_WIDTH/M_WORD_WIDTH;\nparameter S_BURST_SIZE = $clog2(S_STRB_WIDTH);\nparameter M_BURST_SIZE = $clog2(M_STRB_WIDTH);\n\n// output bus is wider\nparameter EXPAND = M_STRB_WIDTH > S_STRB_WIDTH;\nparameter DATA_WIDTH = EXPAND ? M_DATA_WIDTH : S_DATA_WIDTH;\nparameter STRB_WIDTH = EXPAND ? M_STRB_WIDTH : S_STRB_WIDTH;\n// required number of segments in wider bus\nparameter SEGMENT_COUNT = EXPAND ? (M_STRB_WIDTH / S_STRB_WIDTH) : (S_STRB_WIDTH / M_STRB_WIDTH);\n// data width and keep width per segment\nparameter SEGMENT_DATA_WIDTH = DATA_WIDTH / SEGMENT_COUNT;\nparameter SEGMENT_STRB_WIDTH = STRB_WIDTH / SEGMENT_COUNT;\n\n// bus width assertions\ninitial begin\n    if (S_WORD_SIZE * S_STRB_WIDTH != S_DATA_WIDTH) begin\n        $error(\"Error: AXI slave interface data width not evenly divisble (instance %m)\");\n        $finish;\n    end\n\n    if (M_WORD_SIZE * M_STRB_WIDTH != M_DATA_WIDTH) begin\n        $error(\"Error: AXI master interface data width not evenly divisble (instance %m)\");\n        $finish;\n    end\n\n    if (S_WORD_SIZE != M_WORD_SIZE) begin\n        $error(\"Error: word size mismatch (instance %m)\");\n        $finish;\n    end\n\n    if (2**$clog2(S_WORD_WIDTH) != S_WORD_WIDTH) begin\n        $error(\"Error: AXI slave interface word width must be even power of two (instance %m)\");\n        $finish;\n    end\n\n    if (2**$clog2(M_WORD_WIDTH) != M_WORD_WIDTH) begin\n        $error(\"Error: AXI master interface word width must be even power of two (instance %m)\");\n        $finish;\n    end\nend\n\nlocalparam [1:0]\n    STATE_IDLE = 2'd0,\n    STATE_DATA = 2'd1,\n    STATE_DATA_2 = 2'd2,\n    STATE_RESP = 2'd3;\n\nreg [1:0] state_reg = STATE_IDLE, state_next;\n\nreg [ID_WIDTH-1:0] id_reg = {ID_WIDTH{1'b0}}, id_next;\nreg [ADDR_WIDTH-1:0] addr_reg = {ADDR_WIDTH{1'b0}}, addr_next;\nreg [DATA_WIDTH-1:0] data_reg = {DATA_WIDTH{1'b0}}, data_next;\nreg [STRB_WIDTH-1:0] strb_reg = {STRB_WIDTH{1'b0}}, strb_next;\nreg [WUSER_WIDTH-1:0] wuser_reg = {WUSER_WIDTH{1'b0}}, wuser_next;\nreg [7:0] burst_reg = 8'd0, burst_next;\nreg [2:0] burst_size_reg = 3'd0, burst_size_next;\nreg [7:0] master_burst_reg = 8'd0, master_burst_next;\nreg [2:0] master_burst_size_reg = 3'd0, master_burst_size_next;\nreg burst_active_reg = 1'b0, burst_active_next;\nreg first_transfer_reg = 1'b0, first_transfer_next;\n\nreg s_axi_awready_reg = 1'b0, s_axi_awready_next;\nreg s_axi_wready_reg = 1'b0, s_axi_wready_next;\nreg [ID_WIDTH-1:0] s_axi_bid_reg = {ID_WIDTH{1'b0}}, s_axi_bid_next;\nreg [1:0] s_axi_bresp_reg = 2'd0, s_axi_bresp_next;\nreg [BUSER_WIDTH-1:0] s_axi_buser_reg = {BUSER_WIDTH{1'b0}}, s_axi_buser_next;\nreg s_axi_bvalid_reg = 1'b0, s_axi_bvalid_next;\n\nreg [ID_WIDTH-1:0] m_axi_awid_reg = {ID_WIDTH{1'b0}}, m_axi_awid_next;\nreg [ADDR_WIDTH-1:0] m_axi_awaddr_reg = {ADDR_WIDTH{1'b0}}, m_axi_awaddr_next;\nreg [7:0] m_axi_awlen_reg = 8'd0, m_axi_awlen_next;\nreg [2:0] m_axi_awsize_reg = 3'd0, m_axi_awsize_next;\nreg [1:0] m_axi_awburst_reg = 2'd0, m_axi_awburst_next;\nreg m_axi_awlock_reg = 1'b0, m_axi_awlock_next;\nreg [3:0] m_axi_awcache_reg = 4'd0, m_axi_awcache_next;\nreg [2:0] m_axi_awprot_reg = 3'd0, m_axi_awprot_next;\nreg [3:0] m_axi_awqos_reg = 4'd0, m_axi_awqos_next;\nreg [3:0] m_axi_awregion_reg = 4'd0, m_axi_awregion_next;\nreg [AWUSER_WIDTH-1:0] m_axi_awuser_reg = {AWUSER_WIDTH{1'b0}}, m_axi_awuser_next;\nreg m_axi_awvalid_reg = 1'b0, m_axi_awvalid_next;\nreg m_axi_bready_reg = 1'b0, m_axi_bready_next;\n\n// internal datapath\nreg  [M_DATA_WIDTH-1:0] m_axi_wdata_int;\nreg  [M_STRB_WIDTH-1:0] m_axi_wstrb_int;\nreg                     m_axi_wlast_int;\nreg  [WUSER_WIDTH-1:0]  m_axi_wuser_int;\nreg                     m_axi_wvalid_int;\nreg                     m_axi_wready_int_reg = 1'b0;\nwire                    m_axi_wready_int_early;\n\nassign s_axi_awready = s_axi_awready_reg;\nassign s_axi_wready = s_axi_wready_reg;\nassign s_axi_bid = s_axi_bid_reg;\nassign s_axi_bresp = s_axi_bresp_reg;\nassign s_axi_buser = BUSER_ENABLE ? s_axi_buser_reg : {BUSER_WIDTH{1'b0}};\nassign s_axi_bvalid = s_axi_bvalid_reg;\n\nassign m_axi_awid = FORWARD_ID ? m_axi_awid_reg : {ID_WIDTH{1'b0}};\nassign m_axi_awaddr = m_axi_awaddr_reg;\nassign m_axi_awlen = m_axi_awlen_reg;\nassign m_axi_awsize = m_axi_awsize_reg;\nassign m_axi_awburst = m_axi_awburst_reg;\nassign m_axi_awlock = m_axi_awlock_reg;\nassign m_axi_awcache = m_axi_awcache_reg;\nassign m_axi_awprot = m_axi_awprot_reg;\nassign m_axi_awqos = m_axi_awqos_reg;\nassign m_axi_awregion = m_axi_awregion_reg;\nassign m_axi_awuser = AWUSER_ENABLE ? m_axi_awuser_reg : {AWUSER_WIDTH{1'b0}};\nassign m_axi_awvalid = m_axi_awvalid_reg;\nassign m_axi_bready = m_axi_bready_reg;\n\ninteger i;\n\nalways @* begin\n    state_next = STATE_IDLE;\n\n    id_next = id_reg;\n    addr_next = addr_reg;\n    data_next = data_reg;\n    strb_next = strb_reg;\n    wuser_next = wuser_reg;\n    burst_next = burst_reg;\n    burst_size_next = burst_size_reg;\n    master_burst_next = master_burst_reg;\n    master_burst_size_next = master_burst_size_reg;\n    burst_active_next = burst_active_reg;\n    first_transfer_next = first_transfer_reg;\n\n    s_axi_awready_next = 1'b0;\n    s_axi_wready_next = 1'b0;\n    s_axi_bid_next = s_axi_bid_reg;\n    s_axi_bresp_next = s_axi_bresp_reg;\n    s_axi_buser_next = s_axi_buser_reg;\n    s_axi_bvalid_next = s_axi_bvalid_reg && !s_axi_bready;\n    m_axi_awid_next = m_axi_awid_reg;\n    m_axi_awaddr_next = m_axi_awaddr_reg;\n    m_axi_awlen_next = m_axi_awlen_reg;\n    m_axi_awsize_next = m_axi_awsize_reg;\n    m_axi_awburst_next = m_axi_awburst_reg;\n    m_axi_awlock_next = m_axi_awlock_reg;\n    m_axi_awcache_next = m_axi_awcache_reg;\n    m_axi_awprot_next = m_axi_awprot_reg;\n    m_axi_awqos_next = m_axi_awqos_reg;\n    m_axi_awregion_next = m_axi_awregion_reg;\n    m_axi_awuser_next = m_axi_awuser_reg;\n    m_axi_awvalid_next = m_axi_awvalid_reg && !m_axi_awready;\n    m_axi_bready_next = 1'b0;\n\n    if (SEGMENT_COUNT == 1) begin\n        // master output is same width; direct transfer with no splitting/merging\n        m_axi_wdata_int = s_axi_wdata;\n        m_axi_wstrb_int = s_axi_wstrb;\n        m_axi_wlast_int = s_axi_wlast;\n        m_axi_wuser_int = s_axi_wuser;\n        m_axi_wvalid_int = 1'b0;\n\n        case (state_reg)\n            STATE_IDLE: begin\n                // idle state; wait for new burst\n                s_axi_awready_next = !m_axi_awvalid;\n\n                if (s_axi_awready && s_axi_awvalid) begin\n                    s_axi_awready_next = 1'b0;\n                    id_next = s_axi_awid;\n                    m_axi_awid_next = s_axi_awid;\n                    m_axi_awaddr_next = s_axi_awaddr;\n                    m_axi_awlen_next = s_axi_awlen;\n                    m_axi_awsize_next = s_axi_awsize;\n                    m_axi_awburst_next = s_axi_awburst;\n                    m_axi_awlock_next = s_axi_awlock;\n                    m_axi_awcache_next = s_axi_awcache;\n                    m_axi_awprot_next = s_axi_awprot;\n                    m_axi_awqos_next = s_axi_awqos;\n                    m_axi_awregion_next = s_axi_awregion;\n                    m_axi_awuser_next = s_axi_awuser;\n                    m_axi_awvalid_next = 1'b1;\n                    s_axi_wready_next = m_axi_wready_int_early;\n                    state_next = STATE_DATA;\n                end else begin\n                    state_next = STATE_IDLE;\n                end\n            end\n            STATE_DATA: begin\n                // data state; transfer write data\n                s_axi_wready_next = m_axi_wready_int_early;\n\n                if (s_axi_wready && s_axi_wvalid) begin\n                    m_axi_wdata_int = s_axi_wdata;\n                    m_axi_wstrb_int = s_axi_wstrb;\n                    m_axi_wlast_int = s_axi_wlast;\n                    m_axi_wuser_int = s_axi_wuser;\n                    m_axi_wvalid_int = 1'b1;\n                    if (s_axi_wlast) begin\n                        // last data word, wait for response\n                        s_axi_wready_next = 1'b0;\n                        m_axi_bready_next = !s_axi_bvalid;\n                        state_next = STATE_RESP;\n                    end else begin\n                        state_next = STATE_DATA;\n                    end\n                end else begin\n                    state_next = STATE_DATA;\n                end\n            end\n            STATE_RESP: begin\n                // resp state; transfer write response\n                m_axi_bready_next = !s_axi_bvalid;\n\n                if (m_axi_bready && m_axi_bvalid) begin\n                    m_axi_bready_next = 1'b0;\n                    s_axi_bid_next = id_reg;\n                    s_axi_bresp_next = m_axi_bresp;\n                    s_axi_buser_next = m_axi_buser;\n                    s_axi_bvalid_next = 1'b1;\n                    s_axi_awready_next = !m_axi_awvalid;\n                    state_next = STATE_IDLE;\n                end else begin\n                    state_next = STATE_RESP;\n                end\n            end\n        endcase\n    end else if (EXPAND) begin\n        // master output is wider; merge writes\n        m_axi_wdata_int = {(M_WORD_WIDTH/S_WORD_WIDTH){s_axi_wdata}};\n        m_axi_wstrb_int = s_axi_wstrb;\n        m_axi_wlast_int = s_axi_wlast;\n        m_axi_wuser_int = s_axi_wuser;\n        m_axi_wvalid_int = 1'b0;\n\n        case (state_reg)\n            STATE_IDLE: begin\n                // idle state; wait for new burst\n                s_axi_awready_next = !m_axi_awvalid;\n\n                data_next = {DATA_WIDTH{1'b0}};\n                strb_next = {STRB_WIDTH{1'b0}};\n\n                if (s_axi_awready && s_axi_awvalid) begin\n                    s_axi_awready_next = 1'b0;\n                    id_next = s_axi_awid;\n                    m_axi_awid_next = s_axi_awid;\n                    m_axi_awaddr_next = s_axi_awaddr;\n                    addr_next = s_axi_awaddr;\n                    burst_next = s_axi_awlen;\n                    burst_size_next = s_axi_awsize;\n                    if (CONVERT_BURST && s_axi_awcache[1] && (CONVERT_NARROW_BURST || s_axi_awsize == S_BURST_SIZE)) begin\n                        // merge writes\n                        // require CONVERT_BURST and awcache[1] set\n                        master_burst_size_next = M_BURST_SIZE;\n                        if (CONVERT_NARROW_BURST) begin\n                            m_axi_awlen_next = (({{S_ADDR_BIT_OFFSET+1{1'b0}}, s_axi_awlen} << s_axi_awsize) + s_axi_awaddr[M_ADDR_BIT_OFFSET-1:0]) >> M_BURST_SIZE;\n                        end else begin\n                            m_axi_awlen_next = ({1'b0, s_axi_awlen} + s_axi_awaddr[M_ADDR_BIT_OFFSET-1:S_ADDR_BIT_OFFSET]) >> $clog2(SEGMENT_COUNT);\n                        end\n                        m_axi_awsize_next = M_BURST_SIZE;\n                        state_next = STATE_DATA_2;\n                    end else begin\n                        // output narrow burst\n                        master_burst_size_next = s_axi_awsize;\n                        m_axi_awlen_next = s_axi_awlen;\n                        m_axi_awsize_next = s_axi_awsize;\n                        state_next = STATE_DATA;\n                    end\n                    m_axi_awburst_next = s_axi_awburst;\n                    m_axi_awlock_next = s_axi_awlock;\n                    m_axi_awcache_next = s_axi_awcache;\n                    m_axi_awprot_next = s_axi_awprot;\n                    m_axi_awqos_next = s_axi_awqos;\n                    m_axi_awregion_next = s_axi_awregion;\n                    m_axi_awuser_next = s_axi_awuser;\n                    m_axi_awvalid_next = 1'b1;\n                    s_axi_wready_next = m_axi_wready_int_early;\n                end else begin\n                    state_next = STATE_IDLE;\n                end\n            end\n            STATE_DATA: begin\n                // data state; transfer write data\n                s_axi_wready_next = m_axi_wready_int_early;\n\n                if (s_axi_wready && s_axi_wvalid) begin\n                    m_axi_wdata_int = {(M_WORD_WIDTH/S_WORD_WIDTH){s_axi_wdata}};\n                    m_axi_wstrb_int = s_axi_wstrb << (addr_reg[M_ADDR_BIT_OFFSET-1:S_ADDR_BIT_OFFSET] * S_STRB_WIDTH);\n                    m_axi_wlast_int = s_axi_wlast;\n                    m_axi_wuser_int = s_axi_wuser;\n                    m_axi_wvalid_int = 1'b1;\n                    addr_next = addr_reg + (1 << burst_size_reg);\n                    if (s_axi_wlast) begin\n                        s_axi_wready_next = 1'b0;\n                        m_axi_bready_next = !s_axi_bvalid;\n                        state_next = STATE_RESP;\n                    end else begin\n                        state_next = STATE_DATA;\n                    end\n                end else begin\n                    state_next = STATE_DATA;\n                end\n            end\n            STATE_DATA_2: begin\n                s_axi_wready_next = m_axi_wready_int_early;\n\n                if (s_axi_wready && s_axi_wvalid) begin\n                    if (CONVERT_NARROW_BURST) begin\n                        for (i = 0; i < S_WORD_WIDTH; i = i + 1) begin\n                            if (s_axi_wstrb[i]) begin\n                                data_next[addr_reg[M_ADDR_BIT_OFFSET-1:S_ADDR_BIT_OFFSET]*SEGMENT_DATA_WIDTH+i*M_WORD_SIZE +: M_WORD_SIZE] = s_axi_wdata[i*M_WORD_SIZE +: M_WORD_SIZE];\n                                strb_next[addr_reg[M_ADDR_BIT_OFFSET-1:S_ADDR_BIT_OFFSET]*SEGMENT_STRB_WIDTH+i] = 1'b1;\n                            end\n                        end\n                    end else begin\n                        data_next[addr_reg[M_ADDR_BIT_OFFSET-1:S_ADDR_BIT_OFFSET]*SEGMENT_DATA_WIDTH +: SEGMENT_DATA_WIDTH] = s_axi_wdata;\n                        strb_next[addr_reg[M_ADDR_BIT_OFFSET-1:S_ADDR_BIT_OFFSET]*SEGMENT_STRB_WIDTH +: SEGMENT_STRB_WIDTH] = s_axi_wstrb;\n                    end\n                    m_axi_wdata_int = data_next;\n                    m_axi_wstrb_int = strb_next;\n                    m_axi_wlast_int = s_axi_wlast;\n                    m_axi_wuser_int = s_axi_wuser;\n                    burst_next = burst_reg - 1;\n                    addr_next = addr_reg + (1 << burst_size_reg);\n                    if (addr_next[master_burst_size_reg] != addr_reg[master_burst_size_reg]) begin\n                        data_next = {DATA_WIDTH{1'b0}};\n                        strb_next = {STRB_WIDTH{1'b0}};\n                        m_axi_wvalid_int = 1'b1;\n                    end\n                    if (burst_reg == 0) begin\n                        m_axi_wvalid_int = 1'b1;\n                        s_axi_wready_next = 1'b0;\n                        m_axi_bready_next = !s_axi_bvalid;\n                        state_next = STATE_RESP;\n                    end else begin\n                        state_next = STATE_DATA_2;\n                    end\n                end else begin\n                    state_next = STATE_DATA_2;\n                end\n            end\n            STATE_RESP: begin\n                // resp state; transfer write response\n                m_axi_bready_next = !s_axi_bvalid;\n\n                if (m_axi_bready && m_axi_bvalid) begin\n                    m_axi_bready_next = 1'b0;\n                    s_axi_bid_next = id_reg;\n                    s_axi_bresp_next = m_axi_bresp;\n                    s_axi_buser_next = m_axi_buser;\n                    s_axi_bvalid_next = 1'b1;\n                    s_axi_awready_next = !m_axi_awvalid;\n                    state_next = STATE_IDLE;\n                end else begin\n                    state_next = STATE_RESP;\n                end\n            end\n        endcase\n    end else begin\n        // master output is narrower; split writes, and possibly split burst\n        m_axi_wdata_int = data_reg;\n        m_axi_wstrb_int = strb_reg;\n        m_axi_wlast_int = 1'b0;\n        m_axi_wuser_int = wuser_reg;\n        m_axi_wvalid_int = 1'b0;\n\n        case (state_reg)\n            STATE_IDLE: begin\n                // idle state; wait for new burst\n                s_axi_awready_next = !m_axi_awvalid;\n\n                first_transfer_next = 1'b1;\n\n                if (s_axi_awready && s_axi_awvalid) begin\n                    s_axi_awready_next = 1'b0;\n                    id_next = s_axi_awid;\n                    m_axi_awid_next = s_axi_awid;\n                    m_axi_awaddr_next = s_axi_awaddr;\n                    addr_next = s_axi_awaddr;\n                    burst_next = s_axi_awlen;\n                    burst_size_next = s_axi_awsize;\n                    burst_active_next = 1'b1;\n                    if (s_axi_awsize > M_BURST_SIZE) begin\n                        // need to adjust burst size\n                        if (s_axi_awlen >> (8+M_BURST_SIZE-s_axi_awsize) != 0) begin\n                            // limit burst length to max\n                            master_burst_next = (8'd255 << (s_axi_awsize-M_BURST_SIZE)) | ((~s_axi_awaddr & (8'hff >> (8-s_axi_awsize))) >> M_BURST_SIZE);\n                        end else begin\n                            master_burst_next = (s_axi_awlen << (s_axi_awsize-M_BURST_SIZE)) | ((~s_axi_awaddr & (8'hff >> (8-s_axi_awsize))) >> M_BURST_SIZE);\n                        end\n                        master_burst_size_next = M_BURST_SIZE;\n                        m_axi_awlen_next = master_burst_next;\n                        m_axi_awsize_next = master_burst_size_next;\n                    end else begin\n                        // pass through narrow (enough) burst\n                        master_burst_next = s_axi_awlen;\n                        master_burst_size_next = s_axi_awsize;\n                        m_axi_awlen_next = s_axi_awlen;\n                        m_axi_awsize_next = s_axi_awsize;\n                    end\n                    m_axi_awburst_next = s_axi_awburst;\n                    m_axi_awlock_next = s_axi_awlock;\n                    m_axi_awcache_next = s_axi_awcache;\n                    m_axi_awprot_next = s_axi_awprot;\n                    m_axi_awqos_next = s_axi_awqos;\n                    m_axi_awregion_next = s_axi_awregion;\n                    m_axi_awuser_next = s_axi_awuser;\n                    m_axi_awvalid_next = 1'b1;\n                    s_axi_wready_next = m_axi_wready_int_early;\n                    state_next = STATE_DATA;\n                end else begin\n                    state_next = STATE_IDLE;\n                end\n            end\n            STATE_DATA: begin\n                s_axi_wready_next = m_axi_wready_int_early;\n\n                if (s_axi_wready && s_axi_wvalid) begin\n                    data_next = s_axi_wdata;\n                    strb_next = s_axi_wstrb;\n                    wuser_next = s_axi_wuser;\n                    m_axi_wdata_int = s_axi_wdata >> (addr_reg[S_ADDR_BIT_OFFSET-1:M_ADDR_BIT_OFFSET] * M_DATA_WIDTH);\n                    m_axi_wstrb_int = s_axi_wstrb >> (addr_reg[S_ADDR_BIT_OFFSET-1:M_ADDR_BIT_OFFSET] * M_STRB_WIDTH);\n                    m_axi_wlast_int = 1'b0;\n                    m_axi_wuser_int = s_axi_wuser;\n                    m_axi_wvalid_int = 1'b1;\n                    burst_next = burst_reg - 1;\n                    burst_active_next = burst_reg != 0;\n                    master_burst_next = master_burst_reg - 1;\n                    addr_next = (addr_reg + (1 << master_burst_size_reg)) & ({ADDR_WIDTH{1'b1}} << master_burst_size_reg);\n                    if (master_burst_reg == 0) begin\n                        s_axi_wready_next = 1'b0;\n                        m_axi_bready_next = !s_axi_bvalid && !s_axi_awvalid;\n                        m_axi_wlast_int = 1'b1;\n                        state_next = STATE_RESP;\n                    end else if (addr_next[burst_size_reg] != addr_reg[burst_size_reg]) begin\n                        state_next = STATE_DATA;\n                    end else begin\n                        s_axi_wready_next = 1'b0;\n                        state_next = STATE_DATA_2;\n                    end\n                end else begin\n                    state_next = STATE_DATA;\n                end\n            end\n            STATE_DATA_2: begin\n                s_axi_wready_next = 1'b0;\n\n                if (m_axi_wready_int_reg) begin\n                    m_axi_wdata_int = data_reg >> (addr_reg[S_ADDR_BIT_OFFSET-1:M_ADDR_BIT_OFFSET] * M_DATA_WIDTH);\n                    m_axi_wstrb_int = strb_reg >> (addr_reg[S_ADDR_BIT_OFFSET-1:M_ADDR_BIT_OFFSET] * M_STRB_WIDTH);\n                    m_axi_wlast_int = 1'b0;\n                    m_axi_wuser_int = wuser_reg;\n                    m_axi_wvalid_int = 1'b1;\n                    master_burst_next = master_burst_reg - 1;\n                    addr_next = (addr_reg + (1 << master_burst_size_reg)) & ({ADDR_WIDTH{1'b1}} << master_burst_size_reg);\n                    if (master_burst_reg == 0) begin\n                        // burst on master interface finished; transfer response\n                        s_axi_wready_next = 1'b0;\n                        m_axi_bready_next = !s_axi_bvalid && !m_axi_awvalid;\n                        m_axi_wlast_int = 1'b1;\n                        state_next = STATE_RESP;\n                    end else if (addr_next[burst_size_reg] != addr_reg[burst_size_reg]) begin\n                        state_next = STATE_DATA;\n                    end else begin\n                        s_axi_wready_next = 1'b0;\n                        state_next = STATE_DATA_2;\n                    end\n                end else begin\n                    state_next = STATE_DATA_2;\n                end\n            end\n            STATE_RESP: begin\n                // resp state; transfer write response\n                m_axi_bready_next = !s_axi_bvalid && !m_axi_awvalid;\n\n                if (m_axi_bready && m_axi_bvalid) begin\n                    first_transfer_next = 1'b0;\n                    m_axi_bready_next = 1'b0;\n                    s_axi_bid_next = id_reg;\n                    if (first_transfer_reg || m_axi_bresp != 0) begin\n                        s_axi_bresp_next = m_axi_bresp;\n                    end\n\n                    if (burst_reg >> (8+M_BURST_SIZE-burst_size_reg) != 0) begin\n                        // limit burst length to max\n                        master_burst_next = 8'd255;\n                    end else begin\n                        master_burst_next = (burst_reg << (burst_size_reg-M_BURST_SIZE)) | (8'hff >> (8-burst_size_reg) >> M_BURST_SIZE);\n                    end\n                    master_burst_size_next = M_BURST_SIZE;\n                    m_axi_awaddr_next = addr_reg;\n                    m_axi_awlen_next = master_burst_next;\n                    m_axi_awsize_next = master_burst_size_next;\n                    if (burst_active_reg) begin\n                        // burst on slave interface still active; start new burst\n                        m_axi_awvalid_next = 1'b1;\n                        state_next = STATE_DATA;\n                    end else begin\n                        // burst on slave interface finished; return to idle\n                        s_axi_bvalid_next = 1'b1;\n                        s_axi_awready_next = !m_axi_awvalid;\n                        state_next = STATE_IDLE;\n                    end\n                end else begin\n                    state_next = STATE_RESP;\n                end\n            end\n        endcase\n    end\nend\n\nalways @(posedge clk) begin\n    state_reg <= state_next;\n\n    id_reg <= id_next;\n    addr_reg <= addr_next;\n    data_reg <= data_next;\n    strb_reg <= strb_next;\n    wuser_reg <= wuser_next;\n    burst_reg <= burst_next;\n    burst_size_reg <= burst_size_next;\n    master_burst_reg <= master_burst_next;\n    master_burst_size_reg <= master_burst_size_next;\n    burst_active_reg <= burst_active_next;\n    first_transfer_reg <= first_transfer_next;\n\n    s_axi_awready_reg <= s_axi_awready_next;\n    s_axi_wready_reg <= s_axi_wready_next;\n    s_axi_bid_reg <= s_axi_bid_next;\n    s_axi_bresp_reg <= s_axi_bresp_next;\n    s_axi_buser_reg <= s_axi_buser_next;\n    s_axi_bvalid_reg <= s_axi_bvalid_next;\n\n    m_axi_awid_reg <= m_axi_awid_next;\n    m_axi_awaddr_reg <= m_axi_awaddr_next;\n    m_axi_awlen_reg <= m_axi_awlen_next;\n    m_axi_awsize_reg <= m_axi_awsize_next;\n    m_axi_awburst_reg <= m_axi_awburst_next;\n    m_axi_awlock_reg <= m_axi_awlock_next;\n    m_axi_awcache_reg <= m_axi_awcache_next;\n    m_axi_awprot_reg <= m_axi_awprot_next;\n    m_axi_awqos_reg <= m_axi_awqos_next;\n    m_axi_awregion_reg <= m_axi_awregion_next;\n    m_axi_awuser_reg <= m_axi_awuser_next;\n    m_axi_awvalid_reg <= m_axi_awvalid_next;\n    m_axi_bready_reg <= m_axi_bready_next;\n\n    if (rst) begin\n        state_reg <= STATE_IDLE;\n\n        s_axi_awready_reg <= 1'b0;\n        s_axi_wready_reg <= 1'b0;\n        s_axi_bvalid_reg <= 1'b0;\n\n        m_axi_awvalid_reg <= 1'b0;\n        m_axi_bready_reg <= 1'b0;\n    end\nend\n\n// output datapath logic\nreg [M_DATA_WIDTH-1:0] m_axi_wdata_reg  = {M_DATA_WIDTH{1'b0}};\nreg [M_STRB_WIDTH-1:0] m_axi_wstrb_reg  = {M_STRB_WIDTH{1'b0}};\nreg                    m_axi_wlast_reg  = 1'b0;\nreg [WUSER_WIDTH-1:0]  m_axi_wuser_reg  = 1'b0;\nreg                    m_axi_wvalid_reg = 1'b0, m_axi_wvalid_next;\n\nreg [M_DATA_WIDTH-1:0] temp_m_axi_wdata_reg  = {M_DATA_WIDTH{1'b0}};\nreg [M_STRB_WIDTH-1:0] temp_m_axi_wstrb_reg  = {M_STRB_WIDTH{1'b0}};\nreg                    temp_m_axi_wlast_reg  = 1'b0;\nreg [WUSER_WIDTH-1:0]  temp_m_axi_wuser_reg  = 1'b0;\nreg                    temp_m_axi_wvalid_reg = 1'b0, temp_m_axi_wvalid_next;\n\n// datapath control\nreg store_axi_w_int_to_output;\nreg store_axi_w_int_to_temp;\nreg store_axi_w_temp_to_output;\n\nassign m_axi_wdata  = m_axi_wdata_reg;\nassign m_axi_wstrb  = m_axi_wstrb_reg;\nassign m_axi_wlast  = m_axi_wlast_reg;\nassign m_axi_wuser  = WUSER_ENABLE ? m_axi_wuser_reg : {WUSER_WIDTH{1'b0}};\nassign m_axi_wvalid = m_axi_wvalid_reg;\n\n// enable ready input next cycle if output is ready or the temp reg will not be filled on the next cycle (output reg empty or no input)\nassign m_axi_wready_int_early = m_axi_wready | (~temp_m_axi_wvalid_reg & (~m_axi_wvalid_reg | ~m_axi_wvalid_int));\n\nalways @* begin\n    // transfer sink ready state to source\n    m_axi_wvalid_next = m_axi_wvalid_reg;\n    temp_m_axi_wvalid_next = temp_m_axi_wvalid_reg;\n\n    store_axi_w_int_to_output = 1'b0;\n    store_axi_w_int_to_temp = 1'b0;\n    store_axi_w_temp_to_output = 1'b0;\n\n    if (m_axi_wready_int_reg) begin\n        // input is ready\n        if (m_axi_wready | ~m_axi_wvalid_reg) begin\n            // output is ready or currently not valid, transfer data to output\n            m_axi_wvalid_next = m_axi_wvalid_int;\n            store_axi_w_int_to_output = 1'b1;\n        end else begin\n            // output is not ready, store input in temp\n            temp_m_axi_wvalid_next = m_axi_wvalid_int;\n            store_axi_w_int_to_temp = 1'b1;\n        end\n    end else if (m_axi_wready) begin\n        // input is not ready, but output is ready\n        m_axi_wvalid_next = temp_m_axi_wvalid_reg;\n        temp_m_axi_wvalid_next = 1'b0;\n        store_axi_w_temp_to_output = 1'b1;\n    end\nend\n\nalways @(posedge clk) begin\n    if (rst) begin\n        m_axi_wvalid_reg <= 1'b0;\n        m_axi_wready_int_reg <= 1'b0;\n        temp_m_axi_wvalid_reg <= 1'b0;\n    end else begin\n        m_axi_wvalid_reg <= m_axi_wvalid_next;\n        m_axi_wready_int_reg <= m_axi_wready_int_early;\n        temp_m_axi_wvalid_reg <= temp_m_axi_wvalid_next;\n    end\n\n    // datapath\n    if (store_axi_w_int_to_output) begin\n        m_axi_wdata_reg <= m_axi_wdata_int;\n        m_axi_wstrb_reg <= m_axi_wstrb_int;\n        m_axi_wlast_reg <= m_axi_wlast_int;\n        m_axi_wuser_reg <= m_axi_wuser_int;\n    end else if (store_axi_w_temp_to_output) begin\n        m_axi_wdata_reg <= temp_m_axi_wdata_reg;\n        m_axi_wstrb_reg <= temp_m_axi_wstrb_reg;\n        m_axi_wlast_reg <= temp_m_axi_wlast_reg;\n        m_axi_wuser_reg <= temp_m_axi_wuser_reg;\n    end\n\n    if (store_axi_w_int_to_temp) begin\n        temp_m_axi_wdata_reg <= m_axi_wdata_int;\n        temp_m_axi_wstrb_reg <= m_axi_wstrb_int;\n        temp_m_axi_wlast_reg <= m_axi_wlast_int;\n        temp_m_axi_wuser_reg <= m_axi_wuser_int;\n    end\nend\n\nendmodule\n\n`resetall\n","lang":"verilog"};
processSrcData(g_data);