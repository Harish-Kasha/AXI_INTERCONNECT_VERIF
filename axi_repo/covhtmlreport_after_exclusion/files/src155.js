var g_data = {"name":"axi_interconnect_wrapper.sv","src":"\nimport axi_interconnect_pkg::*;\n\n\nmodule axi_interconnect_wrapper #(\n	      parameter S_COUNT =4,\n	      parameter M_COUNT =6,\n	      parameter  int M_R_D_WIDTH[6]={32'd16,32'd8,32'd32,32'd64,32'd32,32'd32},\n              parameter  int M_W_D_WIDTH[6] = '{32'd32, 32'd64, 32'd32, 32'd64, 32'd32, 32'd32},\n              parameter  int M_A_WIDTH[6] = '{32'd12, 32'd13, 32'd14, 32'd20, 32'd13, 32'd13},\n              parameter  int S_R_D_WIDTH[4] = '{32'd16, 32'd32, 32'd32, 32'd32},\n              parameter  int S_W_D_WIDTH[4] = '{32'd32, 32'd16, 32'd32, 32'd32},\n              parameter int S_STRB_WIDTH[4] = '{4, 2, 4, 4},\n              parameter int M_STRB_WIDTH[6] = '{4, 8, 4, 8, 4, 4},\n\n              parameter  int S_ID_WIDTH[4] = '{32'd6, 32'd8, 32'd10, 32'd12},\n\n	      parameter S_A_WIDTH=21,\n	      parameter M_ID_WIDTH=14,\n	      parameter CROSSBAR_D_WIDTH=32,\n	      parameter CROSSBAR_STRB_WIDTH=CROSSBAR_D_WIDTH/8,\n	      parameter CROSSBAR_ACCEPT_LIMIT=4,\n	      parameter CROSSBAR_ISSUSE_LIMIT=4,\n	      parameter AW_USER_ENABLE=0,\n	      parameter AWUSER_WIDTH = 1,\n	      parameter WUSER_ENABLE = 0,\n              parameter WUSER_WIDTH = 1,\n              parameter BUSER_ENABLE = 0,\n              parameter BUSER_WIDTH = 1,\n              parameter ARUSER_ENABLE = 0,\n              parameter ARUSER_WIDTH = 1,\n              parameter RUSER_ENABLE = 0,\n              parameter RUSER_WIDTH = 1,\nparameter SUM_S_ID_WIDTH =36, \nparameter SUM_M_R_D_WIDTH=184, \nparameter SUM_M_W_D_WIDTH=256, \nparameter SUM_M_A_WIDTH=85, \nparameter SUM_S_R_D_WIDTH=112, \nparameter SUM_S_W_D_WIDTH=112, \nparameter SUM_S_STRB_WIDTH=14,\nparameter SUM_M_STRB_WIDTH=24, \nparameter SUM_CROSSBAR_STRB_WIDTH=24, \nparameter MAX_S_ID_WIDTH=12,\nparameter COUPLER_REG_INSTANCE=0,\nparameter MAX_M_A_WIDTH=20,\nparameter MAX_M_WD_WIDTH=128,\nparameter MAX_M_RD_WIDTH=64, // update  this it is important to update\nparameter MAX_S_RD_WIDTH=32, // update  this it is important to update\nparameter MAX_M_STRB_WIDTH=16\n    // Forward ID through adapter\n	      \n             ) \n       \n   (\n	\n    input  wire                            clk,\n    input  wire                            rst,\n    input  wire [SUM_S_ID_WIDTH-1:0]     s_axi_awid,\n    input  wire [S_COUNT*S_A_WIDTH-1:0]   s_axi_awaddr,\n    input  wire [S_COUNT*8-1:0]            s_axi_awlen,\n    input  wire [S_COUNT*3-1:0]            s_axi_awsize,\n    input  wire [S_COUNT*2-1:0]            s_axi_awburst,\n    input  wire [S_COUNT-1:0]              s_axi_awlock,\n    input  wire [S_COUNT*4-1:0]            s_axi_awcache,\n    input  wire [S_COUNT*3-1:0]            s_axi_awprot,\n    input  wire [S_COUNT*4-1:0]            s_axi_awqos,\n    input  wire [S_COUNT*AWUSER_WIDTH-1:0] s_axi_awuser,\n    input  wire [S_COUNT-1:0]              s_axi_awvalid,\n    output wire [S_COUNT-1:0]              s_axi_awready,\n    input  wire [SUM_S_W_D_WIDTH-1:0]   s_axi_wdata,\n    input  wire [SUM_S_STRB_WIDTH-1:0]   s_axi_wstrb,\n    input  wire [S_COUNT-1:0]              s_axi_wlast,\n    input  wire [S_COUNT*WUSER_WIDTH-1:0]  s_axi_wuser,\n    input  wire [S_COUNT-1:0]              s_axi_wvalid,\n    output wire [S_COUNT-1:0]              s_axi_wready,\n    output reg [SUM_S_ID_WIDTH-1:0]     s_axi_bid,\n    output wire [S_COUNT*2-1:0]            s_axi_bresp,\n    output wire [S_COUNT*BUSER_WIDTH-1:0]  s_axi_buser,\n    output wire [S_COUNT-1:0]              s_axi_bvalid,\n    input  wire [S_COUNT-1:0]              s_axi_bready,\n    input  wire [SUM_S_ID_WIDTH-1:0]     s_axi_arid,\n    input  wire [S_COUNT*S_A_WIDTH-1:0]   s_axi_araddr,\n    input  wire [S_COUNT*8-1:0]            s_axi_arlen,\n    input  wire [S_COUNT*3-1:0]            s_axi_arsize,\n    input  wire [S_COUNT*2-1:0]            s_axi_arburst,\n    input  wire [S_COUNT-1:0]              s_axi_arlock,\n    input  wire [S_COUNT*4-1:0]            s_axi_arcache,\n    input  wire [S_COUNT*3-1:0]            s_axi_arprot,\n    input  wire [S_COUNT*4-1:0]            s_axi_arqos,\n    input  wire [S_COUNT*ARUSER_WIDTH-1:0] s_axi_aruser,\n    input  wire [S_COUNT-1:0]              s_axi_arvalid,\n    output wire [S_COUNT-1:0]              s_axi_arready,\n    output reg  [SUM_S_ID_WIDTH-1:0]     s_axi_rid,\n    output reg [SUM_S_R_D_WIDTH-1:0]   s_axi_rdata,\n    output wire [S_COUNT*2-1:0]            s_axi_rresp,\n    output wire [S_COUNT-1:0]              s_axi_rlast,\n    output wire [S_COUNT*RUSER_WIDTH-1:0]  s_axi_ruser,\n    output wire [S_COUNT-1:0]              s_axi_rvalid,\n    input  wire [S_COUNT-1:0]              s_axi_rready,\n\n    /*\n     * AXI master interfaces\n     */\n    output wire [M_COUNT*M_ID_WIDTH-1:0]     m_axi_awid,\n    output reg [SUM_M_A_WIDTH-1:0]   m_axi_awaddr,\n    output wire [M_COUNT*8-1:0]            m_axi_awlen,\n    output wire [M_COUNT*3-1:0]            m_axi_awsize,\n    output wire [M_COUNT*2-1:0]            m_axi_awburst,\n    output wire [M_COUNT-1:0]              m_axi_awlock,\n    output wire [M_COUNT*4-1:0]            m_axi_awcache,\n    output wire [M_COUNT*3-1:0]            m_axi_awprot,\n    output wire [M_COUNT*4-1:0]            m_axi_awqos,\n    output wire [M_COUNT*4-1:0]            m_axi_awregion,\n    output wire [M_COUNT*AWUSER_WIDTH-1:0] m_axi_awuser,\n    output wire [M_COUNT-1:0]              m_axi_awvalid,\n    input  wire [M_COUNT-1:0]              m_axi_awready,\n    output reg [SUM_M_W_D_WIDTH-1:0]     m_axi_wdata,\n    output reg [SUM_M_STRB_WIDTH-1:0]    m_axi_wstrb,\n    output wire [M_COUNT-1:0]              m_axi_wlast,\n    output wire [M_COUNT*WUSER_WIDTH-1:0]  m_axi_wuser,\n    output wire [M_COUNT-1:0]              m_axi_wvalid,\n    input  wire [M_COUNT-1:0]              m_axi_wready,\n    input  wire [M_COUNT*M_ID_WIDTH-1:0]   m_axi_bid,\n    input  wire [M_COUNT*2-1:0]            m_axi_bresp,\n    input  wire [M_COUNT*BUSER_WIDTH-1:0]  m_axi_buser,\n    input  wire [M_COUNT-1:0]              m_axi_bvalid,\n    output wire [M_COUNT-1:0]              m_axi_bready,\n    output wire [M_COUNT*M_ID_WIDTH-1:0]   m_axi_arid,\n    output reg [SUM_M_A_WIDTH-1:0]       m_axi_araddr,\n    output wire [M_COUNT*8-1:0]            m_axi_arlen,\n    output wire [M_COUNT*3-1:0]            m_axi_arsize,\n    output wire [M_COUNT*2-1:0]            m_axi_arburst,\n    output wire [M_COUNT-1:0]              m_axi_arlock,\n    output wire [M_COUNT*4-1:0]            m_axi_arcache,\n    output wire [M_COUNT*3-1:0]            m_axi_arprot,\n    output wire [M_COUNT*4-1:0]            m_axi_arqos,\n    output wire [M_COUNT*4-1:0]            m_axi_arregion,\n    output wire [M_COUNT*ARUSER_WIDTH-1:0] m_axi_aruser,\n    output wire [M_COUNT-1:0]              m_axi_arvalid,\n    input  wire [M_COUNT-1:0]              m_axi_arready,\n    input  wire [M_COUNT*M_ID_WIDTH-1:0]   m_axi_rid,\n    input  wire [SUM_M_R_D_WIDTH-1:0]     m_axi_rdata,\n    input  wire [M_COUNT*2-1:0]            m_axi_rresp,\n    input  wire [M_COUNT-1:0]              m_axi_rlast,\n    input  wire [M_COUNT*RUSER_WIDTH-1:0]  m_axi_ruser,\n    input  wire [M_COUNT-1:0]              m_axi_rvalid,\n    output wire [M_COUNT-1:0]              m_axi_rready\n);\n\n//    wire [SUM_S_ID_WIDTH-1:0]     internal_s_axi_bid[S_COUNT];\n//// Connect the internal wire to your output port\n//assign s_axi_bid = internal_s_axi_bid[0];\n\n    //wire [SUM_S_ID_WIDTH-1:0]       a_c_axi_awid;\n    wire [S_COUNT*MAX_S_ID_WIDTH-1:0]       a_c_axi_awid;\n    wire [S_COUNT*S_A_WIDTH-1:0]     a_c_axi_awaddr;\n    wire [S_COUNT*8-1:0]             a_c_axi_awlen;\n    wire [S_COUNT*3-1:0]             a_c_axi_awsize;\n    wire [S_COUNT*2-1:0]             a_c_axi_awburst;\n    wire [S_COUNT-1:0]               a_c_axi_awlock;\n    wire [S_COUNT*4-1:0]             a_c_axi_awcache;\n    wire [S_COUNT*3-1:0]             a_c_axi_awprot;\n    wire [S_COUNT*4-1:0]             a_c_axi_awqos;\n    wire [S_COUNT*AWUSER_WIDTH-1:0]  a_c_axi_awuser;\n    wire [S_COUNT-1:0]               a_c_axi_awvalid;\n    wire [S_COUNT-1:0]               a_c_axi_awready;\n    wire [S_COUNT*CROSSBAR_D_WIDTH-1:0]      a_c_axi_wdata;\n    wire [S_COUNT*CROSSBAR_D_WIDTH/8-1:0]     a_c_axi_wstrb;\n    wire [S_COUNT-1:0]               a_c_axi_wlast;\n    wire [S_COUNT*WUSER_WIDTH-1:0]   a_c_axi_wuser;\n    wire [S_COUNT-1:0]               a_c_axi_wvalid;\n    wire [S_COUNT-1:0]               a_c_axi_wready;\n    reg [SUM_S_ID_WIDTH-1:0]       a_c_axi_bid;\n    wire [S_COUNT*2-1:0]             a_c_axi_bresp;\n    wire [S_COUNT*BUSER_WIDTH-1:0]   a_c_axi_buser;\n    wire [S_COUNT-1:0]               a_c_axi_bvalid;\n    wire [S_COUNT-1:0]               a_c_axi_bready;\n    wire [SUM_S_ID_WIDTH-1:0]       a_c_axi_arid;\n    wire [S_COUNT*S_A_WIDTH-1:0]     a_c_axi_araddr;\n    wire [S_COUNT*8-1:0]             a_c_axi_arlen;\n    wire [S_COUNT*3-1:0]             a_c_axi_arsize;\n    wire [S_COUNT*2-1:0]             a_c_axi_arburst;\n    wire [S_COUNT-1:0]               a_c_axi_arlock;\n    wire [S_COUNT*4-1:0]             a_c_axi_arcache;\n    wire [S_COUNT*3-1:0]             a_c_axi_arprot;\n    wire [S_COUNT*4-1:0]             a_c_axi_arqos;\n    wire [S_COUNT*ARUSER_WIDTH-1:0]  a_c_axi_aruser;\n    wire [S_COUNT-1:0]               a_c_axi_arvalid;\n    wire [S_COUNT-1:0]               a_c_axi_arready;\n    reg [SUM_S_ID_WIDTH-1:0]       a_c_axi_rid;\n    wire [S_COUNT*CROSSBAR_D_WIDTH-1:0]      a_c_axi_rdata;\n    wire [S_COUNT*2-1:0]             a_c_axi_rresp;\n    wire [S_COUNT-1:0]               a_c_axi_rlast;\n    wire [S_COUNT*RUSER_WIDTH-1:0]   a_c_axi_ruser;\n    wire [S_COUNT-1:0]               a_c_axi_rvalid;\n    wire [S_COUNT-1:0]               a_c_axi_rready;\n\n    /*\n     * AXI master interfaces\n     */\n    wire [M_COUNT*M_ID_WIDTH-1:0]    c_a_axi_awid;\n    reg [SUM_M_A_WIDTH-1:0]        c_a_axi_awaddr;\n    wire [M_COUNT*8-1:0]             c_a_axi_awlen;\n    wire [M_COUNT*3-1:0]             c_a_axi_awsize;\n    wire [M_COUNT*2-1:0]             c_a_axi_awburst;\n    wire [M_COUNT-1:0]               c_a_axi_awlock;\n    wire [M_COUNT*4-1:0]             c_a_axi_awcache;\n    wire [M_COUNT*3-1:0]             c_a_axi_awprot;\n    wire [M_COUNT*4-1:0]             c_a_axi_awqos;\n    wire [M_COUNT*4-1:0]             c_a_axi_awregion;\n    wire [M_COUNT*AWUSER_WIDTH-1:0]  c_a_axi_awuser;\n    wire [M_COUNT-1:0]               c_a_axi_awvalid;\n    wire [M_COUNT-1:0]               c_a_axi_awready;\n    wire [M_COUNT*CROSSBAR_D_WIDTH-1:0]      c_a_axi_wdata;\n    wire [SUM_CROSSBAR_STRB_WIDTH-1:0]     c_a_axi_wstrb;\n    wire [M_COUNT-1:0]               c_a_axi_wlast;\n    wire [M_COUNT*WUSER_WIDTH-1:0]   c_a_axi_wuser;\n    wire [M_COUNT-1:0]               c_a_axi_wvalid;\n    wire [M_COUNT-1:0]               c_a_axi_wready;\n    wire [M_COUNT*M_ID_WIDTH-1:0]    c_a_axi_bid;\n    wire [M_COUNT*2-1:0]             c_a_axi_bresp;\n    wire [M_COUNT*BUSER_WIDTH-1:0]   c_a_axi_buser;\n    wire [M_COUNT-1:0]               c_a_axi_bvalid;\n    wire [M_COUNT-1:0]               c_a_axi_bready;\n    wire [M_COUNT*M_ID_WIDTH-1:0]    c_a_axi_arid;\n    reg [SUM_M_A_WIDTH-1:0]        c_a_axi_araddr;\n    wire [M_COUNT*8-1:0]             c_a_axi_arlen;\n    wire [M_COUNT*3-1:0]             c_a_axi_arsize;\n    wire [M_COUNT*2-1:0]             c_a_axi_arburst;\n    wire [M_COUNT-1:0]               c_a_axi_arlock;\n    wire [M_COUNT*4-1:0]             c_a_axi_arcache;\n    wire [M_COUNT*3-1:0]             c_a_axi_arprot;\n    wire [M_COUNT*4-1:0]             c_a_axi_arqos;\n    wire [M_COUNT*4-1:0]             c_a_axi_arregion;\n    wire [M_COUNT*ARUSER_WIDTH-1:0]  c_a_axi_aruser;\n    wire [M_COUNT-1:0]               c_a_axi_arvalid;\n    wire [M_COUNT-1:0]               c_a_axi_arready;\n    wire [M_COUNT*M_ID_WIDTH-1:0]    c_a_axi_rid;\n    //logic [SUM_M_R_D_WIDTH-1:0]      c_a_axi_rdata;\n    logic [CROSSBAR_D_WIDTH*M_COUNT-1:0]    c_a_axi_rdata;\n    wire [M_COUNT*2-1:0]             c_a_axi_rresp;\n    wire [M_COUNT-1:0]               c_a_axi_rlast;\n    wire [M_COUNT*RUSER_WIDTH-1:0]   c_a_axi_ruser;\n    wire [M_COUNT-1:0]               c_a_axi_rvalid;\n    wire [M_COUNT-1:0]               c_a_axi_rready;\n\n\n\n    wire [MAX_S_RD_WIDTH*S_COUNT-1:0]    temp_s_axi_rdata;\n    wire [MAX_S_ID_WIDTH-1:0] adapter_crossbar_S_AW_ID[S_COUNT];\n    wire [S_COUNT*MAX_S_ID_WIDTH-1:0] adapter_crossbar_S_B_ID;\n    wire [S_COUNT*MAX_S_ID_WIDTH-1:0] adapter_crossbar_S_AR_ID;\n    wire [S_COUNT*MAX_S_ID_WIDTH-1:0] adapter_crossbar_S_R_ID;\n\n    wire [S_COUNT*MAX_S_ID_WIDTH-1:0] temp_adapter_crossbar_S_AW_ID;\n    wire [S_COUNT*MAX_S_ID_WIDTH-1:0] temp_adapter_crossbar_S_AR_ID;\n\n    //wire [M_COUNT*S_A_WIDTH-1:0] temp_adapter_crossbar_M_ARADDR;\n\n    genvar k;\n    generate\n	    for(k=0;k<S_COUNT;k=k+1)begin\n		 assign temp_adapter_crossbar_S_AW_ID[k*MAX_S_ID_WIDTH +: MAX_S_ID_WIDTH] = adapter_crossbar_S_AW_ID[k]; \n		 //assign temp_adapter_crossbar_S_AR_ID[k*MAX_S_ID_WIDTH +: MAX_S_ID_WIDTH] = adapter_crossbar_S_AR_ID[k];\n	    end\n   endgenerate \n\n\n    genvar i;\n    generate \n       for(i=0;i <S_COUNT;i=i+1) begin\n          //assign adapter_crossbar_S_AW_ID[i] = {{(MAX_S_ID_WIDTH-S_ID_WIDTH[i]){1'b0}},a_c_axi_awid[axi_interconnect_pkg::sum_up_to_index(S_ID_WIDTH,i)+:S_ID_WIDTH[i]]}; \n          assign adapter_crossbar_S_AR_ID[i] = {{(MAX_S_ID_WIDTH-S_ID_WIDTH[i]){1'b0}},a_c_axi_arid[axi_interconnect_pkg::sum_up_to_index(S_ID_WIDTH,i)+:S_ID_WIDTH[i]]};\n          //assign c_a_axi_araddr[axi_interconnect_pkg::sum_up_to_index(S_ID_WIDTH,i)+:S_ID_WIDTH[i]] = temp_adapter_crossbar_M_ARADDR[i*S_A_WIDTH+:S_A_WIDTH];\n          always@(*)  \n          begin \n             a_c_axi_bid[axi_interconnect_pkg::sum_up_to_index(S_ID_WIDTH,i)+:S_ID_WIDTH[i]] = adapter_crossbar_S_B_ID[i*MAX_S_ID_WIDTH+:MAX_S_ID_WIDTH]; \n             a_c_axi_rid[axi_interconnect_pkg::sum_up_to_index(S_ID_WIDTH,i)+:S_ID_WIDTH[i]] = adapter_crossbar_S_R_ID[i*MAX_S_ID_WIDTH+:MAX_S_ID_WIDTH]; \n             s_axi_rdata[axi_interconnect_pkg::sum_up_to_index(S_R_D_WIDTH,i)+:S_R_D_WIDTH[i]] = temp_s_axi_rdata[MAX_S_RD_WIDTH*i+:MAX_S_RD_WIDTH];\n          end\n       end\n    endgenerate\n\n\n    wire [M_COUNT*S_A_WIDTH-1:0] crossbar_adapter_M_AWADDR;\n    wire [M_COUNT*S_A_WIDTH-1:0] crossbar_adapter_M_ARADDR;\n    wire [M_COUNT*CROSSBAR_D_WIDTH-1:0] crossbar_adapter_M_RDATA;\n\n    genvar j;\n    generate  \n       for(j=0;j <M_COUNT;j=j+1) begin\n          always@(*)  \n          begin \n             c_a_axi_awaddr[axi_interconnect_pkg::sum_up_to_index(M_A_WIDTH,j)+:M_A_WIDTH[j]] = crossbar_adapter_M_AWADDR[j*S_A_WIDTH+:S_A_WIDTH]; \n             c_a_axi_araddr[axi_interconnect_pkg::sum_up_to_index(M_A_WIDTH,j)+:M_A_WIDTH[j]] = crossbar_adapter_M_ARADDR[j*S_A_WIDTH+:S_A_WIDTH]; \n             //c_a_axi_rdata[axi_interconnect_pkg::sum_up_to_index(M_R_D_WIDTH,j)+:M_R_D_WIDTH[j]] = crossbar_adapter_M_RDATA[j*CROSSBAR_D_WIDTH+:CROSSBAR_D_WIDTH]; \n          end\n       end\n    endgenerate\n\n  //wire [S_COUNT*CROSSBAR_D_WIDTH-1:0] a_c_axi_wdata_upsized;\n\n  //genvar aa;\n  //generate \n  //    for(aa=0;aa <S_COUNT;aa=aa+1)begin\n  //       assign a_c_axi_wdata_upsized   =  a_c_axi_wdata;  \n  //    end\n  //endgenerate\n     wire [S_COUNT*MAX_S_ID_WIDTH-1:0] si_2_intwrap_s_axi_bid;\n     wire [S_COUNT*MAX_S_ID_WIDTH-1:0] si_2_intwrap_s_axi_rid;\n\n  genvar h2;\n     generate\n        for(h2=0;h2<S_COUNT;h2=h2+1) begin\n           always@*   \n             begin\n	     s_axi_bid[axi_interconnect_pkg::sum_up_to_index(S_ID_WIDTH,h2)+:S_ID_WIDTH[h2]]        = si_2_intwrap_s_axi_bid[MAX_S_ID_WIDTH*h2+:MAX_S_ID_WIDTH];\n             s_axi_rid[axi_interconnect_pkg::sum_up_to_index(S_ID_WIDTH,h2)+:S_ID_WIDTH[h2]]       = si_2_intwrap_s_axi_rid[MAX_S_ID_WIDTH*h2+:MAX_S_ID_WIDTH];\n             end\n        end\n     endgenerate\n  \n  genvar m;\n    generate \n	    for(m=0;m <S_COUNT;m=m+1)begin\n		axi_slave_interface_coupler #(\n	       .W_DATA_WIDTH(S_W_D_WIDTH[m]),\n	       .R_DATA_WIDTH(S_R_D_WIDTH[m]),\n	       .CROSSBAR_D_WIDTH(CROSSBAR_D_WIDTH),\n	       .ID_WIDTH(S_ID_WIDTH[m]),\n               .ADDR_WIDTH(S_A_WIDTH),\n	       .COUPLER_REG_INSTANCE(COUPLER_REG_INSTANCE),\n               .STRB_WIDTH(S_STRB_WIDTH[m]))\n\n		coupler_wrapper_instance\n		( .clk(clk),\n            .rst(rst),\n            .s_axi_awid(s_axi_awid[axi_interconnect_pkg::sum_up_to_index(S_ID_WIDTH,m)+: S_ID_WIDTH[m]]),\n            .s_axi_awaddr(s_axi_awaddr[S_A_WIDTH*m+:S_A_WIDTH]),\n            .s_axi_awlen(s_axi_awlen[m*8+:8]),\n            .s_axi_awsize(s_axi_awsize[m*3+:3]),\n            .s_axi_awburst(s_axi_awburst[m*2+:2]),\n            .s_axi_awlock(s_axi_awlock[m]),\n            .s_axi_awcache(s_axi_awcache[m*4+:4]),\n            .s_axi_awprot(s_axi_awprot[m*3+:3]),\n            .s_axi_awqos(s_axi_awqos[m*4+:4]),\n            .s_axi_awuser(s_axi_awuser[m*AWUSER_WIDTH+:AWUSER_WIDTH]),\n            .s_axi_awvalid(s_axi_awvalid[m]),\n            .s_axi_awready(s_axi_awready[m]),\n            .s_axi_wdata(s_axi_wdata[axi_interconnect_pkg::sum_up_to_index(S_W_D_WIDTH,m)+: S_W_D_WIDTH[m]]),\n            .s_axi_wstrb(s_axi_wstrb[axi_interconnect_pkg::sum_up_to_index(S_STRB_WIDTH,m)+: S_STRB_WIDTH[m]]),\n            .s_axi_wlast(s_axi_wlast[m]),\n            .s_axi_wuser(s_axi_wuser[m*WUSER_WIDTH+:WUSER_WIDTH]),\n            .s_axi_wvalid(s_axi_wvalid[m]),\n            .s_axi_wready(s_axi_wready[m]),\n            .s_axi_bid(si_2_intwrap_s_axi_bid[MAX_S_ID_WIDTH*m+:MAX_S_ID_WIDTH]),\n            .s_axi_bresp(s_axi_bresp[m*2+:2]),\n            .s_axi_buser(s_axi_buser[m*BUSER_WIDTH+:BUSER_WIDTH]),\n            .s_axi_bvalid(s_axi_bvalid[m]),\n            .s_axi_bready(s_axi_bready[m]),  \n	    .s_axi_arid(s_axi_arid[axi_interconnect_pkg::sum_up_to_index(S_ID_WIDTH,m)+:S_ID_WIDTH[m]]),\n            .s_axi_araddr(s_axi_araddr[S_A_WIDTH*m+:S_A_WIDTH]),\n            .s_axi_arlen(s_axi_arlen[m*8+:8]),\n            .s_axi_arsize(s_axi_arsize[m*3+:3]),\n            .s_axi_arburst(s_axi_arburst[m*2+:2]),\n            .s_axi_arlock(s_axi_arlock[m]),\n            .s_axi_arcache(s_axi_arcache[m*4+:4]),\n            .s_axi_arprot(s_axi_arprot[m*3+:3]),\n            .s_axi_arqos(s_axi_arqos[m*4+:4]),\n            .s_axi_aruser(s_axi_aruser[m*ARUSER_WIDTH+:ARUSER_WIDTH]),\n            .s_axi_arvalid(s_axi_arvalid[m]),\n            .s_axi_arready(s_axi_arready[m]),\n            .s_axi_rid(si_2_intwrap_s_axi_rid[MAX_S_ID_WIDTH*m+:MAX_S_ID_WIDTH]),\n            .s_axi_rdata(temp_s_axi_rdata[MAX_S_RD_WIDTH*m+:MAX_S_RD_WIDTH]),\n            .s_axi_rresp(s_axi_rresp[m*2+:2]),\n            .s_axi_rlast(s_axi_rlast[m]),\n            .s_axi_ruser(s_axi_ruser[m*RUSER_WIDTH+: RUSER_WIDTH]),\n            .s_axi_rvalid(s_axi_rvalid[m]),\n            .s_axi_rready(s_axi_rready[m]),\n\n\n\n            /*\n             * AXI master interface\n             */\n	    //.m_axi_awid(a_c_axi_awid[axi_interconnect_pkg::sum_up_to_index(S_ID_WIDTH,m)+: S_ID_WIDTH[m]]),\n	    .m_axi_awid(a_c_axi_awid[MAX_S_ID_WIDTH*m+:MAX_S_ID_WIDTH]),\n            .m_axi_awaddr(a_c_axi_awaddr[S_A_WIDTH*m+:S_A_WIDTH]),\n            .m_axi_awlen(a_c_axi_awlen[m*8+:8]),\n            .m_axi_awsize(a_c_axi_awsize[m*3+:3]),\n            .m_axi_awburst(a_c_axi_awburst[m*2+:2]),\n            .m_axi_awlock(a_c_axi_awlock[m]),\n            .m_axi_awcache(a_c_axi_awcache[m*4+:4]),\n            .m_axi_awprot(a_c_axi_awprot[m*3+:3]),\n            .m_axi_awqos(a_c_axi_awqos[m*4+:4]),\n            .m_axi_awregion(a_c_axi_awregion),\n            .m_axi_awuser(a_c_axi_awuser[m*AWUSER_WIDTH+:AWUSER_WIDTH]),\n            .m_axi_awvalid(a_c_axi_awvalid[m]),\n            .m_axi_awready(a_c_axi_awready[m]),\n            .m_axi_wdata(a_c_axi_wdata[m*CROSSBAR_D_WIDTH+:CROSSBAR_D_WIDTH]),\n            .m_axi_wstrb(a_c_axi_wstrb[m*CROSSBAR_STRB_WIDTH+:CROSSBAR_STRB_WIDTH]),\n            .m_axi_wlast(a_c_axi_wlast[m]),\n            .m_axi_wuser(a_c_axi_wuser[m*WUSER_WIDTH+:WUSER_WIDTH]),\n            .m_axi_wvalid(a_c_axi_wvalid[m]),\n            .m_axi_wready(a_c_axi_wready[m]),\n            .m_axi_bid(a_c_axi_bid[axi_interconnect_pkg::sum_up_to_index(S_ID_WIDTH,m)+:S_ID_WIDTH[m]]),\n            .m_axi_bresp(a_c_axi_bresp[m*2+:2]),\n            .m_axi_buser(a_c_axi_buser[m*BUSER_WIDTH+:BUSER_WIDTH]),\n            .m_axi_bvalid(a_c_axi_bvalid[m]),\n            .m_axi_bready(a_c_axi_bready[m]),  \n	    .m_axi_arid(temp_adapter_crossbar_S_AR_ID[m*MAX_S_ID_WIDTH +: MAX_S_ID_WIDTH]),\n            .m_axi_araddr(a_c_axi_araddr[S_A_WIDTH*m+:S_A_WIDTH]),\n            .m_axi_arlen(a_c_axi_arlen[m*8+:8]),\n            .m_axi_arsize(a_c_axi_arsize[m*3+:3]),\n            .m_axi_arburst(a_c_axi_arburst[m*2+:2]),\n            .m_axi_arlock(a_c_axi_arlock[m]),\n            .m_axi_arcache(a_c_axi_arcache[m*4+:4]),\n            .m_axi_arprot(a_c_axi_arprot[m*3+:3]),\n            .m_axi_arqos(a_c_axi_arqos[n*4+:4]),\n            .m_axi_arregion(a_c_axi_arregion),\n            .m_axi_aruser(a_c_axi_aruser[m*ARUSER_WIDTH+:ARUSER_WIDTH]),\n            .m_axi_arvalid(a_c_axi_arvalid[m]),\n            .m_axi_arready(a_c_axi_arready[m]),\n            .m_axi_rid(a_c_axi_rid[axi_interconnect_pkg::sum_up_to_index(S_ID_WIDTH,m)+:S_ID_WIDTH[m]]),\n            .m_axi_rdata(a_c_axi_rdata[m*CROSSBAR_D_WIDTH+:CROSSBAR_D_WIDTH]),\n            .m_axi_rresp(a_c_axi_rresp[m*2+:2]),\n            .m_axi_rlast(a_c_axi_rlast[m]),\n            .m_axi_ruser(a_c_axi_ruser[m*RUSER_WIDTH+: RUSER_WIDTH]),\n            .m_axi_rvalid(a_c_axi_rvalid[m]),\n            .m_axi_rready(a_c_axi_rready[m])\n\n            );\n\n      end\n    endgenerate\n\n     wire [M_COUNT*MAX_M_A_WIDTH-1:0] mi_2_intwrap_m_axi_awaddr;\n     wire [M_COUNT*MAX_M_A_WIDTH-1:0] mi_2_intwrap_m_axi_araddr;\n     wire [M_COUNT*MAX_M_WD_WIDTH-1:0] mi_2_intwrap_m_axi_wdata;\n     //wire [M_COUNT*MAX_M_RD_WIDTH-1:0] mi_2_intwrap_m_axi_rdata;\n     wire [M_COUNT*MAX_M_STRB_WIDTH-1:0] mi_2_intwrap_m_axi_wstrb;\n\n           //always@* m_axi_awaddr[axi_interconnect_pkg::sum_up_to_index(M_A_WIDTH,h1)+:M_A_WIDTH[h1]] = {<<M_A_WIDTH[h1]{mi_2_intwrap_m_axi_awaddr[MAX_M_A_WIDTH*M_COUNT*h1+:MAX_M_A_WIDTH]}};\n           //always@* m_axi_awaddr[axi_interconnect_pkg::sum_up_to_index(M_A_WIDTH,h1)+:M_A_WIDTH[h1]] = {<<M_A_WIDTH[h1]{mi_2_intwrap_m_axi_awaddr[MAX_M_A_WIDTH*h1+:MAX_M_A_WIDTH]}};\n     genvar h1;\n     generate\n        for(h1=0;h1<M_COUNT;h1=h1+1) begin\n           always@*   \n             begin\n	     m_axi_awaddr[axi_interconnect_pkg::sum_up_to_index(M_A_WIDTH,h1)+:M_A_WIDTH[h1]]       = mi_2_intwrap_m_axi_awaddr[MAX_M_A_WIDTH*h1+:MAX_M_A_WIDTH];\n             m_axi_araddr[axi_interconnect_pkg::sum_up_to_index(M_A_WIDTH,h1)+:M_A_WIDTH[h1]]       = mi_2_intwrap_m_axi_araddr[MAX_M_A_WIDTH*h1+:MAX_M_A_WIDTH];\n             m_axi_wdata[axi_interconnect_pkg::sum_up_to_index(M_W_D_WIDTH,h1)+:M_W_D_WIDTH[h1]]    = mi_2_intwrap_m_axi_wdata[MAX_M_WD_WIDTH*h1+:MAX_M_WD_WIDTH];\n             //m_axi_rdata[axi_interconnect_pkg::sum_up_to_index(M_R_D_WIDTH,h1)+:M_R_D_WIDTH[h1]]    = mi_2_intwrap_m_axi_rdata[MAX_M_RD_WIDTH*h1+:MAX_M_RD_WIDTH];\n             m_axi_wstrb[axi_interconnect_pkg::sum_up_to_index(M_STRB_WIDTH,h1)+:M_STRB_WIDTH[h1]]  = mi_2_intwrap_m_axi_wstrb[MAX_M_STRB_WIDTH*h1+:MAX_M_STRB_WIDTH]; \n             end\n        end\n     endgenerate\n\n     genvar n;\n     generate \n	    for(n=0;n<M_COUNT;n=n+1)begin\n		axi_master_interface_coupler_wrapper #(\n	           .W_DATA_WIDTH(M_W_D_WIDTH[n]),\n	           .R_DATA_WIDTH(M_R_D_WIDTH[n]),\n	           .CROSSBAR_D_WIDTH(CROSSBAR_D_WIDTH),\n	           .ID_WIDTH(M_ID_WIDTH),\n                   .ADDR_WIDTH(M_A_WIDTH[n]),\n		   .COUPLER_REG_INSTANCE(COUPLER_REG_INSTANCE)\n		)m_interface_coupler_instance\n		( 		\n	    .clk(clk),\n            .rst(rst),\n\n            /*\n             * AXI master interface\n             */\n            .m_axi_awid(m_axi_awid[M_ID_WIDTH*n+:M_ID_WIDTH]),\n            //.m_axi_awaddr(m_axi_awaddr[axi_interconnect_pkg::sum_up_to_index(M_A_WIDTH,n)+:M_A_WIDTH[n]]),\n            //.m_axi_awaddr(m_axi_awaddr[axi_interconnect_pkg::sum_up_to_index(M_A_WIDTH,n)+:M_A_WIDTH[n]]),\n            .m_axi_awaddr(mi_2_intwrap_m_axi_awaddr[MAX_M_A_WIDTH*n+:MAX_M_A_WIDTH]),\n            .m_axi_awlen(m_axi_awlen[n*8+:8]),\n            .m_axi_awsize(m_axi_awsize[n*3+:3]),\n            .m_axi_awburst(m_axi_awburst[n*2+:2]),\n            .m_axi_awlock(m_axi_awlock[n]),\n            .m_axi_awcache(m_axi_awcache[n*4+:4]),\n            .m_axi_awprot(m_axi_awprot[n*3+:3]),\n            .m_axi_awqos(m_axi_awqos[n*4+:4]),\n            .m_axi_awregion(m_axi_awregion),\n            .m_axi_awuser(m_axi_awuser[n*AWUSER_WIDTH+:AWUSER_WIDTH]),\n            .m_axi_awvalid(m_axi_awvalid[n]),\n            .m_axi_awready(m_axi_awready[n]),\n            .m_axi_wdata(mi_2_intwrap_m_axi_wdata[MAX_M_WD_WIDTH*n+:MAX_M_WD_WIDTH]),\n            .m_axi_wstrb(mi_2_intwrap_m_axi_wstrb[MAX_M_STRB_WIDTH*n+:MAX_M_STRB_WIDTH]),\n            .m_axi_wlast(m_axi_wlast[n]),\n            .m_axi_wuser(m_axi_wuser[n*WUSER_WIDTH+:WUSER_WIDTH]),\n            .m_axi_wvalid(m_axi_wvalid[n]),\n            .m_axi_wready(m_axi_wready[n]),\n            .m_axi_bid(m_axi_bid[M_ID_WIDTH*n+:M_ID_WIDTH]),\n            .m_axi_bresp(m_axi_bresp[n*2+:2]),\n            .m_axi_buser(m_axi_buser[n*BUSER_WIDTH+:BUSER_WIDTH]),\n            .m_axi_bvalid(m_axi_bvalid[n]),\n            .m_axi_bready(m_axi_bready[n]),  \n	    .m_axi_arid(m_axi_arid[M_ID_WIDTH*n+:M_ID_WIDTH]),\n            .m_axi_araddr(mi_2_intwrap_m_axi_araddr[MAX_M_A_WIDTH*n+:MAX_M_A_WIDTH]),\n            .m_axi_arlen(m_axi_arlen[n*8+:8]),\n            .m_axi_arsize(m_axi_arsize[n*3+:3]),\n            .m_axi_arburst(m_axi_arburst[n*2+:2]),\n            .m_axi_arlock(m_axi_arlock[n]),\n            .m_axi_arcache(m_axi_arcache[n*4+:4]),\n            .m_axi_arprot(m_axi_arprot[n*3+:3]),\n            .m_axi_arqos(m_axi_arqos[n*4+:4]),\n            .m_axi_arregion(m_axi_arregion),\n            .m_axi_aruser(m_axi_aruser[n*ARUSER_WIDTH+:ARUSER_WIDTH]),\n            .m_axi_arvalid(m_axi_arvalid[n]),\n            .m_axi_arready(m_axi_arready[n]),\n            .m_axi_rid(m_axi_rid[M_ID_WIDTH*n+:M_ID_WIDTH]),\n            .m_axi_rdata(m_axi_rdata[axi_interconnect_pkg::sum_up_to_index(M_R_D_WIDTH,n)+:M_R_D_WIDTH[n]]),\n            .m_axi_rresp(m_axi_rresp[n*2+:2]),\n            .m_axi_rlast(m_axi_rlast[n]),\n            .m_axi_ruser(m_axi_ruser[n*RUSER_WIDTH+: RUSER_WIDTH]),\n            .m_axi_rvalid(m_axi_rvalid[n]),\n            .m_axi_rready(m_axi_rready[n]),\n\n\n\n            /*\n             * AXI slave interface\n             */\n	    .s_axi_awid(c_a_axi_awid[M_ID_WIDTH*n+:M_ID_WIDTH]),\n            .s_axi_awaddr(c_a_axi_awaddr[axi_interconnect_pkg::sum_up_to_index(M_A_WIDTH,n)+:M_A_WIDTH[n]]),\n            .s_axi_awlen(c_a_axi_awlen[n*8+:8]),\n            .s_axi_awsize(c_a_axi_awsize[n*3+:3]),\n            .s_axi_awburst(c_a_axi_awburst[n*2+:2]),\n            .s_axi_awlock(c_a_axi_awlock[n]),\n            .s_axi_awcache(s_axi_awcache[n*4+:4]),\n            .s_axi_awprot(c_a_axi_awprot[n*3+:3]),\n            .s_axi_awqos(c_a_axi_awqos[n*4+:4]),\n            .s_axi_awregion(c_a_axi_awregion),\n            .s_axi_awuser(c_a_axi_awuser[n*AWUSER_WIDTH+:AWUSER_WIDTH]),\n            .s_axi_awvalid(c_a_axi_awvalid[n]),\n            .s_axi_awready(c_a_axi_awready[n]),\n            .s_axi_wdata(c_a_axi_wdata[n*CROSSBAR_D_WIDTH+:CROSSBAR_D_WIDTH]),\n            .s_axi_wstrb(c_a_axi_wstrb[n*CROSSBAR_STRB_WIDTH+:CROSSBAR_STRB_WIDTH]),\n            .s_axi_wlast(c_a_axi_wlast[n]),\n            .s_axi_wuser(c_a_axi_wuser[n*WUSER_WIDTH+:WUSER_WIDTH]),\n            .s_axi_wvalid(c_a_axi_wvalid[n]),\n            .s_axi_wready(c_a_axi_wready[n]),\n            .s_axi_bid(c_a_axi_bid[M_ID_WIDTH*n+:M_ID_WIDTH]),\n            .s_axi_bresp(c_a_axi_bresp[n*2+:2]),\n            .s_axi_buser(c_a_axi_buser[n*BUSER_WIDTH+:BUSER_WIDTH]),\n            .s_axi_bvalid(c_a_axi_bvalid[n]),\n            .s_axi_bready(c_a_axi_bready[n]),  \n	    .s_axi_arid(c_a_axi_arid[M_ID_WIDTH*n+:M_ID_WIDTH]),\n            .s_axi_araddr(c_a_axi_araddr[axi_interconnect_pkg::sum_up_to_index(M_A_WIDTH,n)+:M_A_WIDTH[n]]),\n            .s_axi_arlen(c_a_axi_arlen[n*8+:8]),\n            .s_axi_arsize(c_a_axi_arsize[n*3+:3]),\n            .s_axi_arburst(c_a_axi_arburst[n*2+:2]),\n            .s_axi_arlock(c_a_axi_arlock[n]),\n            .s_axi_arcache(c_a_axi_arcache[n*4+:4]),\n            .s_axi_arprot(c_a_axi_arprot[n*3+:3]),\n            .s_axi_arqos(c_a_axi_arqos[n*4+:4]),\n            .s_axi_arregion(c_a_axi_arregion),\n            .s_axi_aruser(c_a_axi_aruser[n*ARUSER_WIDTH+:ARUSER_WIDTH]),\n            .s_axi_arvalid(c_a_axi_arvalid[n]),\n            .s_axi_arready(c_a_axi_arready[n]),\n            .s_axi_rid(c_a_axi_rid[M_ID_WIDTH*n+:M_ID_WIDTH]),\n            .s_axi_rdata(c_a_axi_rdata[CROSSBAR_D_WIDTH*n+:CROSSBAR_D_WIDTH]),\n            .s_axi_rresp(c_a_axi_rresp[n*2+:2]),\n            .s_axi_rlast(c_a_axi_rlast[n]),\n            .s_axi_ruser(c_a_axi_ruser[n*RUSER_WIDTH+: RUSER_WIDTH]),\n            .s_axi_rvalid(c_a_axi_rvalid[n]),\n            .s_axi_rready(c_a_axi_rready[n])\n\n\n            );\n\n      end\n    endgenerate\n\n    axi_crossbar #(\n               .S_COUNT(S_COUNT),\n	       .M_COUNT(M_COUNT) ,\n	       .DATA_WIDTH(CROSSBAR_D_WIDTH),\n	       .ADDR_WIDTH(S_A_WIDTH),\n	       .M_ID_WIDTH(M_ID_WIDTH),\n	       .S_ID_WIDTH(MAX_S_ID_WIDTH)\n               )\n\n    crossbar_instance (\n	          .clk(clk),\n            .rst(rst),\n\n            /*\n             * AXI slave interface\n             */\n            .s_axi_awid(a_c_axi_awid),\n            .s_axi_awaddr(a_c_axi_awaddr),\n            .s_axi_awlen(a_c_axi_awlen),\n            .s_axi_awsize(a_c_axi_awsize),\n            .s_axi_awburst(a_c_axi_awburst),\n            .s_axi_awlock(a_c_axi_awlock),\n            .s_axi_awcache(a_c_axi_awcache),\n            .s_axi_awprot(a_c_axi_awprot),\n            .s_axi_awqos(a_c_axi_awqos),\n            .s_axi_awuser(a_c_axi_awuser),\n            .s_axi_awvalid(a_c_axi_awvalid),\n            .s_axi_awready(a_c_axi_awready),\n            .s_axi_wdata(a_c_axi_wdata),\n            .s_axi_wstrb(a_c_axi_wstrb),\n            .s_axi_wlast(a_c_axi_wlast),\n            .s_axi_wuser(a_c_axi_wuser),\n            .s_axi_wvalid(a_c_axi_wvalid),\n            .s_axi_wready(a_c_axi_wready),\n            .s_axi_bid(adapter_crossbar_S_B_ID),\n            .s_axi_bresp(a_c_axi_bresp),\n            .s_axi_buser(a_c_axi_buser),\n            .s_axi_bvalid(a_c_axi_bvalid),\n            .s_axi_bready(a_c_axi_bready),  \n	    .s_axi_arid(temp_adapter_crossbar_S_AR_ID),\n            .s_axi_araddr(a_c_axi_araddr),\n            .s_axi_arlen(a_c_axi_arlen),\n            .s_axi_arsize(a_c_axi_arsize),\n            .s_axi_arburst(a_c_axi_arburst),\n            .s_axi_arlock(a_c_axi_arlock),\n            .s_axi_arcache(a_c_axi_arcache),\n            .s_axi_arprot(a_c_axi_arprot),\n            .s_axi_arqos(a_c_axi_arqos),\n            .s_axi_aruser(a_c_axi_aruser),\n            .s_axi_arvalid(a_c_axi_arvalid),\n            .s_axi_arready(a_c_axi_arready),\n            .s_axi_rid(adapter_crossbar_S_R_ID),\n            .s_axi_rdata(a_c_axi_rdata),\n            .s_axi_rresp(a_c_axi_rresp),\n            .s_axi_rlast(a_c_axi_rlast),\n            .s_axi_ruser(a_c_axi_ruser),\n            .s_axi_rvalid(a_c_axi_rvalid),\n            .s_axi_rready(a_c_axi_rready),\n\n\n\n            /*\n             * AXI master interface\n             */\n            .m_axi_awid(c_a_axi_awid),\n            .m_axi_awaddr(crossbar_adapter_M_AWADDR),\n            .m_axi_awlen(c_a_axi_awlen),\n            .m_axi_awsize(c_a_axi_awsize),\n            .m_axi_awburst(c_a_axi_awburst),\n            .m_axi_awlock(c_a_axi_awlock),\n            .m_axi_awcache(c_a_axi_awcache),\n            .m_axi_awprot(c_a_axi_awprot),\n            .m_axi_awqos(c_a_axi_awqos),\n            .m_axi_awregion(c_a_axi_awregion),\n            .m_axi_awuser(c_a_axi_awuser),\n            .m_axi_awvalid(c_a_axi_awvalid),\n            .m_axi_awready(c_a_axi_awready),\n            .m_axi_wdata(c_a_axi_wdata),\n            .m_axi_wstrb(c_a_axi_wstrb),\n            .m_axi_wlast(c_a_axi_wlast),\n            .m_axi_wuser(c_a_axi_wuser),\n            .m_axi_wvalid(c_a_axi_wvalid),\n            .m_axi_wready(c_a_axi_wready),\n            .m_axi_bid(c_a_axi_bid),\n            .m_axi_bresp(c_a_axi_bresp),\n            .m_axi_buser(c_a_axi_buser),\n            .m_axi_bvalid(c_a_axi_bvalid),\n            .m_axi_bready(c_a_axi_bready),\n	    .m_axi_arid(c_a_axi_arid),\n	    .m_axi_araddr(crossbar_adapter_M_ARADDR),\n	    .m_axi_arlen(c_a_axi_arlen),\n            .m_axi_arsize(c_a_axi_arsize),\n            .m_axi_arburst(c_a_axi_arburst),\n            .m_axi_arlock(c_a_axi_arlock),\n            .m_axi_arcache(c_a_axi_arcache),\n            .m_axi_arprot(c_a_axi_arprot),\n            .m_axi_arqos(c_a_axi_arqos),\n            .m_axi_arregion(c_a_axi_arregion),\n            .m_axi_aruser(c_a_axi_aruser),\n            .m_axi_arvalid(c_a_axi_arvalid),\n            .m_axi_arready(c_a_axi_arready),\n            .m_axi_rid(c_a_axi_rid),\n            .m_axi_rdata(c_a_axi_rdata),\n            .m_axi_rresp(c_a_axi_rresp),\n            .m_axi_rlast(c_a_axi_rlast),\n            .m_axi_ruser(c_a_axi_ruser),\n            .m_axi_rvalid(c_a_axi_rvalid),\n            .m_axi_rready(c_a_axi_rready)\n    );\nendmodule\n\n\n\n		    \n\n\n\n\n","lang":"verilog"};
processSrcData(g_data);