var g_data = {"name":"axi_crossbar_addr.v","src":"/*\n\nCopyright (c) 2018 Alex Forencich\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n*/\n\n// Language: Verilog 2001\n\n`resetall\n`timescale 1ns / 1ps\n`default_nettype none\n\n/*\n * AXI4 crossbar address decode and admission control\n */\nmodule axi_crossbar_addr #\n(\n    // Slave interface index\n    parameter S = 0,\n    // Number of AXI inputs (slave interfaces)\n    parameter S_COUNT = 4,\n    // Number of AXI outputs (master interfaces)\n    parameter M_COUNT = 4,\n    // Width of address bus in bits\n    parameter ADDR_WIDTH = 32,\n    // ID field width\n    parameter ID_WIDTH = 8,\n    // Number of concurrent unique IDs\n    parameter S_THREADS = 32'd2,\n    // Number of concurrent operations\n    parameter S_ACCEPT = 32'd16,\n    // Number of regions per master interface\n    parameter M_REGIONS = 1,\n    // Master interface base addresses\n    // M_COUNT concatenated fields of M_REGIONS concatenated fields of ADDR_WIDTH bits\n    // set to zero for default addressing based on M_ADDR_WIDTH\n    parameter M_BASE_ADDR = 0,\n    // Master interface address widths\n    // M_COUNT concatenated fields of M_REGIONS concatenated fields of 32 bits\n    parameter M_ADDR_WIDTH = {M_COUNT{{M_REGIONS{32'd24}}}},\n    // Connections between interfaces\n    // M_COUNT concatenated fields of S_COUNT bits\n    parameter M_CONNECT = {M_COUNT{{S_COUNT{1'b1}}}},\n    // Secure master (fail operations based on awprot/arprot)\n    // M_COUNT bits\n    parameter M_SECURE = {M_COUNT{1'b0}},\n    // Enable write command output\n    parameter WC_OUTPUT = 0\n)\n(\n    input  wire                       clk,\n    input  wire                       rst,\n\n    /*\n     * Address input\n     */\n    input  wire [ID_WIDTH-1:0]        s_axi_aid,\n    input  wire [ADDR_WIDTH-1:0]      s_axi_aaddr,\n    input  wire [2:0]                 s_axi_aprot,\n    input  wire [3:0]                 s_axi_aqos,\n    input  wire                       s_axi_avalid,\n    output wire                       s_axi_aready,\n\n    /*\n     * Address output\n     */\n    output wire [3:0]                 m_axi_aregion,\n    output wire [$clog2(M_COUNT)-1:0] m_select,\n    output wire                       m_axi_avalid,\n    input  wire                       m_axi_aready,\n\n    /*\n     * Write command output\n     */\n    output wire [$clog2(M_COUNT)-1:0] m_wc_select,\n    output wire                       m_wc_decerr,\n    output wire                       m_wc_valid,\n    input  wire                       m_wc_ready,\n\n    /*\n     * Reply command output\n     */\n    output wire                       m_rc_decerr,\n    output wire                       m_rc_valid,\n    input  wire                       m_rc_ready,\n\n    /*\n     * Completion input\n     */\n    input  wire [ID_WIDTH-1:0]        s_cpl_id,\n    input  wire                       s_cpl_valid\n);\n\nparameter CL_S_COUNT = $clog2(S_COUNT);\nparameter CL_M_COUNT = $clog2(M_COUNT);\n\nparameter S_INT_THREADS = S_THREADS > S_ACCEPT ? S_ACCEPT : S_THREADS;\nparameter CL_S_INT_THREADS = $clog2(S_INT_THREADS);\nparameter CL_S_ACCEPT = $clog2(S_ACCEPT);\n\n// default address computation\nfunction [M_COUNT*M_REGIONS*ADDR_WIDTH-1:0] calcBaseAddrs(input [31:0] dummy);\n    integer i;\n    reg [ADDR_WIDTH-1:0] base;\n    reg [ADDR_WIDTH-1:0] width;\n    reg [ADDR_WIDTH-1:0] size;\n    reg [ADDR_WIDTH-1:0] mask;\n    begin\n        calcBaseAddrs = {M_COUNT*M_REGIONS*ADDR_WIDTH{1'b0}};\n        base = 0;\n        for (i = 0; i < M_COUNT*M_REGIONS; i = i + 1) begin\n            width = M_ADDR_WIDTH[i*32 +: 32];\n            mask = {ADDR_WIDTH{1'b1}} >> (ADDR_WIDTH - width);\n            size = mask + 1;\n            if (width > 0) begin\n                if ((base & mask) != 0) begin\n                   base = base + size - (base & mask); // align\n                end\n                calcBaseAddrs[i * ADDR_WIDTH +: ADDR_WIDTH] = base;\n                base = base + size; // increment\n            end\n        end\n    end\nendfunction\n\nparameter M_BASE_ADDR_INT = M_BASE_ADDR ? M_BASE_ADDR : calcBaseAddrs(0);\n\ninteger i, j;\n\n// check configuration\ninitial begin\n    if (S_ACCEPT < 1) begin\n        $error(\"Error: need at least 1 accept (instance %m)\");\n        $finish;\n    end\n\n    if (S_THREADS < 1) begin\n        $error(\"Error: need at least 1 thread (instance %m)\");\n        $finish;\n    end\n\n    if (S_THREADS > S_ACCEPT) begin\n        $warning(\"Warning: requested thread count larger than accept count; limiting thread count to accept count (instance %m)\");\n    end\n\n    if (M_REGIONS < 1) begin\n        $error(\"Error: need at least 1 region (instance %m)\");\n        $finish;\n    end\n\n    for (i = 0; i < M_COUNT*M_REGIONS; i = i + 1) begin\n        if (M_ADDR_WIDTH[i*32 +: 32] && (M_ADDR_WIDTH[i*32 +: 32] < 12 || M_ADDR_WIDTH[i*32 +: 32] > ADDR_WIDTH)) begin\n            $error(\"Error: address width out of range (instance %m)\");\n            $finish;\n        end\n    end\n\n    $display(\"Addressing configuration for axi_crossbar_addr instance %m\");\n    for (i = 0; i < M_COUNT*M_REGIONS; i = i + 1) begin\n        if (M_ADDR_WIDTH[i*32 +: 32]) begin\n            $display(\"%2d (%2d): %x / %02d -- %x-%x\",\n                i/M_REGIONS, i%M_REGIONS,\n                M_BASE_ADDR_INT[i*ADDR_WIDTH +: ADDR_WIDTH],\n                M_ADDR_WIDTH[i*32 +: 32],\n                M_BASE_ADDR_INT[i*ADDR_WIDTH +: ADDR_WIDTH] & ({ADDR_WIDTH{1'b1}} << M_ADDR_WIDTH[i*32 +: 32]),\n                M_BASE_ADDR_INT[i*ADDR_WIDTH +: ADDR_WIDTH] | ({ADDR_WIDTH{1'b1}} >> (ADDR_WIDTH - M_ADDR_WIDTH[i*32 +: 32]))\n            );\n        end\n    end\n\n    for (i = 0; i < M_COUNT*M_REGIONS; i = i + 1) begin\n        if ((M_BASE_ADDR_INT[i*ADDR_WIDTH +: ADDR_WIDTH] & (2**M_ADDR_WIDTH[i*32 +: 32]-1)) != 0) begin\n            $display(\"Region not aligned:\");\n            $display(\"%2d (%2d): %x / %2d -- %x-%x\",\n                i/M_REGIONS, i%M_REGIONS,\n                M_BASE_ADDR_INT[i*ADDR_WIDTH +: ADDR_WIDTH],\n                M_ADDR_WIDTH[i*32 +: 32],\n                M_BASE_ADDR_INT[i*ADDR_WIDTH +: ADDR_WIDTH] & ({ADDR_WIDTH{1'b1}} << M_ADDR_WIDTH[i*32 +: 32]),\n                M_BASE_ADDR_INT[i*ADDR_WIDTH +: ADDR_WIDTH] | ({ADDR_WIDTH{1'b1}} >> (ADDR_WIDTH - M_ADDR_WIDTH[i*32 +: 32]))\n            );\n            $error(\"Error: address range not aligned (instance %m)\");\n            $finish;\n        end\n    end\n\n    for (i = 0; i < M_COUNT*M_REGIONS; i = i + 1) begin\n        for (j = i+1; j < M_COUNT*M_REGIONS; j = j + 1) begin\n            if (M_ADDR_WIDTH[i*32 +: 32] && M_ADDR_WIDTH[j*32 +: 32]) begin\n                if (((M_BASE_ADDR_INT[i*ADDR_WIDTH +: ADDR_WIDTH] & ({ADDR_WIDTH{1'b1}} << M_ADDR_WIDTH[i*32 +: 32])) <= (M_BASE_ADDR_INT[j*ADDR_WIDTH +: ADDR_WIDTH] | ({ADDR_WIDTH{1'b1}} >> (ADDR_WIDTH - M_ADDR_WIDTH[j*32 +: 32]))))\n                        && ((M_BASE_ADDR_INT[j*ADDR_WIDTH +: ADDR_WIDTH] & ({ADDR_WIDTH{1'b1}} << M_ADDR_WIDTH[j*32 +: 32])) <= (M_BASE_ADDR_INT[i*ADDR_WIDTH +: ADDR_WIDTH] | ({ADDR_WIDTH{1'b1}} >> (ADDR_WIDTH - M_ADDR_WIDTH[i*32 +: 32]))))) begin\n                    $display(\"Overlapping regions:\");\n                    $display(\"%2d (%2d): %x / %2d -- %x-%x\",\n                        i/M_REGIONS, i%M_REGIONS,\n                        M_BASE_ADDR_INT[i*ADDR_WIDTH +: ADDR_WIDTH],\n                        M_ADDR_WIDTH[i*32 +: 32],\n                        M_BASE_ADDR_INT[i*ADDR_WIDTH +: ADDR_WIDTH] & ({ADDR_WIDTH{1'b1}} << M_ADDR_WIDTH[i*32 +: 32]),\n                        M_BASE_ADDR_INT[i*ADDR_WIDTH +: ADDR_WIDTH] | ({ADDR_WIDTH{1'b1}} >> (ADDR_WIDTH - M_ADDR_WIDTH[i*32 +: 32]))\n                    );\n                    $display(\"%2d (%2d): %x / %2d -- %x-%x\",\n                        j/M_REGIONS, j%M_REGIONS,\n                        M_BASE_ADDR_INT[j*ADDR_WIDTH +: ADDR_WIDTH],\n                        M_ADDR_WIDTH[j*32 +: 32],\n                        M_BASE_ADDR_INT[j*ADDR_WIDTH +: ADDR_WIDTH] & ({ADDR_WIDTH{1'b1}} << M_ADDR_WIDTH[j*32 +: 32]),\n                        M_BASE_ADDR_INT[j*ADDR_WIDTH +: ADDR_WIDTH] | ({ADDR_WIDTH{1'b1}} >> (ADDR_WIDTH - M_ADDR_WIDTH[j*32 +: 32]))\n                    );\n                    $error(\"Error: address ranges overlap (instance %m)\");\n                    $finish;\n                end\n            end\n        end\n    end\nend\n\nlocalparam [2:0]\n    STATE_IDLE = 3'd0,\n    STATE_DECODE = 3'd1;\n\nreg [2:0] state_reg = STATE_IDLE, state_next;\n\nreg s_axi_aready_reg = 0, s_axi_aready_next;\n\nreg [3:0] m_axi_aregion_reg = 4'd0, m_axi_aregion_next;\nreg [CL_M_COUNT-1:0] m_select_reg = 0, m_select_next;\nreg m_axi_avalid_reg = 1'b0, m_axi_avalid_next;\nreg m_decerr_reg = 1'b0, m_decerr_next;\nreg m_wc_valid_reg = 1'b0, m_wc_valid_next;\nreg m_rc_valid_reg = 1'b0, m_rc_valid_next;\n\nassign s_axi_aready = s_axi_aready_reg;\n\nassign m_axi_aregion = m_axi_aregion_reg;\nassign m_select = m_select_reg;\nassign m_axi_avalid = m_axi_avalid_reg;\n\nassign m_wc_select = m_select_reg;\nassign m_wc_decerr = m_decerr_reg;\nassign m_wc_valid = m_wc_valid_reg;\n\nassign m_rc_decerr = m_decerr_reg;\nassign m_rc_valid = m_rc_valid_reg;\n\nreg match;\nreg trans_start;\nreg trans_complete;\n\nreg [$clog2(S_ACCEPT+1)-1:0] trans_count_reg = 0;\nwire trans_limit = trans_count_reg >= S_ACCEPT && !trans_complete;\n\n// transfer ID thread tracking\nreg [ID_WIDTH-1:0] thread_id_reg[S_INT_THREADS-1:0];\nreg [CL_M_COUNT-1:0] thread_m_reg[S_INT_THREADS-1:0];\nreg [3:0] thread_region_reg[S_INT_THREADS-1:0];\nreg [$clog2(S_ACCEPT+1)-1:0] thread_count_reg[S_INT_THREADS-1:0];\n\nwire [S_INT_THREADS-1:0] thread_active;\nwire [S_INT_THREADS-1:0] thread_match;\nwire [S_INT_THREADS-1:0] thread_match_dest;\nwire [S_INT_THREADS-1:0] thread_cpl_match;\nwire [S_INT_THREADS-1:0] thread_trans_start;\nwire [S_INT_THREADS-1:0] thread_trans_complete;\n\ngenerate\n    genvar n;\n\n    for (n = 0; n < S_INT_THREADS; n = n + 1) begin\n        initial begin\n            thread_count_reg[n] <= 0;\n        end\n\n        assign thread_active[n] = thread_count_reg[n] != 0;\n        assign thread_match[n] = thread_active[n] && thread_id_reg[n] == s_axi_aid;\n        assign thread_match_dest[n] = thread_match[n] && thread_m_reg[n] == m_select_next && (M_REGIONS < 2 || thread_region_reg[n] == m_axi_aregion_next);\n        assign thread_cpl_match[n] = thread_active[n] && thread_id_reg[n] == s_cpl_id;\n        assign thread_trans_start[n] = (thread_match[n] || (!thread_active[n] && !thread_match && !(thread_trans_start & ({S_INT_THREADS{1'b1}} >> (S_INT_THREADS-n))))) && trans_start;\n        assign thread_trans_complete[n] = thread_cpl_match[n] && trans_complete;\n\n        always @(posedge clk) begin\n            if (rst) begin\n                thread_count_reg[n] <= 0;\n            end else begin\n                if (thread_trans_start[n] && !thread_trans_complete[n]) begin\n                    thread_count_reg[n] <= thread_count_reg[n] + 1;\n                end else if (!thread_trans_start[n] && thread_trans_complete[n]) begin\n                    thread_count_reg[n] <= thread_count_reg[n] - 1;\n                end\n            end\n\n            if (thread_trans_start[n]) begin\n                thread_id_reg[n] <= s_axi_aid;\n                thread_m_reg[n] <= m_select_next;\n                thread_region_reg[n] <= m_axi_aregion_next;\n            end\n        end\n    end\nendgenerate\n\nalways @* begin\n    state_next = STATE_IDLE;\n\n    match = 1'b0;\n    trans_start = 1'b0;\n    trans_complete = 1'b0;\n\n    s_axi_aready_next = 1'b0;\n\n    m_axi_aregion_next = m_axi_aregion_reg;\n    m_select_next = m_select_reg;\n    m_axi_avalid_next = m_axi_avalid_reg && !m_axi_aready;\n    m_decerr_next = m_decerr_reg;\n    m_wc_valid_next = m_wc_valid_reg && !m_wc_ready;\n    m_rc_valid_next = m_rc_valid_reg && !m_rc_ready;\n\n    case (state_reg)\n        STATE_IDLE: begin\n            // idle state, store values\n            s_axi_aready_next = 1'b0;\n\n            if (s_axi_avalid && !s_axi_aready) begin\n                match = 1'b0;\n                for (i = 0; i < M_COUNT; i = i + 1) begin\n                    for (j = 0; j < M_REGIONS; j = j + 1) begin\n                        if (M_ADDR_WIDTH[(i*M_REGIONS+j)*32 +: 32] && (!M_SECURE[i] || !s_axi_aprot[1]) && (M_CONNECT & (1 << (S+i*S_COUNT))) && (s_axi_aaddr >> M_ADDR_WIDTH[(i*M_REGIONS+j)*32 +: 32]) == (M_BASE_ADDR_INT[(i*M_REGIONS+j)*ADDR_WIDTH +: ADDR_WIDTH] >> M_ADDR_WIDTH[(i*M_REGIONS+j)*32 +: 32])) begin\n                            m_select_next = i;\n                            m_axi_aregion_next = j;\n                            match = 1'b1;\n                        end\n                    end\n                end\n\n                if (match) begin\n                    // address decode successful\n                    if (!trans_limit && (thread_match_dest || (!(&thread_active) && !thread_match))) begin\n                        // transaction limit not reached\n                        m_axi_avalid_next = 1'b1;\n                        m_decerr_next = 1'b0;\n                        m_wc_valid_next = WC_OUTPUT;\n                        m_rc_valid_next = 1'b0;\n                        trans_start = 1'b1;\n                        state_next = STATE_DECODE;\n                    end else begin\n                        // transaction limit reached; block in idle\n                        state_next = STATE_IDLE;\n                    end\n                end else begin\n                    // decode error\n                    m_axi_avalid_next = 1'b0;\n                    m_decerr_next = 1'b1;\n                    m_wc_valid_next = WC_OUTPUT;\n                    m_rc_valid_next = 1'b1;\n                    state_next = STATE_DECODE;\n                end\n            end else begin\n                state_next = STATE_IDLE;\n            end\n        end\n        STATE_DECODE: begin\n            if (!m_axi_avalid_next && (!m_wc_valid_next || !WC_OUTPUT) && !m_rc_valid_next) begin\n                s_axi_aready_next = 1'b1;\n                state_next = STATE_IDLE;\n            end else begin\n                state_next = STATE_DECODE;\n            end\n        end\n    endcase\n\n    // manage completions\n    trans_complete = s_cpl_valid;\nend\n\nalways @(posedge clk) begin\n    if (rst) begin\n        state_reg <= STATE_IDLE;\n        s_axi_aready_reg <= 1'b0;\n        m_axi_avalid_reg <= 1'b0;\n        m_wc_valid_reg <= 1'b0;\n        m_rc_valid_reg <= 1'b0;\n\n        trans_count_reg <= 0;\n    end else begin\n        state_reg <= state_next;\n        s_axi_aready_reg <= s_axi_aready_next;\n        m_axi_avalid_reg <= m_axi_avalid_next;\n        m_wc_valid_reg <= m_wc_valid_next;\n        m_rc_valid_reg <= m_rc_valid_next;\n\n        if (trans_start && !trans_complete) begin\n            trans_count_reg <= trans_count_reg + 1;\n        end else if (!trans_start && trans_complete) begin\n            trans_count_reg <= trans_count_reg - 1;\n        end\n    end\n\n    m_axi_aregion_reg <= m_axi_aregion_next;\n    m_select_reg <= m_select_next;\n    m_decerr_reg <= m_decerr_next;\nend\n\nendmodule\n\n`resetall\n","lang":"verilog"};
processSrcData(g_data);