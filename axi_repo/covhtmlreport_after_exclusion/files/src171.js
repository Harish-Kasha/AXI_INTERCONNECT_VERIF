var g_data = {"name":"axi_register_rd.v","src":"/*\n\nCopyright (c) 2018 Alex Forencich\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n*/\n\n// Language: Verilog 2001\n\n`resetall\n`timescale 1ns / 1ps\n`default_nettype none\n\n/*\n * AXI4 register (read)\n */\nmodule axi_register_rd #\n(\n    // Width of data bus in bits\n    parameter DATA_WIDTH = 32,\n    // Width of address bus in bits\n    parameter ADDR_WIDTH = 32,\n    // Width of wstrb (width of data bus in words)\n    parameter STRB_WIDTH = (DATA_WIDTH/8),\n    // Width of ID signal\n    parameter ID_WIDTH = 8,\n    // Propagate aruser signal\n    parameter ARUSER_ENABLE = 0,\n    // Width of aruser signal\n    parameter ARUSER_WIDTH = 1,\n    // Propagate ruser signal\n    parameter RUSER_ENABLE = 0,\n    // Width of ruser signal\n    parameter RUSER_WIDTH = 1,\n    // AR channel register type\n    // 0 to bypass, 1 for simple buffer, 2 for skid buffer\n    parameter AR_REG_TYPE = 1,\n    // R channel register type\n    // 0 to bypass, 1 for simple buffer, 2 for skid buffer\n    parameter R_REG_TYPE = 2\n)\n(\n    input  wire                     clk,\n    input  wire                     rst,\n\n    /*\n     * AXI slave interface\n     */\n    input  wire [ID_WIDTH-1:0]      s_axi_arid,\n    input  wire [ADDR_WIDTH-1:0]    s_axi_araddr,\n    input  wire [7:0]               s_axi_arlen,\n    input  wire [2:0]               s_axi_arsize,\n    input  wire [1:0]               s_axi_arburst,\n    input  wire                     s_axi_arlock,\n    input  wire [3:0]               s_axi_arcache,\n    input  wire [2:0]               s_axi_arprot,\n    input  wire [3:0]               s_axi_arqos,\n    input  wire [3:0]               s_axi_arregion,\n    input  wire [ARUSER_WIDTH-1:0]  s_axi_aruser,\n    input  wire                     s_axi_arvalid,\n    output wire                     s_axi_arready,\n    output wire [ID_WIDTH-1:0]      s_axi_rid,\n    output wire [DATA_WIDTH-1:0]    s_axi_rdata,\n    output wire [1:0]               s_axi_rresp,\n    output wire                     s_axi_rlast,\n    output wire [RUSER_WIDTH-1:0]   s_axi_ruser,\n    output wire                     s_axi_rvalid,\n    input  wire                     s_axi_rready,\n\n    /*\n     * AXI master interface\n     */\n    output wire [ID_WIDTH-1:0]      m_axi_arid,\n    output wire [ADDR_WIDTH-1:0]    m_axi_araddr,\n    output wire [7:0]               m_axi_arlen,\n    output wire [2:0]               m_axi_arsize,\n    output wire [1:0]               m_axi_arburst,\n    output wire                     m_axi_arlock,\n    output wire [3:0]               m_axi_arcache,\n    output wire [2:0]               m_axi_arprot,\n    output wire [3:0]               m_axi_arqos,\n    output wire [3:0]               m_axi_arregion,\n    output wire [ARUSER_WIDTH-1:0]  m_axi_aruser,\n    output wire                     m_axi_arvalid,\n    input  wire                     m_axi_arready,\n    input  wire [ID_WIDTH-1:0]      m_axi_rid,\n    input  wire [DATA_WIDTH-1:0]    m_axi_rdata,\n    input  wire [1:0]               m_axi_rresp,\n    input  wire                     m_axi_rlast,\n    input  wire [RUSER_WIDTH-1:0]   m_axi_ruser,\n    input  wire                     m_axi_rvalid,\n    output wire                     m_axi_rready\n);\n\ngenerate\n\n// AR channel\n\nif (AR_REG_TYPE > 1) begin\n// skid buffer, no bubble cycles\n\n// datapath registers\nreg                    s_axi_arready_reg = 1'b0;\n\nreg [ID_WIDTH-1:0]     m_axi_arid_reg     = {ID_WIDTH{1'b0}};\nreg [ADDR_WIDTH-1:0]   m_axi_araddr_reg   = {ADDR_WIDTH{1'b0}};\nreg [7:0]              m_axi_arlen_reg    = 8'd0;\nreg [2:0]              m_axi_arsize_reg   = 3'd0;\nreg [1:0]              m_axi_arburst_reg  = 2'd0;\nreg                    m_axi_arlock_reg   = 1'b0;\nreg [3:0]              m_axi_arcache_reg  = 4'd0;\nreg [2:0]              m_axi_arprot_reg   = 3'd0;\nreg [3:0]              m_axi_arqos_reg    = 4'd0;\nreg [3:0]              m_axi_arregion_reg = 4'd0;\nreg [ARUSER_WIDTH-1:0] m_axi_aruser_reg   = {ARUSER_WIDTH{1'b0}};\nreg                    m_axi_arvalid_reg  = 1'b0, m_axi_arvalid_next;\n\nreg [ID_WIDTH-1:0]     temp_m_axi_arid_reg     = {ID_WIDTH{1'b0}};\nreg [ADDR_WIDTH-1:0]   temp_m_axi_araddr_reg   = {ADDR_WIDTH{1'b0}};\nreg [7:0]              temp_m_axi_arlen_reg    = 8'd0;\nreg [2:0]              temp_m_axi_arsize_reg   = 3'd0;\nreg [1:0]              temp_m_axi_arburst_reg  = 2'd0;\nreg                    temp_m_axi_arlock_reg   = 1'b0;\nreg [3:0]              temp_m_axi_arcache_reg  = 4'd0;\nreg [2:0]              temp_m_axi_arprot_reg   = 3'd0;\nreg [3:0]              temp_m_axi_arqos_reg    = 4'd0;\nreg [3:0]              temp_m_axi_arregion_reg = 4'd0;\nreg [ARUSER_WIDTH-1:0] temp_m_axi_aruser_reg   = {ARUSER_WIDTH{1'b0}};\nreg                    temp_m_axi_arvalid_reg  = 1'b0, temp_m_axi_arvalid_next;\n\n// datapath control\nreg store_axi_ar_input_to_output;\nreg store_axi_ar_input_to_temp;\nreg store_axi_ar_temp_to_output;\n\nassign s_axi_arready  = s_axi_arready_reg;\n\nassign m_axi_arid     = m_axi_arid_reg;\nassign m_axi_araddr   = m_axi_araddr_reg;\nassign m_axi_arlen    = m_axi_arlen_reg;\nassign m_axi_arsize   = m_axi_arsize_reg;\nassign m_axi_arburst  = m_axi_arburst_reg;\nassign m_axi_arlock   = m_axi_arlock_reg;\nassign m_axi_arcache  = m_axi_arcache_reg;\nassign m_axi_arprot   = m_axi_arprot_reg;\nassign m_axi_arqos    = m_axi_arqos_reg;\nassign m_axi_arregion = m_axi_arregion_reg;\nassign m_axi_aruser   = ARUSER_ENABLE ? m_axi_aruser_reg : {ARUSER_WIDTH{1'b0}};\nassign m_axi_arvalid  = m_axi_arvalid_reg;\n\n// enable ready input next cycle if output is ready or the temp reg will not be filled on the next cycle (output reg empty or no input)\nwire s_axi_arready_early = m_axi_arready | (~temp_m_axi_arvalid_reg & (~m_axi_arvalid_reg | ~s_axi_arvalid));\n\nalways @* begin\n    // transfer sink ready state to source\n    m_axi_arvalid_next = m_axi_arvalid_reg;\n    temp_m_axi_arvalid_next = temp_m_axi_arvalid_reg;\n\n    store_axi_ar_input_to_output = 1'b0;\n    store_axi_ar_input_to_temp = 1'b0;\n    store_axi_ar_temp_to_output = 1'b0;\n\n    if (s_axi_arready_reg) begin\n        // input is ready\n        if (m_axi_arready | ~m_axi_arvalid_reg) begin\n            // output is ready or currently not valid, transfer data to output\n            m_axi_arvalid_next = s_axi_arvalid;\n            store_axi_ar_input_to_output = 1'b1;\n        end else begin\n            // output is not ready, store input in temp\n            temp_m_axi_arvalid_next = s_axi_arvalid;\n            store_axi_ar_input_to_temp = 1'b1;\n        end\n    end else if (m_axi_arready) begin\n        // input is not ready, but output is ready\n        m_axi_arvalid_next = temp_m_axi_arvalid_reg;\n        temp_m_axi_arvalid_next = 1'b0;\n        store_axi_ar_temp_to_output = 1'b1;\n    end\nend\n\nalways @(posedge clk) begin\n    if (rst) begin\n        s_axi_arready_reg <= 1'b0;\n        m_axi_arvalid_reg <= 1'b0;\n        temp_m_axi_arvalid_reg <= 1'b0;\n    end else begin\n        s_axi_arready_reg <= s_axi_arready_early;\n        m_axi_arvalid_reg <= m_axi_arvalid_next;\n        temp_m_axi_arvalid_reg <= temp_m_axi_arvalid_next;\n    end\n\n    // datapath\n    if (store_axi_ar_input_to_output) begin\n        m_axi_arid_reg <= s_axi_arid;\n        m_axi_araddr_reg <= s_axi_araddr;\n        m_axi_arlen_reg <= s_axi_arlen;\n        m_axi_arsize_reg <= s_axi_arsize;\n        m_axi_arburst_reg <= s_axi_arburst;\n        m_axi_arlock_reg <= s_axi_arlock;\n        m_axi_arcache_reg <= s_axi_arcache;\n        m_axi_arprot_reg <= s_axi_arprot;\n        m_axi_arqos_reg <= s_axi_arqos;\n        m_axi_arregion_reg <= s_axi_arregion;\n        m_axi_aruser_reg <= s_axi_aruser;\n    end else if (store_axi_ar_temp_to_output) begin\n        m_axi_arid_reg <= temp_m_axi_arid_reg;\n        m_axi_araddr_reg <= temp_m_axi_araddr_reg;\n        m_axi_arlen_reg <= temp_m_axi_arlen_reg;\n        m_axi_arsize_reg <= temp_m_axi_arsize_reg;\n        m_axi_arburst_reg <= temp_m_axi_arburst_reg;\n        m_axi_arlock_reg <= temp_m_axi_arlock_reg;\n        m_axi_arcache_reg <= temp_m_axi_arcache_reg;\n        m_axi_arprot_reg <= temp_m_axi_arprot_reg;\n        m_axi_arqos_reg <= temp_m_axi_arqos_reg;\n        m_axi_arregion_reg <= temp_m_axi_arregion_reg;\n        m_axi_aruser_reg <= temp_m_axi_aruser_reg;\n    end\n\n    if (store_axi_ar_input_to_temp) begin\n        temp_m_axi_arid_reg <= s_axi_arid;\n        temp_m_axi_araddr_reg <= s_axi_araddr;\n        temp_m_axi_arlen_reg <= s_axi_arlen;\n        temp_m_axi_arsize_reg <= s_axi_arsize;\n        temp_m_axi_arburst_reg <= s_axi_arburst;\n        temp_m_axi_arlock_reg <= s_axi_arlock;\n        temp_m_axi_arcache_reg <= s_axi_arcache;\n        temp_m_axi_arprot_reg <= s_axi_arprot;\n        temp_m_axi_arqos_reg <= s_axi_arqos;\n        temp_m_axi_arregion_reg <= s_axi_arregion;\n        temp_m_axi_aruser_reg <= s_axi_aruser;\n    end\nend\n\nend else if (AR_REG_TYPE == 1) begin\n// simple register, inserts bubble cycles\n\n// datapath registers\nreg                    s_axi_arready_reg = 1'b0;\n\nreg [ID_WIDTH-1:0]     m_axi_arid_reg     = {ID_WIDTH{1'b0}};\nreg [ADDR_WIDTH-1:0]   m_axi_araddr_reg   = {ADDR_WIDTH{1'b0}};\nreg [7:0]              m_axi_arlen_reg    = 8'd0;\nreg [2:0]              m_axi_arsize_reg   = 3'd0;\nreg [1:0]              m_axi_arburst_reg  = 2'd0;\nreg                    m_axi_arlock_reg   = 1'b0;\nreg [3:0]              m_axi_arcache_reg  = 4'd0;\nreg [2:0]              m_axi_arprot_reg   = 3'd0;\nreg [3:0]              m_axi_arqos_reg    = 4'd0;\nreg [3:0]              m_axi_arregion_reg = 4'd0;\nreg [ARUSER_WIDTH-1:0] m_axi_aruser_reg   = {ARUSER_WIDTH{1'b0}};\nreg                    m_axi_arvalid_reg  = 1'b0, m_axi_arvalid_next;\n\n// datapath control\nreg store_axi_ar_input_to_output;\n\nassign s_axi_arready  = s_axi_arready_reg;\n\nassign m_axi_arid     = m_axi_arid_reg;\nassign m_axi_araddr   = m_axi_araddr_reg;\nassign m_axi_arlen    = m_axi_arlen_reg;\nassign m_axi_arsize   = m_axi_arsize_reg;\nassign m_axi_arburst  = m_axi_arburst_reg;\nassign m_axi_arlock   = m_axi_arlock_reg;\nassign m_axi_arcache  = m_axi_arcache_reg;\nassign m_axi_arprot   = m_axi_arprot_reg;\nassign m_axi_arqos    = m_axi_arqos_reg;\nassign m_axi_arregion = m_axi_arregion_reg;\nassign m_axi_aruser   = ARUSER_ENABLE ? m_axi_aruser_reg : {ARUSER_WIDTH{1'b0}};\nassign m_axi_arvalid  = m_axi_arvalid_reg;\n\n// enable ready input next cycle if output buffer will be empty\nwire s_axi_arready_early = !m_axi_arvalid_next;\n\nalways @* begin\n    // transfer sink ready state to source\n    m_axi_arvalid_next = m_axi_arvalid_reg;\n\n    store_axi_ar_input_to_output = 1'b0;\n\n    if (s_axi_arready_reg) begin\n        m_axi_arvalid_next = s_axi_arvalid;\n        store_axi_ar_input_to_output = 1'b1;\n    end else if (m_axi_arready) begin\n        m_axi_arvalid_next = 1'b0;\n    end\nend\n\nalways @(posedge clk) begin\n    if (rst) begin\n        s_axi_arready_reg <= 1'b0;\n        m_axi_arvalid_reg <= 1'b0;\n    end else begin\n        s_axi_arready_reg <= s_axi_arready_early;\n        m_axi_arvalid_reg <= m_axi_arvalid_next;\n    end\n\n    // datapath\n    if (store_axi_ar_input_to_output) begin\n        m_axi_arid_reg <= s_axi_arid;\n        m_axi_araddr_reg <= s_axi_araddr;\n        m_axi_arlen_reg <= s_axi_arlen;\n        m_axi_arsize_reg <= s_axi_arsize;\n        m_axi_arburst_reg <= s_axi_arburst;\n        m_axi_arlock_reg <= s_axi_arlock;\n        m_axi_arcache_reg <= s_axi_arcache;\n        m_axi_arprot_reg <= s_axi_arprot;\n        m_axi_arqos_reg <= s_axi_arqos;\n        m_axi_arregion_reg <= s_axi_arregion;\n        m_axi_aruser_reg <= s_axi_aruser;\n    end\nend\n\nend else begin\n\n    // bypass AR channel\n    assign m_axi_arid = s_axi_arid;\n    assign m_axi_araddr = s_axi_araddr;\n    assign m_axi_arlen = s_axi_arlen;\n    assign m_axi_arsize = s_axi_arsize;\n    assign m_axi_arburst = s_axi_arburst;\n    assign m_axi_arlock = s_axi_arlock;\n    assign m_axi_arcache = s_axi_arcache;\n    assign m_axi_arprot = s_axi_arprot;\n    assign m_axi_arqos = s_axi_arqos;\n    assign m_axi_arregion = s_axi_arregion;\n    assign m_axi_aruser = ARUSER_ENABLE ? s_axi_aruser : {ARUSER_WIDTH{1'b0}};\n    assign m_axi_arvalid = s_axi_arvalid;\n    assign s_axi_arready = m_axi_arready;\n\nend\n\n// R channel\n\nif (R_REG_TYPE > 1) begin\n// skid buffer, no bubble cycles\n\n// datapath registers\nreg                   m_axi_rready_reg = 1'b0;\n\nreg [ID_WIDTH-1:0]    s_axi_rid_reg    = {ID_WIDTH{1'b0}};\nreg [DATA_WIDTH-1:0]  s_axi_rdata_reg  = {DATA_WIDTH{1'b0}};\nreg [1:0]             s_axi_rresp_reg  = 2'b0;\nreg                   s_axi_rlast_reg  = 1'b0;\nreg [RUSER_WIDTH-1:0] s_axi_ruser_reg  = {RUSER_WIDTH{1'b0}};\nreg                   s_axi_rvalid_reg = 1'b0, s_axi_rvalid_next;\n\nreg [ID_WIDTH-1:0]    temp_s_axi_rid_reg    = {ID_WIDTH{1'b0}};\nreg [DATA_WIDTH-1:0]  temp_s_axi_rdata_reg  = {DATA_WIDTH{1'b0}};\nreg [1:0]             temp_s_axi_rresp_reg  = 2'b0;\nreg                   temp_s_axi_rlast_reg  = 1'b0;\nreg [RUSER_WIDTH-1:0] temp_s_axi_ruser_reg  = {RUSER_WIDTH{1'b0}};\nreg                   temp_s_axi_rvalid_reg = 1'b0, temp_s_axi_rvalid_next;\n\n// datapath control\nreg store_axi_r_input_to_output;\nreg store_axi_r_input_to_temp;\nreg store_axi_r_temp_to_output;\n\nassign m_axi_rready = m_axi_rready_reg;\n\nassign s_axi_rid    = s_axi_rid_reg;\nassign s_axi_rdata  = s_axi_rdata_reg;\nassign s_axi_rresp  = s_axi_rresp_reg;\nassign s_axi_rlast  = s_axi_rlast_reg;\nassign s_axi_ruser  = RUSER_ENABLE ? s_axi_ruser_reg : {RUSER_WIDTH{1'b0}};\nassign s_axi_rvalid = s_axi_rvalid_reg;\n\n// enable ready input next cycle if output is ready or the temp reg will not be filled on the next cycle (output reg empty or no input)\nwire m_axi_rready_early = s_axi_rready | (~temp_s_axi_rvalid_reg & (~s_axi_rvalid_reg | ~m_axi_rvalid));\n\nalways @* begin\n    // transfer sink ready state to source\n    s_axi_rvalid_next = s_axi_rvalid_reg;\n    temp_s_axi_rvalid_next = temp_s_axi_rvalid_reg;\n\n    store_axi_r_input_to_output = 1'b0;\n    store_axi_r_input_to_temp = 1'b0;\n    store_axi_r_temp_to_output = 1'b0;\n\n    if (m_axi_rready_reg) begin\n        // input is ready\n        if (s_axi_rready | ~s_axi_rvalid_reg) begin\n            // output is ready or currently not valid, transfer data to output\n            s_axi_rvalid_next = m_axi_rvalid;\n            store_axi_r_input_to_output = 1'b1;\n        end else begin\n            // output is not ready, store input in temp\n            temp_s_axi_rvalid_next = m_axi_rvalid;\n            store_axi_r_input_to_temp = 1'b1;\n        end\n    end else if (s_axi_rready) begin\n        // input is not ready, but output is ready\n        s_axi_rvalid_next = temp_s_axi_rvalid_reg;\n        temp_s_axi_rvalid_next = 1'b0;\n        store_axi_r_temp_to_output = 1'b1;\n    end\nend\n\nalways @(posedge clk) begin\n    if (rst) begin\n        m_axi_rready_reg <= 1'b0;\n        s_axi_rvalid_reg <= 1'b0;\n        temp_s_axi_rvalid_reg <= 1'b0;\n    end else begin\n        m_axi_rready_reg <= m_axi_rready_early;\n        s_axi_rvalid_reg <= s_axi_rvalid_next;\n        temp_s_axi_rvalid_reg <= temp_s_axi_rvalid_next;\n    end\n\n    // datapath\n    if (store_axi_r_input_to_output) begin\n        s_axi_rid_reg   <= m_axi_rid;\n        s_axi_rdata_reg <= m_axi_rdata;\n        s_axi_rresp_reg <= m_axi_rresp;\n        s_axi_rlast_reg <= m_axi_rlast;\n        s_axi_ruser_reg <= m_axi_ruser;\n    end else if (store_axi_r_temp_to_output) begin\n        s_axi_rid_reg   <= temp_s_axi_rid_reg;\n        s_axi_rdata_reg <= temp_s_axi_rdata_reg;\n        s_axi_rresp_reg <= temp_s_axi_rresp_reg;\n        s_axi_rlast_reg <= temp_s_axi_rlast_reg;\n        s_axi_ruser_reg <= temp_s_axi_ruser_reg;\n    end\n\n    if (store_axi_r_input_to_temp) begin\n        temp_s_axi_rid_reg   <= m_axi_rid;\n        temp_s_axi_rdata_reg <= m_axi_rdata;\n        temp_s_axi_rresp_reg <= m_axi_rresp;\n        temp_s_axi_rlast_reg <= m_axi_rlast;\n        temp_s_axi_ruser_reg <= m_axi_ruser;\n    end\nend\n\nend else if (R_REG_TYPE == 1) begin\n// simple register, inserts bubble cycles\n\n// datapath registers\nreg                   m_axi_rready_reg = 1'b0;\n\nreg [ID_WIDTH-1:0]    s_axi_rid_reg    = {ID_WIDTH{1'b0}};\nreg [DATA_WIDTH-1:0]  s_axi_rdata_reg  = {DATA_WIDTH{1'b0}};\nreg [1:0]             s_axi_rresp_reg  = 2'b0;\nreg                   s_axi_rlast_reg  = 1'b0;\nreg [RUSER_WIDTH-1:0] s_axi_ruser_reg  = {RUSER_WIDTH{1'b0}};\nreg                   s_axi_rvalid_reg = 1'b0, s_axi_rvalid_next;\n\n// datapath control\nreg store_axi_r_input_to_output;\n\nassign m_axi_rready = m_axi_rready_reg;\n\nassign s_axi_rid    = s_axi_rid_reg;\nassign s_axi_rdata  = s_axi_rdata_reg;\nassign s_axi_rresp  = s_axi_rresp_reg;\nassign s_axi_rlast  = s_axi_rlast_reg;\nassign s_axi_ruser  = RUSER_ENABLE ? s_axi_ruser_reg : {RUSER_WIDTH{1'b0}};\nassign s_axi_rvalid = s_axi_rvalid_reg;\n\n// enable ready input next cycle if output buffer will be empty\nwire m_axi_rready_early = !s_axi_rvalid_next;\n\nalways @* begin\n    // transfer sink ready state to source\n    s_axi_rvalid_next = s_axi_rvalid_reg;\n\n    store_axi_r_input_to_output = 1'b0;\n\n    if (m_axi_rready_reg) begin\n        s_axi_rvalid_next = m_axi_rvalid;\n        store_axi_r_input_to_output = 1'b1;\n    end else if (s_axi_rready) begin\n        s_axi_rvalid_next = 1'b0;\n    end\nend\n\nalways @(posedge clk) begin\n    if (rst) begin\n        m_axi_rready_reg <= 1'b0;\n        s_axi_rvalid_reg <= 1'b0;\n    end else begin\n        m_axi_rready_reg <= m_axi_rready_early;\n        s_axi_rvalid_reg <= s_axi_rvalid_next;\n    end\n\n    // datapath\n    if (store_axi_r_input_to_output) begin\n        s_axi_rid_reg   <= m_axi_rid;\n        s_axi_rdata_reg <= m_axi_rdata;\n        s_axi_rresp_reg <= m_axi_rresp;\n        s_axi_rlast_reg <= m_axi_rlast;\n        s_axi_ruser_reg <= m_axi_ruser;\n    end\nend\n\nend else begin\n\n    // bypass R channel\n    assign s_axi_rid = m_axi_rid;\n    assign s_axi_rdata = m_axi_rdata;\n    assign s_axi_rresp = m_axi_rresp;\n    assign s_axi_rlast = m_axi_rlast;\n    assign s_axi_ruser = RUSER_ENABLE ? m_axi_ruser : {RUSER_WIDTH{1'b0}};\n    assign s_axi_rvalid = m_axi_rvalid;\n    assign m_axi_rready = s_axi_rready;\n\nend\n\nendgenerate\n\nendmodule\n\n`resetall\n","lang":"verilog"};
processSrcData(g_data);