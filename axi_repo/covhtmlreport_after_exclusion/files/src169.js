var g_data = {"name":"axi_register_wr.v","src":"/*\n\nCopyright (c) 2018 Alex Forencich\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n*/\n\n// Language: Verilog 2001\n\n`resetall\n`timescale 1ns / 1ps\n`default_nettype none\n\n/*\n * AXI4 register (write)\n */\nmodule axi_register_wr #\n(\n    // Width of data bus in bits\n    parameter DATA_WIDTH = 32,\n    // Width of address bus in bits\n    parameter ADDR_WIDTH = 32,\n    // Width of wstrb (width of data bus in words)\n    parameter STRB_WIDTH = (DATA_WIDTH/8),\n    // Width of ID signal\n    parameter ID_WIDTH = 8,\n    // Propagate awuser signal\n    parameter AWUSER_ENABLE = 0,\n    // Width of awuser signal\n    parameter AWUSER_WIDTH = 1,\n    // Propagate wuser signal\n    parameter WUSER_ENABLE = 0,\n    // Width of wuser signal\n    parameter WUSER_WIDTH = 1,\n    // Propagate buser signal\n    parameter BUSER_ENABLE = 0,\n    // Width of buser signal\n    parameter BUSER_WIDTH = 1,\n    // AW channel register type\n    // 0 to bypass, 1 for simple buffer, 2 for skid buffer\n    parameter AW_REG_TYPE = 1,\n    // W channel register type\n    // 0 to bypass, 1 for simple buffer, 2 for skid buffer\n    parameter W_REG_TYPE = 2,\n    // B channel register type\n    // 0 to bypass, 1 for simple buffer, 2 for skid buffer\n    parameter B_REG_TYPE = 1\n)\n(\n    input  wire                     clk,\n    input  wire                     rst,\n\n    /*\n     * AXI slave interface\n     */\n    input  wire [ID_WIDTH-1:0]      s_axi_awid,\n    input  wire [ADDR_WIDTH-1:0]    s_axi_awaddr,\n    input  wire [7:0]               s_axi_awlen,\n    input  wire [2:0]               s_axi_awsize,\n    input  wire [1:0]               s_axi_awburst,\n    input  wire                     s_axi_awlock,\n    input  wire [3:0]               s_axi_awcache,\n    input  wire [2:0]               s_axi_awprot,\n    input  wire [3:0]               s_axi_awqos,\n    input  wire [3:0]               s_axi_awregion,\n    input  wire [AWUSER_WIDTH-1:0]  s_axi_awuser,\n    input  wire                     s_axi_awvalid,\n    output wire                     s_axi_awready,\n    input  wire [DATA_WIDTH-1:0]    s_axi_wdata,\n    input  wire [STRB_WIDTH-1:0]    s_axi_wstrb,\n    input  wire                     s_axi_wlast,\n    input  wire [WUSER_WIDTH-1:0]   s_axi_wuser,\n    input  wire                     s_axi_wvalid,\n    output wire                     s_axi_wready,\n    output wire [ID_WIDTH-1:0]      s_axi_bid,\n    output wire [1:0]               s_axi_bresp,\n    output wire [BUSER_WIDTH-1:0]   s_axi_buser,\n    output wire                     s_axi_bvalid,\n    input  wire                     s_axi_bready,\n\n    /*\n     * AXI master interface\n     */\n    output wire [ID_WIDTH-1:0]      m_axi_awid,\n    output wire [ADDR_WIDTH-1:0]    m_axi_awaddr,\n    output wire [7:0]               m_axi_awlen,\n    output wire [2:0]               m_axi_awsize,\n    output wire [1:0]               m_axi_awburst,\n    output wire                     m_axi_awlock,\n    output wire [3:0]               m_axi_awcache,\n    output wire [2:0]               m_axi_awprot,\n    output wire [3:0]               m_axi_awqos,\n    output wire [3:0]               m_axi_awregion,\n    output wire [AWUSER_WIDTH-1:0]  m_axi_awuser,\n    output wire                     m_axi_awvalid,\n    input  wire                     m_axi_awready,\n    output wire [DATA_WIDTH-1:0]    m_axi_wdata,\n    output wire [STRB_WIDTH-1:0]    m_axi_wstrb,\n    output wire                     m_axi_wlast,\n    output wire [WUSER_WIDTH-1:0]   m_axi_wuser,\n    output wire                     m_axi_wvalid,\n    input  wire                     m_axi_wready,\n    input  wire [ID_WIDTH-1:0]      m_axi_bid,\n    input  wire [1:0]               m_axi_bresp,\n    input  wire [BUSER_WIDTH-1:0]   m_axi_buser,\n    input  wire                     m_axi_bvalid,\n    output wire                     m_axi_bready\n);\n\ngenerate\n\n// AW channel\n\nif (AW_REG_TYPE > 1) begin\n// skid buffer, no bubble cycles\n\n// datapath registers\nreg                    s_axi_awready_reg = 1'b0;\n\nreg [ID_WIDTH-1:0]     m_axi_awid_reg     = {ID_WIDTH{1'b0}};\nreg [ADDR_WIDTH-1:0]   m_axi_awaddr_reg   = {ADDR_WIDTH{1'b0}};\nreg [7:0]              m_axi_awlen_reg    = 8'd0;\nreg [2:0]              m_axi_awsize_reg   = 3'd0;\nreg [1:0]              m_axi_awburst_reg  = 2'd0;\nreg                    m_axi_awlock_reg   = 1'b0;\nreg [3:0]              m_axi_awcache_reg  = 4'd0;\nreg [2:0]              m_axi_awprot_reg   = 3'd0;\nreg [3:0]              m_axi_awqos_reg    = 4'd0;\nreg [3:0]              m_axi_awregion_reg = 4'd0;\nreg [AWUSER_WIDTH-1:0] m_axi_awuser_reg   = {AWUSER_WIDTH{1'b0}};\nreg                    m_axi_awvalid_reg  = 1'b0, m_axi_awvalid_next;\n\nreg [ID_WIDTH-1:0]     temp_m_axi_awid_reg     = {ID_WIDTH{1'b0}};\nreg [ADDR_WIDTH-1:0]   temp_m_axi_awaddr_reg   = {ADDR_WIDTH{1'b0}};\nreg [7:0]              temp_m_axi_awlen_reg    = 8'd0;\nreg [2:0]              temp_m_axi_awsize_reg   = 3'd0;\nreg [1:0]              temp_m_axi_awburst_reg  = 2'd0;\nreg                    temp_m_axi_awlock_reg   = 1'b0;\nreg [3:0]              temp_m_axi_awcache_reg  = 4'd0;\nreg [2:0]              temp_m_axi_awprot_reg   = 3'd0;\nreg [3:0]              temp_m_axi_awqos_reg    = 4'd0;\nreg [3:0]              temp_m_axi_awregion_reg = 4'd0;\nreg [AWUSER_WIDTH-1:0] temp_m_axi_awuser_reg   = {AWUSER_WIDTH{1'b0}};\nreg                    temp_m_axi_awvalid_reg  = 1'b0, temp_m_axi_awvalid_next;\n\n// datapath control\nreg store_axi_aw_input_to_output;\nreg store_axi_aw_input_to_temp;\nreg store_axi_aw_temp_to_output;\n\nassign s_axi_awready  = s_axi_awready_reg;\n\nassign m_axi_awid     = m_axi_awid_reg;\nassign m_axi_awaddr   = m_axi_awaddr_reg;\nassign m_axi_awlen    = m_axi_awlen_reg;\nassign m_axi_awsize   = m_axi_awsize_reg;\nassign m_axi_awburst  = m_axi_awburst_reg;\nassign m_axi_awlock   = m_axi_awlock_reg;\nassign m_axi_awcache  = m_axi_awcache_reg;\nassign m_axi_awprot   = m_axi_awprot_reg;\nassign m_axi_awqos    = m_axi_awqos_reg;\nassign m_axi_awregion = m_axi_awregion_reg;\nassign m_axi_awuser   = AWUSER_ENABLE ? m_axi_awuser_reg : {AWUSER_WIDTH{1'b0}};\nassign m_axi_awvalid  = m_axi_awvalid_reg;\n\n// enable ready input next cycle if output is ready or the temp reg will not be filled on the next cycle (output reg empty or no input)\nwire s_axi_awready_early = m_axi_awready | (~temp_m_axi_awvalid_reg & (~m_axi_awvalid_reg | ~s_axi_awvalid));\n\nalways @* begin\n    // transfer sink ready state to source\n    m_axi_awvalid_next = m_axi_awvalid_reg;\n    temp_m_axi_awvalid_next = temp_m_axi_awvalid_reg;\n\n    store_axi_aw_input_to_output = 1'b0;\n    store_axi_aw_input_to_temp = 1'b0;\n    store_axi_aw_temp_to_output = 1'b0;\n\n    if (s_axi_awready_reg) begin\n        // input is ready\n        if (m_axi_awready | ~m_axi_awvalid_reg) begin\n            // output is ready or currently not valid, transfer data to output\n            m_axi_awvalid_next = s_axi_awvalid;\n            store_axi_aw_input_to_output = 1'b1;\n        end else begin\n            // output is not ready, store input in temp\n            temp_m_axi_awvalid_next = s_axi_awvalid;\n            store_axi_aw_input_to_temp = 1'b1;\n        end\n    end else if (m_axi_awready) begin\n        // input is not ready, but output is ready\n        m_axi_awvalid_next = temp_m_axi_awvalid_reg;\n        temp_m_axi_awvalid_next = 1'b0;\n        store_axi_aw_temp_to_output = 1'b1;\n    end\nend\n\nalways @(posedge clk) begin\n    if (rst) begin\n        s_axi_awready_reg <= 1'b0;\n        m_axi_awvalid_reg <= 1'b0;\n        temp_m_axi_awvalid_reg <= 1'b0;\n    end else begin\n        s_axi_awready_reg <= s_axi_awready_early;\n        m_axi_awvalid_reg <= m_axi_awvalid_next;\n        temp_m_axi_awvalid_reg <= temp_m_axi_awvalid_next;\n    end\n\n    // datapath\n    if (store_axi_aw_input_to_output) begin\n        m_axi_awid_reg <= s_axi_awid;\n        m_axi_awaddr_reg <= s_axi_awaddr;\n        m_axi_awlen_reg <= s_axi_awlen;\n        m_axi_awsize_reg <= s_axi_awsize;\n        m_axi_awburst_reg <= s_axi_awburst;\n        m_axi_awlock_reg <= s_axi_awlock;\n        m_axi_awcache_reg <= s_axi_awcache;\n        m_axi_awprot_reg <= s_axi_awprot;\n        m_axi_awqos_reg <= s_axi_awqos;\n        m_axi_awregion_reg <= s_axi_awregion;\n        m_axi_awuser_reg <= s_axi_awuser;\n    end else if (store_axi_aw_temp_to_output) begin\n        m_axi_awid_reg <= temp_m_axi_awid_reg;\n        m_axi_awaddr_reg <= temp_m_axi_awaddr_reg;\n        m_axi_awlen_reg <= temp_m_axi_awlen_reg;\n        m_axi_awsize_reg <= temp_m_axi_awsize_reg;\n        m_axi_awburst_reg <= temp_m_axi_awburst_reg;\n        m_axi_awlock_reg <= temp_m_axi_awlock_reg;\n        m_axi_awcache_reg <= temp_m_axi_awcache_reg;\n        m_axi_awprot_reg <= temp_m_axi_awprot_reg;\n        m_axi_awqos_reg <= temp_m_axi_awqos_reg;\n        m_axi_awregion_reg <= temp_m_axi_awregion_reg;\n        m_axi_awuser_reg <= temp_m_axi_awuser_reg;\n    end\n\n    if (store_axi_aw_input_to_temp) begin\n        temp_m_axi_awid_reg <= s_axi_awid;\n        temp_m_axi_awaddr_reg <= s_axi_awaddr;\n        temp_m_axi_awlen_reg <= s_axi_awlen;\n        temp_m_axi_awsize_reg <= s_axi_awsize;\n        temp_m_axi_awburst_reg <= s_axi_awburst;\n        temp_m_axi_awlock_reg <= s_axi_awlock;\n        temp_m_axi_awcache_reg <= s_axi_awcache;\n        temp_m_axi_awprot_reg <= s_axi_awprot;\n        temp_m_axi_awqos_reg <= s_axi_awqos;\n        temp_m_axi_awregion_reg <= s_axi_awregion;\n        temp_m_axi_awuser_reg <= s_axi_awuser;\n    end\nend\n\nend else if (AW_REG_TYPE == 1) begin\n// simple register, inserts bubble cycles\n\n// datapath registers\nreg                    s_axi_awready_reg = 1'b0;\n\nreg [ID_WIDTH-1:0]     m_axi_awid_reg     = {ID_WIDTH{1'b0}};\nreg [ADDR_WIDTH-1:0]   m_axi_awaddr_reg   = {ADDR_WIDTH{1'b0}};\nreg [7:0]              m_axi_awlen_reg    = 8'd0;\nreg [2:0]              m_axi_awsize_reg   = 3'd0;\nreg [1:0]              m_axi_awburst_reg  = 2'd0;\nreg                    m_axi_awlock_reg   = 1'b0;\nreg [3:0]              m_axi_awcache_reg  = 4'd0;\nreg [2:0]              m_axi_awprot_reg   = 3'd0;\nreg [3:0]              m_axi_awqos_reg    = 4'd0;\nreg [3:0]              m_axi_awregion_reg = 4'd0;\nreg [AWUSER_WIDTH-1:0] m_axi_awuser_reg   = {AWUSER_WIDTH{1'b0}};\nreg                    m_axi_awvalid_reg  = 1'b0, m_axi_awvalid_next;\n\n// datapath control\nreg store_axi_aw_input_to_output;\n\nassign s_axi_awready  = s_axi_awready_reg;\n\nassign m_axi_awid     = m_axi_awid_reg;\nassign m_axi_awaddr   = m_axi_awaddr_reg;\nassign m_axi_awlen    = m_axi_awlen_reg;\nassign m_axi_awsize   = m_axi_awsize_reg;\nassign m_axi_awburst  = m_axi_awburst_reg;\nassign m_axi_awlock   = m_axi_awlock_reg;\nassign m_axi_awcache  = m_axi_awcache_reg;\nassign m_axi_awprot   = m_axi_awprot_reg;\nassign m_axi_awqos    = m_axi_awqos_reg;\nassign m_axi_awregion = m_axi_awregion_reg;\nassign m_axi_awuser   = AWUSER_ENABLE ? m_axi_awuser_reg : {AWUSER_WIDTH{1'b0}};\nassign m_axi_awvalid  = m_axi_awvalid_reg;\n\n// enable ready input next cycle if output buffer will be empty\nwire s_axi_awready_eawly = !m_axi_awvalid_next;\n\nalways @* begin\n    // transfer sink ready state to source\n    m_axi_awvalid_next = m_axi_awvalid_reg;\n\n    store_axi_aw_input_to_output = 1'b0;\n\n    if (s_axi_awready_reg) begin\n        m_axi_awvalid_next = s_axi_awvalid;\n        store_axi_aw_input_to_output = 1'b1;\n    end else if (m_axi_awready) begin\n        m_axi_awvalid_next = 1'b0;\n    end\nend\n\nalways @(posedge clk) begin\n    if (rst) begin\n        s_axi_awready_reg <= 1'b0;\n        m_axi_awvalid_reg <= 1'b0;\n    end else begin\n        s_axi_awready_reg <= s_axi_awready_eawly;\n        m_axi_awvalid_reg <= m_axi_awvalid_next;\n    end\n\n    // datapath\n    if (store_axi_aw_input_to_output) begin\n        m_axi_awid_reg <= s_axi_awid;\n        m_axi_awaddr_reg <= s_axi_awaddr;\n        m_axi_awlen_reg <= s_axi_awlen;\n        m_axi_awsize_reg <= s_axi_awsize;\n        m_axi_awburst_reg <= s_axi_awburst;\n        m_axi_awlock_reg <= s_axi_awlock;\n        m_axi_awcache_reg <= s_axi_awcache;\n        m_axi_awprot_reg <= s_axi_awprot;\n        m_axi_awqos_reg <= s_axi_awqos;\n        m_axi_awregion_reg <= s_axi_awregion;\n        m_axi_awuser_reg <= s_axi_awuser;\n    end\nend\n\nend else begin\n\n    // bypass AW channel\n    assign m_axi_awid = s_axi_awid;\n    assign m_axi_awaddr = s_axi_awaddr;\n    assign m_axi_awlen = s_axi_awlen;\n    assign m_axi_awsize = s_axi_awsize;\n    assign m_axi_awburst = s_axi_awburst;\n    assign m_axi_awlock = s_axi_awlock;\n    assign m_axi_awcache = s_axi_awcache;\n    assign m_axi_awprot = s_axi_awprot;\n    assign m_axi_awqos = s_axi_awqos;\n    assign m_axi_awregion = s_axi_awregion;\n    assign m_axi_awuser = AWUSER_ENABLE ? s_axi_awuser : {AWUSER_WIDTH{1'b0}};\n    assign m_axi_awvalid = s_axi_awvalid;\n    assign s_axi_awready = m_axi_awready;\n\nend\n\n// W channel\n\nif (W_REG_TYPE > 1) begin\n// skid buffer, no bubble cycles\n\n// datapath registers\nreg                   s_axi_wready_reg = 1'b0;\n\nreg [DATA_WIDTH-1:0]  m_axi_wdata_reg  = {DATA_WIDTH{1'b0}};\nreg [STRB_WIDTH-1:0]  m_axi_wstrb_reg  = {STRB_WIDTH{1'b0}};\nreg                   m_axi_wlast_reg  = 1'b0;\nreg [WUSER_WIDTH-1:0] m_axi_wuser_reg  = {WUSER_WIDTH{1'b0}};\nreg                   m_axi_wvalid_reg = 1'b0, m_axi_wvalid_next;\n\nreg [DATA_WIDTH-1:0]  temp_m_axi_wdata_reg  = {DATA_WIDTH{1'b0}};\nreg [STRB_WIDTH-1:0]  temp_m_axi_wstrb_reg  = {STRB_WIDTH{1'b0}};\nreg                   temp_m_axi_wlast_reg  = 1'b0;\nreg [WUSER_WIDTH-1:0] temp_m_axi_wuser_reg  = {WUSER_WIDTH{1'b0}};\nreg                   temp_m_axi_wvalid_reg = 1'b0, temp_m_axi_wvalid_next;\n\n// datapath control\nreg store_axi_w_input_to_output;\nreg store_axi_w_input_to_temp;\nreg store_axi_w_temp_to_output;\n\nassign s_axi_wready = s_axi_wready_reg;\n\nassign m_axi_wdata  = m_axi_wdata_reg;\nassign m_axi_wstrb  = m_axi_wstrb_reg;\nassign m_axi_wlast  = m_axi_wlast_reg;\nassign m_axi_wuser  = WUSER_ENABLE ? m_axi_wuser_reg : {WUSER_WIDTH{1'b0}};\nassign m_axi_wvalid = m_axi_wvalid_reg;\n\n// enable ready input next cycle if output is ready or the temp reg will not be filled on the next cycle (output reg empty or no input)\nwire s_axi_wready_early = m_axi_wready | (~temp_m_axi_wvalid_reg & (~m_axi_wvalid_reg | ~s_axi_wvalid));\n\nalways @* begin\n    // transfer sink ready state to source\n    m_axi_wvalid_next = m_axi_wvalid_reg;\n    temp_m_axi_wvalid_next = temp_m_axi_wvalid_reg;\n\n    store_axi_w_input_to_output = 1'b0;\n    store_axi_w_input_to_temp = 1'b0;\n    store_axi_w_temp_to_output = 1'b0;\n\n    if (s_axi_wready_reg) begin\n        // input is ready\n        if (m_axi_wready | ~m_axi_wvalid_reg) begin\n            // output is ready or currently not valid, transfer data to output\n            m_axi_wvalid_next = s_axi_wvalid;\n            store_axi_w_input_to_output = 1'b1;\n        end else begin\n            // output is not ready, store input in temp\n            temp_m_axi_wvalid_next = s_axi_wvalid;\n            store_axi_w_input_to_temp = 1'b1;\n        end\n    end else if (m_axi_wready) begin\n        // input is not ready, but output is ready\n        m_axi_wvalid_next = temp_m_axi_wvalid_reg;\n        temp_m_axi_wvalid_next = 1'b0;\n        store_axi_w_temp_to_output = 1'b1;\n    end\nend\n\nalways @(posedge clk) begin\n    if (rst) begin\n        s_axi_wready_reg <= 1'b0;\n        m_axi_wvalid_reg <= 1'b0;\n        temp_m_axi_wvalid_reg <= 1'b0;\n    end else begin\n        s_axi_wready_reg <= s_axi_wready_early;\n        m_axi_wvalid_reg <= m_axi_wvalid_next;\n        temp_m_axi_wvalid_reg <= temp_m_axi_wvalid_next;\n    end\n\n    // datapath\n    if (store_axi_w_input_to_output) begin\n        m_axi_wdata_reg <= s_axi_wdata;\n        m_axi_wstrb_reg <= s_axi_wstrb;\n        m_axi_wlast_reg <= s_axi_wlast;\n        m_axi_wuser_reg <= s_axi_wuser;\n    end else if (store_axi_w_temp_to_output) begin\n        m_axi_wdata_reg <= temp_m_axi_wdata_reg;\n        m_axi_wstrb_reg <= temp_m_axi_wstrb_reg;\n        m_axi_wlast_reg <= temp_m_axi_wlast_reg;\n        m_axi_wuser_reg <= temp_m_axi_wuser_reg;\n    end\n\n    if (store_axi_w_input_to_temp) begin\n        temp_m_axi_wdata_reg <= s_axi_wdata;\n        temp_m_axi_wstrb_reg <= s_axi_wstrb;\n        temp_m_axi_wlast_reg <= s_axi_wlast;\n        temp_m_axi_wuser_reg <= s_axi_wuser;\n    end\nend\n\nend else if (W_REG_TYPE == 1) begin\n// simple register, inserts bubble cycles\n\n// datapath registers\nreg                   s_axi_wready_reg = 1'b0;\n\nreg [DATA_WIDTH-1:0]  m_axi_wdata_reg  = {DATA_WIDTH{1'b0}};\nreg [STRB_WIDTH-1:0]  m_axi_wstrb_reg  = {STRB_WIDTH{1'b0}};\nreg                   m_axi_wlast_reg  = 1'b0;\nreg [WUSER_WIDTH-1:0] m_axi_wuser_reg  = {WUSER_WIDTH{1'b0}};\nreg                   m_axi_wvalid_reg = 1'b0, m_axi_wvalid_next;\n\n// datapath control\nreg store_axi_w_input_to_output;\n\nassign s_axi_wready = s_axi_wready_reg;\n\nassign m_axi_wdata  = m_axi_wdata_reg;\nassign m_axi_wstrb  = m_axi_wstrb_reg;\nassign m_axi_wlast  = m_axi_wlast_reg;\nassign m_axi_wuser  = WUSER_ENABLE ? m_axi_wuser_reg : {WUSER_WIDTH{1'b0}};\nassign m_axi_wvalid = m_axi_wvalid_reg;\n\n// enable ready input next cycle if output buffer will be empty\nwire s_axi_wready_ewly = !m_axi_wvalid_next;\n\nalways @* begin\n    // transfer sink ready state to source\n    m_axi_wvalid_next = m_axi_wvalid_reg;\n\n    store_axi_w_input_to_output = 1'b0;\n\n    if (s_axi_wready_reg) begin\n        m_axi_wvalid_next = s_axi_wvalid;\n        store_axi_w_input_to_output = 1'b1;\n    end else if (m_axi_wready) begin\n        m_axi_wvalid_next = 1'b0;\n    end\nend\n\nalways @(posedge clk) begin\n    if (rst) begin\n        s_axi_wready_reg <= 1'b0;\n        m_axi_wvalid_reg <= 1'b0;\n    end else begin\n        s_axi_wready_reg <= s_axi_wready_ewly;\n        m_axi_wvalid_reg <= m_axi_wvalid_next;\n    end\n\n    // datapath\n    if (store_axi_w_input_to_output) begin\n        m_axi_wdata_reg <= s_axi_wdata;\n        m_axi_wstrb_reg <= s_axi_wstrb;\n        m_axi_wlast_reg <= s_axi_wlast;\n        m_axi_wuser_reg <= s_axi_wuser;\n    end\nend\n\nend else begin\n\n    // bypass W channel\n    assign m_axi_wdata = s_axi_wdata;\n    assign m_axi_wstrb = s_axi_wstrb;\n    assign m_axi_wlast = s_axi_wlast;\n    assign m_axi_wuser = WUSER_ENABLE ? s_axi_wuser : {WUSER_WIDTH{1'b0}};\n    assign m_axi_wvalid = s_axi_wvalid;\n    assign s_axi_wready = m_axi_wready;\n\nend\n\n// B channel\n\nif (B_REG_TYPE > 1) begin\n// skid buffer, no bubble cycles\n\n// datapath registers\nreg                   m_axi_bready_reg = 1'b0;\n\nreg [ID_WIDTH-1:0]    s_axi_bid_reg    = {ID_WIDTH{1'b0}};\nreg [1:0]             s_axi_bresp_reg  = 2'b0;\nreg [BUSER_WIDTH-1:0] s_axi_buser_reg  = {BUSER_WIDTH{1'b0}};\nreg                   s_axi_bvalid_reg = 1'b0, s_axi_bvalid_next;\n\nreg [ID_WIDTH-1:0]    temp_s_axi_bid_reg    = {ID_WIDTH{1'b0}};\nreg [1:0]             temp_s_axi_bresp_reg  = 2'b0;\nreg [BUSER_WIDTH-1:0] temp_s_axi_buser_reg  = {BUSER_WIDTH{1'b0}};\nreg                   temp_s_axi_bvalid_reg = 1'b0, temp_s_axi_bvalid_next;\n\n// datapath control\nreg store_axi_b_input_to_output;\nreg store_axi_b_input_to_temp;\nreg store_axi_b_temp_to_output;\n\nassign m_axi_bready = m_axi_bready_reg;\n\nassign s_axi_bid    = s_axi_bid_reg;\nassign s_axi_bresp  = s_axi_bresp_reg;\nassign s_axi_buser  = BUSER_ENABLE ? s_axi_buser_reg : {BUSER_WIDTH{1'b0}};\nassign s_axi_bvalid = s_axi_bvalid_reg;\n\n// enable ready input next cycle if output is ready or the temp reg will not be filled on the next cycle (output reg empty or no input)\nwire m_axi_bready_early = s_axi_bready | (~temp_s_axi_bvalid_reg & (~s_axi_bvalid_reg | ~m_axi_bvalid));\n\nalways @* begin\n    // transfer sink ready state to source\n    s_axi_bvalid_next = s_axi_bvalid_reg;\n    temp_s_axi_bvalid_next = temp_s_axi_bvalid_reg;\n\n    store_axi_b_input_to_output = 1'b0;\n    store_axi_b_input_to_temp = 1'b0;\n    store_axi_b_temp_to_output = 1'b0;\n\n    if (m_axi_bready_reg) begin\n        // input is ready\n        if (s_axi_bready | ~s_axi_bvalid_reg) begin\n            // output is ready or currently not valid, transfer data to output\n            s_axi_bvalid_next = m_axi_bvalid;\n            store_axi_b_input_to_output = 1'b1;\n        end else begin\n            // output is not ready, store input in temp\n            temp_s_axi_bvalid_next = m_axi_bvalid;\n            store_axi_b_input_to_temp = 1'b1;\n        end\n    end else if (s_axi_bready) begin\n        // input is not ready, but output is ready\n        s_axi_bvalid_next = temp_s_axi_bvalid_reg;\n        temp_s_axi_bvalid_next = 1'b0;\n        store_axi_b_temp_to_output = 1'b1;\n    end\nend\n\nalways @(posedge clk) begin\n    if (rst) begin\n        m_axi_bready_reg <= 1'b0;\n        s_axi_bvalid_reg <= 1'b0;\n        temp_s_axi_bvalid_reg <= 1'b0;\n    end else begin\n        m_axi_bready_reg <= m_axi_bready_early;\n        s_axi_bvalid_reg <= s_axi_bvalid_next;\n        temp_s_axi_bvalid_reg <= temp_s_axi_bvalid_next;\n    end\n\n    // datapath\n    if (store_axi_b_input_to_output) begin\n        s_axi_bid_reg   <= m_axi_bid;\n        s_axi_bresp_reg <= m_axi_bresp;\n        s_axi_buser_reg <= m_axi_buser;\n    end else if (store_axi_b_temp_to_output) begin\n        s_axi_bid_reg   <= temp_s_axi_bid_reg;\n        s_axi_bresp_reg <= temp_s_axi_bresp_reg;\n        s_axi_buser_reg <= temp_s_axi_buser_reg;\n    end\n\n    if (store_axi_b_input_to_temp) begin\n        temp_s_axi_bid_reg   <= m_axi_bid;\n        temp_s_axi_bresp_reg <= m_axi_bresp;\n        temp_s_axi_buser_reg <= m_axi_buser;\n    end\nend\n\nend else if (B_REG_TYPE == 1) begin\n// simple register, inserts bubble cycles\n\n// datapath registers\nreg                   m_axi_bready_reg = 1'b0;\n\nreg [ID_WIDTH-1:0]    s_axi_bid_reg    = {ID_WIDTH{1'b0}};\nreg [1:0]             s_axi_bresp_reg  = 2'b0;\nreg [BUSER_WIDTH-1:0] s_axi_buser_reg  = {BUSER_WIDTH{1'b0}};\nreg                   s_axi_bvalid_reg = 1'b0, s_axi_bvalid_next;\n\n// datapath control\nreg store_axi_b_input_to_output;\n\nassign m_axi_bready = m_axi_bready_reg;\n\nassign s_axi_bid    = s_axi_bid_reg;\nassign s_axi_bresp  = s_axi_bresp_reg;\nassign s_axi_buser  = BUSER_ENABLE ? s_axi_buser_reg : {BUSER_WIDTH{1'b0}};\nassign s_axi_bvalid = s_axi_bvalid_reg;\n\n// enable ready input next cycle if output buffer will be empty\nwire m_axi_bready_early = !s_axi_bvalid_next;\n\nalways @* begin\n    // transfer sink ready state to source\n    s_axi_bvalid_next = s_axi_bvalid_reg;\n\n    store_axi_b_input_to_output = 1'b0;\n\n    if (m_axi_bready_reg) begin\n        s_axi_bvalid_next = m_axi_bvalid;\n        store_axi_b_input_to_output = 1'b1;\n    end else if (s_axi_bready) begin\n        s_axi_bvalid_next = 1'b0;\n    end\nend\n\nalways @(posedge clk) begin\n    if (rst) begin\n        m_axi_bready_reg <= 1'b0;\n        s_axi_bvalid_reg <= 1'b0;\n    end else begin\n        m_axi_bready_reg <= m_axi_bready_early;\n        s_axi_bvalid_reg <= s_axi_bvalid_next;\n    end\n\n    // datapath\n    if (store_axi_b_input_to_output) begin\n        s_axi_bid_reg   <= m_axi_bid;\n        s_axi_bresp_reg <= m_axi_bresp;\n        s_axi_buser_reg <= m_axi_buser;\n    end\nend\n\nend else begin\n\n    // bypass B channel\n    assign s_axi_bid = m_axi_bid;\n    assign s_axi_bresp = m_axi_bresp;\n    assign s_axi_buser = BUSER_ENABLE ? m_axi_buser : {BUSER_WIDTH{1'b0}};\n    assign s_axi_bvalid = m_axi_bvalid;\n    assign m_axi_bready = s_axi_bready;\n\nend\n\nendgenerate\n\nendmodule\n\n`resetall\n","lang":"verilog"};
processSrcData(g_data);