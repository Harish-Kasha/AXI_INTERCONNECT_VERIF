var g_data = {"name":"arbiter.v","src":"/*\n\nCopyright (c) 2014-2021 Alex Forencich\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n*/\n\n// Language: Verilog 2001\n\n`resetall\n`timescale 1ns / 1ps\n`default_nettype none\n\n/*\n * Arbiter module\n */\nmodule arbiter #\n(\n    parameter PORTS = 4,\n    // select round robin arbitration\n    parameter ARB_TYPE_ROUND_ROBIN = 0,\n    // blocking arbiter enable\n    parameter ARB_BLOCK = 0,\n    // block on acknowledge assert when nonzero, request deassert when 0\n    parameter ARB_BLOCK_ACK = 1,\n    // LSB priority selection\n    parameter ARB_LSB_HIGH_PRIORITY = 0\n)\n(\n    input  wire                     clk,\n    input  wire                     rst,\n\n    input  wire [PORTS-1:0]         request,\n    input  wire [PORTS-1:0]         acknowledge,\n\n    output wire [PORTS-1:0]         grant,\n    output wire                     grant_valid,\n    output wire [$clog2(PORTS)-1:0] grant_encoded\n);\n\nreg [PORTS-1:0] grant_reg = 0, grant_next;\nreg grant_valid_reg = 0, grant_valid_next;\nreg [$clog2(PORTS)-1:0] grant_encoded_reg = 0, grant_encoded_next;\n\nassign grant_valid = grant_valid_reg;\nassign grant = grant_reg;\nassign grant_encoded = grant_encoded_reg;\n\nwire request_valid;\nwire [$clog2(PORTS)-1:0] request_index;\nwire [PORTS-1:0] request_mask;\n\npriority_encoder #(\n    .WIDTH(PORTS),\n    .LSB_HIGH_PRIORITY(ARB_LSB_HIGH_PRIORITY)\n)\npriority_encoder_inst (\n    .input_unencoded(request),\n    .output_valid(request_valid),\n    .output_encoded(request_index),\n    .output_unencoded(request_mask)\n);\n\nreg [PORTS-1:0] mask_reg = 0, mask_next;\n\nwire masked_request_valid;\nwire [$clog2(PORTS)-1:0] masked_request_index;\nwire [PORTS-1:0] masked_request_mask;\n\npriority_encoder #(\n    .WIDTH(PORTS),\n    .LSB_HIGH_PRIORITY(ARB_LSB_HIGH_PRIORITY)\n)\npriority_encoder_masked (\n    .input_unencoded(request & mask_reg),\n    .output_valid(masked_request_valid),\n    .output_encoded(masked_request_index),\n    .output_unencoded(masked_request_mask)\n);\n\nalways @* begin\n    grant_next = 0;\n    grant_valid_next = 0;\n    grant_encoded_next = 0;\n    mask_next = mask_reg;\n\n    if (ARB_BLOCK && !ARB_BLOCK_ACK && grant_reg & request) begin\n        // granted request still asserted; hold it\n        grant_valid_next = grant_valid_reg;\n        grant_next = grant_reg;\n        grant_encoded_next = grant_encoded_reg;\n    end else if (ARB_BLOCK && ARB_BLOCK_ACK && grant_valid && !(grant_reg & acknowledge)) begin\n        // granted request not yet acknowledged; hold it\n        grant_valid_next = grant_valid_reg;\n        grant_next = grant_reg;\n        grant_encoded_next = grant_encoded_reg;\n    end else if (request_valid) begin\n        if (ARB_TYPE_ROUND_ROBIN) begin\n            if (masked_request_valid) begin\n                grant_valid_next = 1;\n                grant_next = masked_request_mask;\n                grant_encoded_next = masked_request_index;\n                if (ARB_LSB_HIGH_PRIORITY) begin\n                    mask_next = {PORTS{1'b1}} << (masked_request_index + 1);\n                end else begin\n                    mask_next = {PORTS{1'b1}} >> (PORTS - masked_request_index);\n                end\n            end else begin\n                grant_valid_next = 1;\n                grant_next = request_mask;\n                grant_encoded_next = request_index;\n                if (ARB_LSB_HIGH_PRIORITY) begin\n                    mask_next = {PORTS{1'b1}} << (request_index + 1);\n                end else begin\n                    mask_next = {PORTS{1'b1}} >> (PORTS - request_index);\n                end\n            end\n        end else begin\n            grant_valid_next = 1;\n            grant_next = request_mask;\n            grant_encoded_next = request_index;\n        end\n    end\nend\n\nalways @(posedge clk) begin\n    if (rst) begin\n        grant_reg <= 0;\n        grant_valid_reg <= 0;\n        grant_encoded_reg <= 0;\n        mask_reg <= 0;\n    end else begin\n        grant_reg <= grant_next;\n        grant_valid_reg <= grant_valid_next;\n        grant_encoded_reg <= grant_encoded_next;\n        mask_reg <= mask_next;\n    end\nend\n\nendmodule\n\n`resetall\n","lang":"verilog"};
processSrcData(g_data);