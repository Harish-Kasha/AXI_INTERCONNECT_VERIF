var g_data = {"name":"axi_adapter.v","src":"/*\n\nCopyright (c) 2018 Alex Forencich\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n*/\n\n// Language: Verilog 2001\n\n`resetall\n`timescale 1ns / 1ps\n`default_nettype none\n\n/*\n * AXI4 width adapter\n */\nmodule axi_adapter #\n(\n    // Width of address bus in bits\n    parameter ADDR_WIDTH = 32,\n    // Width of input (slave) interface data bus in bits\n    parameter S_R_DATA_WIDTH = 32,\n    parameter S_W_DATA_WIDTH =32,\n    // Width of input (slave) interface wstrb (width of data bus in words)\n    parameter S_STRB_WIDTH = (S_W_DATA_WIDTH/8),\n    // Width of output (master) interface data bus in bits\n    parameter M_W_DATA_WIDTH = 32,\n    parameter M_R_DATA_WIDTH = 32,\n    // Width of output (master) interface wstrb (width of data bus in words)\n    parameter M_STRB_WIDTH = (M_W_DATA_WIDTH/8),\n    // Width of ID signal\n    parameter ID_WIDTH = 8,\n    // Propagate awuser signal\n    parameter AWUSER_ENABLE = 0,\n    // Width of awuser signal\n    parameter AWUSER_WIDTH = 1,\n    // Propagate wuser signal\n    parameter WUSER_ENABLE = 0,\n    // Width of wuser signal\n    parameter WUSER_WIDTH = 1,\n    // Propagate buser signal\n    parameter BUSER_ENABLE = 0,\n    // Width of buser signal\n    parameter BUSER_WIDTH = 1,\n    // Propagate aruser signal\n    parameter ARUSER_ENABLE = 0,\n    // Width of aruser signal\n    parameter ARUSER_WIDTH = 1,\n    // Propagate ruser signal\n    parameter RUSER_ENABLE = 0,\n    // Width of ruser signal\n    parameter RUSER_WIDTH = 1,\n    // When adapting to a wider bus, re-pack full-width burst instead of passing through narrow burst if possible\n    parameter CONVERT_BURST = 1,\n    // When adapting to a wider bus, re-pack all bursts instead of passing through narrow burst if possible\n    parameter CONVERT_NARROW_BURST = 0,\n    // Forward ID through adapter\n    parameter FORWARD_ID = 1\n)\n(\n    input  wire                     clk,\n    input  wire                     rst,\n\n    /*\n     * AXI slave interface\n     */\n    input  wire [ID_WIDTH-1:0]      s_axi_awid,\n    input  wire [ADDR_WIDTH-1:0]    s_axi_awaddr,\n    input  wire [7:0]               s_axi_awlen,\n    input  wire [2:0]               s_axi_awsize,\n    input  wire [1:0]               s_axi_awburst,\n    input  wire                     s_axi_awlock,\n    input  wire [3:0]               s_axi_awcache,\n    input  wire [2:0]               s_axi_awprot,\n    input  wire [3:0]               s_axi_awqos,\n    input  wire [3:0]               s_axi_awregion,\n    input  wire [AWUSER_WIDTH-1:0]  s_axi_awuser,\n    input  wire                     s_axi_awvalid,\n    output wire                     s_axi_awready,\n    input  wire [S_W_DATA_WIDTH-1:0]s_axi_wdata,\n    input  wire [S_STRB_WIDTH-1:0]  s_axi_wstrb,\n    input  wire                     s_axi_wlast,\n    input  wire [WUSER_WIDTH-1:0]   s_axi_wuser,\n    input  wire                     s_axi_wvalid,\n    output wire                     s_axi_wready,\n    output wire [ID_WIDTH-1:0]      s_axi_bid,\n    output wire [1:0]               s_axi_bresp,\n    output wire [BUSER_WIDTH-1:0]   s_axi_buser,\n    output wire                     s_axi_bvalid,\n    input  wire                     s_axi_bready,\n    input  wire [ID_WIDTH-1:0]      s_axi_arid,\n    input  wire [ADDR_WIDTH-1:0]    s_axi_araddr,\n    input  wire [7:0]               s_axi_arlen,\n    input  wire [2:0]               s_axi_arsize,\n    input  wire [1:0]               s_axi_arburst,\n    input  wire                     s_axi_arlock,\n    input  wire [3:0]               s_axi_arcache,\n    input  wire [2:0]               s_axi_arprot,\n    input  wire [3:0]               s_axi_arqos,\n    input  wire [3:0]               s_axi_arregion,\n    input  wire [ARUSER_WIDTH-1:0]  s_axi_aruser,\n    input  wire                     s_axi_arvalid,\n    output wire                     s_axi_arready,\n    output wire [ID_WIDTH-1:0]      s_axi_rid,\n    output wire [S_R_DATA_WIDTH-1:0]  s_axi_rdata,\n    output wire [1:0]               s_axi_rresp,\n    output wire                     s_axi_rlast,\n    output wire [RUSER_WIDTH-1:0]   s_axi_ruser,\n    output wire                     s_axi_rvalid,\n    input  wire                     s_axi_rready,\n\n    /*\n     * AXI master interface\n     */\n    output wire [ID_WIDTH-1:0]      m_axi_awid,\n    output wire [ADDR_WIDTH-1:0]    m_axi_awaddr,\n    output wire [7:0]               m_axi_awlen,\n    output wire [2:0]               m_axi_awsize,\n    output wire [1:0]               m_axi_awburst,\n    output wire                     m_axi_awlock,\n    output wire [3:0]               m_axi_awcache,\n    output wire [2:0]               m_axi_awprot,\n    output wire [3:0]               m_axi_awqos,\n    output wire [3:0]               m_axi_awregion,\n    output wire [AWUSER_WIDTH-1:0]  m_axi_awuser,\n    output wire                     m_axi_awvalid,\n    input  wire                     m_axi_awready,\n    output wire [M_W_DATA_WIDTH-1:0]  m_axi_wdata,\n    output wire [M_STRB_WIDTH-1:0]  m_axi_wstrb,\n    output wire                     m_axi_wlast,\n    output wire [WUSER_WIDTH-1:0]   m_axi_wuser,\n    output wire                     m_axi_wvalid,\n    input  wire                     m_axi_wready,\n    input  wire [ID_WIDTH-1:0]      m_axi_bid,\n    input  wire [1:0]               m_axi_bresp,\n    input  wire [BUSER_WIDTH-1:0]   m_axi_buser,\n    input  wire                     m_axi_bvalid,\n    output wire                     m_axi_bready,\n    output wire [ID_WIDTH-1:0]      m_axi_arid,\n    output wire [ADDR_WIDTH-1:0]    m_axi_araddr,\n    output wire [7:0]               m_axi_arlen,\n    output wire [2:0]               m_axi_arsize,\n    output wire [1:0]               m_axi_arburst,\n    output wire                     m_axi_arlock,\n    output wire [3:0]               m_axi_arcache,\n    output wire [2:0]               m_axi_arprot,\n    output wire [3:0]               m_axi_arqos,\n    output wire [3:0]               m_axi_arregion,\n    output wire [ARUSER_WIDTH-1:0]  m_axi_aruser,\n    output wire                     m_axi_arvalid,\n    input  wire                     m_axi_arready,\n    input  wire [ID_WIDTH-1:0]      m_axi_rid,\n    input  wire [M_R_DATA_WIDTH-1:0]  m_axi_rdata,\n    input  wire [1:0]               m_axi_rresp,\n    input  wire                     m_axi_rlast,\n    input  wire [RUSER_WIDTH-1:0]   m_axi_ruser,\n    input  wire                     m_axi_rvalid,\n    output wire                     m_axi_rready\n);\n\naxi_adapter_wr #(\n    .ADDR_WIDTH(ADDR_WIDTH),\n    .S_DATA_WIDTH(S_W_DATA_WIDTH),\n    .S_STRB_WIDTH(S_STRB_WIDTH),\n    .M_DATA_WIDTH(M_W_DATA_WIDTH),\n    .M_STRB_WIDTH(M_STRB_WIDTH),\n    .ID_WIDTH(ID_WIDTH),\n    .AWUSER_ENABLE(AWUSER_ENABLE),\n    .AWUSER_WIDTH(AWUSER_WIDTH),\n    .WUSER_ENABLE(WUSER_ENABLE),\n    .WUSER_WIDTH(WUSER_WIDTH),\n    .BUSER_ENABLE(BUSER_ENABLE),\n    .BUSER_WIDTH(BUSER_WIDTH),\n    .CONVERT_BURST(CONVERT_BURST),\n    .CONVERT_NARROW_BURST(CONVERT_NARROW_BURST),\n    .FORWARD_ID(FORWARD_ID)\n)\naxi_adapter_wr_inst (\n    .clk(clk),\n    .rst(rst),\n\n    /*\n     * AXI slave interface\n     */\n    .s_axi_awid(s_axi_awid),\n    .s_axi_awaddr(s_axi_awaddr),\n    .s_axi_awlen(s_axi_awlen),\n    .s_axi_awsize(s_axi_awsize),\n    .s_axi_awburst(s_axi_awburst),\n    .s_axi_awlock(s_axi_awlock),\n    .s_axi_awcache(s_axi_awcache),\n    .s_axi_awprot(s_axi_awprot),\n    .s_axi_awqos(s_axi_awqos),\n    .s_axi_awregion(s_axi_awregion),\n    .s_axi_awuser(s_axi_awuser),\n    .s_axi_awvalid(s_axi_awvalid),\n    .s_axi_awready(s_axi_awready),\n    .s_axi_wdata(s_axi_wdata),\n    .s_axi_wstrb(s_axi_wstrb),\n    .s_axi_wlast(s_axi_wlast),\n    .s_axi_wuser(s_axi_wuser),\n    .s_axi_wvalid(s_axi_wvalid),\n    .s_axi_wready(s_axi_wready),\n    .s_axi_bid(s_axi_bid),\n    .s_axi_bresp(s_axi_bresp),\n    .s_axi_buser(s_axi_buser),\n    .s_axi_bvalid(s_axi_bvalid),\n    .s_axi_bready(s_axi_bready),\n\n    /*\n     * AXI master interface\n     */\n    .m_axi_awid(m_axi_awid),\n    .m_axi_awaddr(m_axi_awaddr),\n    .m_axi_awlen(m_axi_awlen),\n    .m_axi_awsize(m_axi_awsize),\n    .m_axi_awburst(m_axi_awburst),\n    .m_axi_awlock(m_axi_awlock),\n    .m_axi_awcache(m_axi_awcache),\n    .m_axi_awprot(m_axi_awprot),\n    .m_axi_awqos(m_axi_awqos),\n    .m_axi_awregion(m_axi_awregion),\n    .m_axi_awuser(m_axi_awuser),\n    .m_axi_awvalid(m_axi_awvalid),\n    .m_axi_awready(m_axi_awready),\n    .m_axi_wdata(m_axi_wdata),\n    .m_axi_wstrb(m_axi_wstrb),\n    .m_axi_wlast(m_axi_wlast),\n    .m_axi_wuser(m_axi_wuser),\n    .m_axi_wvalid(m_axi_wvalid),\n    .m_axi_wready(m_axi_wready),\n    .m_axi_bid(m_axi_bid),\n    .m_axi_bresp(m_axi_bresp),\n    .m_axi_buser(m_axi_buser),\n    .m_axi_bvalid(m_axi_bvalid),\n    .m_axi_bready(m_axi_bready)\n);\n\naxi_adapter_rd #(\n    .ADDR_WIDTH(ADDR_WIDTH),\n    .S_DATA_WIDTH(S_R_DATA_WIDTH),\n    .M_DATA_WIDTH(M_R_DATA_WIDTH),\n    .ID_WIDTH(ID_WIDTH),\n    .ARUSER_ENABLE(ARUSER_ENABLE),\n    .ARUSER_WIDTH(ARUSER_WIDTH),\n    .RUSER_ENABLE(RUSER_ENABLE),\n    .RUSER_WIDTH(RUSER_WIDTH),\n    .CONVERT_BURST(CONVERT_BURST),\n    .CONVERT_NARROW_BURST(CONVERT_NARROW_BURST),\n    .FORWARD_ID(FORWARD_ID)\n)\naxi_adapter_rd_inst (\n    .clk(clk),\n    .rst(rst),\n\n    /*\n     * AXI slave interface\n     */\n    .s_axi_arid(s_axi_arid),\n    .s_axi_araddr(s_axi_araddr),\n    .s_axi_arlen(s_axi_arlen),\n    .s_axi_arsize(s_axi_arsize),\n    .s_axi_arburst(s_axi_arburst),\n    .s_axi_arlock(s_axi_arlock),\n    .s_axi_arcache(s_axi_arcache),\n    .s_axi_arprot(s_axi_arprot),\n    .s_axi_arqos(s_axi_arqos),\n    .s_axi_arregion(s_axi_arregion),\n    .s_axi_aruser(s_axi_aruser),\n    .s_axi_arvalid(s_axi_arvalid),\n    .s_axi_arready(s_axi_arready),\n    .s_axi_rid(s_axi_rid),\n    .s_axi_rdata(s_axi_rdata),\n    .s_axi_rresp(s_axi_rresp),\n    .s_axi_rlast(s_axi_rlast),\n    .s_axi_ruser(s_axi_ruser),\n    .s_axi_rvalid(s_axi_rvalid),\n    .s_axi_rready(s_axi_rready),\n\n    /*\n     * AXI master interface\n     */\n    .m_axi_arid(m_axi_arid),\n    .m_axi_araddr(m_axi_araddr),\n    .m_axi_arlen(m_axi_arlen),\n    .m_axi_arsize(m_axi_arsize),\n    .m_axi_arburst(m_axi_arburst),\n    .m_axi_arlock(m_axi_arlock),\n    .m_axi_arcache(m_axi_arcache),\n    .m_axi_arprot(m_axi_arprot),\n    .m_axi_arqos(m_axi_arqos),\n    .m_axi_arregion(m_axi_arregion),\n    .m_axi_aruser(m_axi_aruser),\n    .m_axi_arvalid(m_axi_arvalid),\n    .m_axi_arready(m_axi_arready),\n    .m_axi_rid(m_axi_rid),\n    .m_axi_rdata(m_axi_rdata),\n    .m_axi_rresp(m_axi_rresp),\n    .m_axi_rlast(m_axi_rlast),\n    .m_axi_ruser(m_axi_ruser),\n    .m_axi_rvalid(m_axi_rvalid),\n    .m_axi_rready(m_axi_rready)\n);\n\nendmodule\n\n`resetall\n","lang":"verilog"};
processSrcData(g_data);