var g_data = {"name":"axi_fifo_wr.v","src":"/*\n\nCopyright (c) 2018 Alex Forencich\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n*/\n\n// Language: Verilog 2001\n\n`resetall\n`timescale 1ns / 1ps\n`default_nettype none\n\n/*\n * AXI4 FIFO (write)\n */\nmodule axi_fifo_wr #\n(\n    // Width of data bus in bits\n    parameter DATA_WIDTH = 32,\n    // Width of address bus in bits\n    parameter ADDR_WIDTH = 32,\n    // Width of wstrb (width of data bus in words)\n    parameter STRB_WIDTH = (DATA_WIDTH/8),\n    // Width of ID signal\n    parameter ID_WIDTH = 8,\n    // Propagate awuser signal\n    parameter AWUSER_ENABLE = 0,\n    // Width of awuser signal\n    parameter AWUSER_WIDTH = 1,\n    // Propagate wuser signal\n    parameter WUSER_ENABLE = 0,\n    // Width of wuser signal\n    parameter WUSER_WIDTH = 1,\n    // Propagate buser signal\n    parameter BUSER_ENABLE = 0,\n    // Width of buser signal\n    parameter BUSER_WIDTH = 1,\n    // Write data FIFO depth (cycles)\n    parameter FIFO_DEPTH = 32,\n    // Hold write address until write data in FIFO, if possible\n    parameter FIFO_DELAY = 0\n)\n(\n    input  wire                     clk,\n    input  wire                     rst,\n\n    /*\n     * AXI slave interface\n     */\n    input  wire [ID_WIDTH-1:0]      s_axi_awid,\n    input  wire [ADDR_WIDTH-1:0]    s_axi_awaddr,\n    input  wire [7:0]               s_axi_awlen,\n    input  wire [2:0]               s_axi_awsize,\n    input  wire [1:0]               s_axi_awburst,\n    input  wire                     s_axi_awlock,\n    input  wire [3:0]               s_axi_awcache,\n    input  wire [2:0]               s_axi_awprot,\n    input  wire [3:0]               s_axi_awqos,\n    input  wire [3:0]               s_axi_awregion,\n    input  wire [AWUSER_WIDTH-1:0]  s_axi_awuser,\n    input  wire                     s_axi_awvalid,\n    output wire                     s_axi_awready,\n    input  wire [DATA_WIDTH-1:0]    s_axi_wdata,\n    input  wire [STRB_WIDTH-1:0]    s_axi_wstrb,\n    input  wire                     s_axi_wlast,\n    input  wire [WUSER_WIDTH-1:0]   s_axi_wuser,\n    input  wire                     s_axi_wvalid,\n    output wire                     s_axi_wready,\n    output wire [ID_WIDTH-1:0]      s_axi_bid,\n    output wire [1:0]               s_axi_bresp,\n    output wire [BUSER_WIDTH-1:0]   s_axi_buser,\n    output wire                     s_axi_bvalid,\n    input  wire                     s_axi_bready,\n\n    /*\n     * AXI master interface\n     */\n    output wire [ID_WIDTH-1:0]      m_axi_awid,\n    output wire [ADDR_WIDTH-1:0]    m_axi_awaddr,\n    output wire [7:0]               m_axi_awlen,\n    output wire [2:0]               m_axi_awsize,\n    output wire [1:0]               m_axi_awburst,\n    output wire                     m_axi_awlock,\n    output wire [3:0]               m_axi_awcache,\n    output wire [2:0]               m_axi_awprot,\n    output wire [3:0]               m_axi_awqos,\n    output wire [3:0]               m_axi_awregion,\n    output wire [AWUSER_WIDTH-1:0]  m_axi_awuser,\n    output wire                     m_axi_awvalid,\n    input  wire                     m_axi_awready,\n    output wire [DATA_WIDTH-1:0]    m_axi_wdata,\n    output wire [STRB_WIDTH-1:0]    m_axi_wstrb,\n    output wire                     m_axi_wlast,\n    output wire [WUSER_WIDTH-1:0]   m_axi_wuser,\n    output wire                     m_axi_wvalid,\n    input  wire                     m_axi_wready,\n    input  wire [ID_WIDTH-1:0]      m_axi_bid,\n    input  wire [1:0]               m_axi_bresp,\n    input  wire [BUSER_WIDTH-1:0]   m_axi_buser,\n    input  wire                     m_axi_bvalid,\n    output wire                     m_axi_bready\n);\n\nparameter STRB_OFFSET  = DATA_WIDTH;\nparameter LAST_OFFSET  = STRB_OFFSET + STRB_WIDTH;\nparameter WUSER_OFFSET = LAST_OFFSET + 1;\nparameter WWIDTH       = WUSER_OFFSET + (WUSER_ENABLE ? WUSER_WIDTH : 0);\n\nparameter FIFO_ADDR_WIDTH = $clog2(FIFO_DEPTH);\n\nreg [FIFO_ADDR_WIDTH:0] wr_ptr_reg = {FIFO_ADDR_WIDTH+1{1'b0}}, wr_ptr_next;\nreg [FIFO_ADDR_WIDTH:0] wr_addr_reg = {FIFO_ADDR_WIDTH+1{1'b0}};\nreg [FIFO_ADDR_WIDTH:0] rd_ptr_reg = {FIFO_ADDR_WIDTH+1{1'b0}}, rd_ptr_next;\nreg [FIFO_ADDR_WIDTH:0] rd_addr_reg = {FIFO_ADDR_WIDTH+1{1'b0}};\n\n(* ramstyle = \"no_rw_check\" *)\nreg [WWIDTH-1:0] mem[(2**FIFO_ADDR_WIDTH)-1:0];\nreg [WWIDTH-1:0] mem_read_data_reg;\nreg mem_read_data_valid_reg = 1'b0, mem_read_data_valid_next;\n\nwire [WWIDTH-1:0] s_axi_w;\n\nreg [WWIDTH-1:0] m_axi_w_reg;\nreg m_axi_wvalid_reg = 1'b0, m_axi_wvalid_next;\n\n// full when first MSB different but rest same\nwire full = ((wr_ptr_reg[FIFO_ADDR_WIDTH] != rd_ptr_reg[FIFO_ADDR_WIDTH]) &&\n             (wr_ptr_reg[FIFO_ADDR_WIDTH-1:0] == rd_ptr_reg[FIFO_ADDR_WIDTH-1:0]));\n// empty when pointers match exactly\nwire empty = wr_ptr_reg == rd_ptr_reg;\n\nwire hold;\n\n// control signals\nreg write;\nreg read;\nreg store_output;\n\nassign s_axi_wready = !full && !hold;\n\ngenerate\n    assign s_axi_w[DATA_WIDTH-1:0] = s_axi_wdata;\n    assign s_axi_w[STRB_OFFSET +: STRB_WIDTH] = s_axi_wstrb;\n    assign s_axi_w[LAST_OFFSET] = s_axi_wlast;\n    if (WUSER_ENABLE) assign s_axi_w[WUSER_OFFSET +: WUSER_WIDTH] = s_axi_wuser;\nendgenerate\n\ngenerate\n\nif (FIFO_DELAY) begin\n    // store AW channel value until W channel burst is stored in FIFO or FIFO is full\n\n    localparam [1:0]\n        STATE_IDLE = 2'd0,\n        STATE_TRANSFER_IN = 2'd1,\n        STATE_TRANSFER_OUT = 2'd2;\n\n    reg [1:0] state_reg = STATE_IDLE, state_next;\n\n    reg hold_reg = 1'b1, hold_next;\n    reg [8:0] count_reg = 9'd0, count_next;\n\n    reg [ID_WIDTH-1:0] m_axi_awid_reg = {ID_WIDTH{1'b0}}, m_axi_awid_next;\n    reg [ADDR_WIDTH-1:0] m_axi_awaddr_reg = {ADDR_WIDTH{1'b0}}, m_axi_awaddr_next;\n    reg [7:0] m_axi_awlen_reg = 8'd0, m_axi_awlen_next;\n    reg [2:0] m_axi_awsize_reg = 3'd0, m_axi_awsize_next;\n    reg [1:0] m_axi_awburst_reg = 2'd0, m_axi_awburst_next;\n    reg m_axi_awlock_reg = 1'b0, m_axi_awlock_next;\n    reg [3:0] m_axi_awcache_reg = 4'd0, m_axi_awcache_next;\n    reg [2:0] m_axi_awprot_reg = 3'd0, m_axi_awprot_next;\n    reg [3:0] m_axi_awqos_reg = 4'd0, m_axi_awqos_next;\n    reg [3:0] m_axi_awregion_reg = 4'd0, m_axi_awregion_next;\n    reg [AWUSER_WIDTH-1:0] m_axi_awuser_reg = {AWUSER_WIDTH{1'b0}}, m_axi_awuser_next;\n    reg m_axi_awvalid_reg = 1'b0, m_axi_awvalid_next;\n\n    reg s_axi_awready_reg = 1'b0, s_axi_awready_next;\n\n    assign m_axi_awid = m_axi_awid_reg;\n    assign m_axi_awaddr = m_axi_awaddr_reg;\n    assign m_axi_awlen = m_axi_awlen_reg;\n    assign m_axi_awsize = m_axi_awsize_reg;\n    assign m_axi_awburst = m_axi_awburst_reg;\n    assign m_axi_awlock = m_axi_awlock_reg;\n    assign m_axi_awcache = m_axi_awcache_reg;\n    assign m_axi_awprot = m_axi_awprot_reg;\n    assign m_axi_awqos = m_axi_awqos_reg;\n    assign m_axi_awregion = m_axi_awregion_reg;\n    assign m_axi_awuser = AWUSER_ENABLE ? m_axi_awuser_reg : {AWUSER_WIDTH{1'b0}};\n    assign m_axi_awvalid = m_axi_awvalid_reg;\n\n    assign s_axi_awready = s_axi_awready_reg;\n\n    assign hold = hold_reg;\n\n    always @* begin\n        state_next = STATE_IDLE;\n\n        hold_next = hold_reg;\n        count_next = count_reg;\n\n        m_axi_awid_next = m_axi_awid_reg;\n        m_axi_awaddr_next = m_axi_awaddr_reg;\n        m_axi_awlen_next = m_axi_awlen_reg;\n        m_axi_awsize_next = m_axi_awsize_reg;\n        m_axi_awburst_next = m_axi_awburst_reg;\n        m_axi_awlock_next = m_axi_awlock_reg;\n        m_axi_awcache_next = m_axi_awcache_reg;\n        m_axi_awprot_next = m_axi_awprot_reg;\n        m_axi_awqos_next = m_axi_awqos_reg;\n        m_axi_awregion_next = m_axi_awregion_reg;\n        m_axi_awuser_next = m_axi_awuser_reg;\n        m_axi_awvalid_next = m_axi_awvalid_reg && !m_axi_awready;\n        s_axi_awready_next = s_axi_awready_reg;\n\n        case (state_reg)\n            STATE_IDLE: begin\n                s_axi_awready_next = !m_axi_awvalid || m_axi_awready;\n                hold_next = 1'b1;\n\n                if (s_axi_awready && s_axi_awvalid) begin\n                    s_axi_awready_next = 1'b0;\n\n                    m_axi_awid_next = s_axi_awid;\n                    m_axi_awaddr_next = s_axi_awaddr;\n                    m_axi_awlen_next = s_axi_awlen;\n                    m_axi_awsize_next = s_axi_awsize;\n                    m_axi_awburst_next = s_axi_awburst;\n                    m_axi_awlock_next = s_axi_awlock;\n                    m_axi_awcache_next = s_axi_awcache;\n                    m_axi_awprot_next = s_axi_awprot;\n                    m_axi_awqos_next = s_axi_awqos;\n                    m_axi_awregion_next = s_axi_awregion;\n                    m_axi_awuser_next = s_axi_awuser;\n\n                    hold_next = 1'b0;\n                    count_next = 0;\n                    state_next = STATE_TRANSFER_IN;\n                end else begin\n                    state_next = STATE_IDLE;\n                end\n            end\n            STATE_TRANSFER_IN: begin\n                s_axi_awready_next = 1'b0;\n                hold_next = 1'b0;\n\n                if (s_axi_wready && s_axi_wvalid) begin\n                    count_next = count_reg + 1;\n                    if (s_axi_wlast) begin\n                        m_axi_awvalid_next = 1'b1;\n                        hold_next = 1'b1;\n                        state_next = STATE_IDLE;\n                    end else if (FIFO_ADDR_WIDTH < 8 && count_next == 2**FIFO_ADDR_WIDTH) begin\n                        m_axi_awvalid_next = 1'b1;\n                        state_next = STATE_TRANSFER_OUT;\n                    end else begin\n                        state_next = STATE_TRANSFER_IN;\n                    end\n                end else begin\n                    state_next = STATE_TRANSFER_IN;\n                end\n            end\n            STATE_TRANSFER_OUT: begin\n                s_axi_awready_next = 1'b0;\n                hold_next = 1'b0;\n\n                if (s_axi_wready && s_axi_wvalid) begin\n                    if (s_axi_wlast) begin\n                        hold_next = 1'b1;\n                        state_next = STATE_IDLE;\n                    end else begin\n                        state_next = STATE_TRANSFER_OUT;\n                    end\n                end else begin\n                    state_next = STATE_TRANSFER_OUT;\n                end\n            end\n        endcase\n    end\n\n    always @(posedge clk) begin\n        state_reg <= state_next;\n\n        hold_reg <= hold_next;\n        count_reg <= count_next;\n\n        m_axi_awid_reg <= m_axi_awid_next;\n        m_axi_awaddr_reg <= m_axi_awaddr_next;\n        m_axi_awlen_reg <= m_axi_awlen_next;\n        m_axi_awsize_reg <= m_axi_awsize_next;\n        m_axi_awburst_reg <= m_axi_awburst_next;\n        m_axi_awlock_reg <= m_axi_awlock_next;\n        m_axi_awcache_reg <= m_axi_awcache_next;\n        m_axi_awprot_reg <= m_axi_awprot_next;\n        m_axi_awqos_reg <= m_axi_awqos_next;\n        m_axi_awregion_reg <= m_axi_awregion_next;\n        m_axi_awuser_reg <= m_axi_awuser_next;\n        m_axi_awvalid_reg <= m_axi_awvalid_next;\n        s_axi_awready_reg <= s_axi_awready_next;\n\n        if (rst) begin\n            state_reg <= STATE_IDLE;\n            hold_reg <= 1'b1;\n            m_axi_awvalid_reg <= 1'b0;\n            s_axi_awready_reg <= 1'b0;\n        end\n    end\nend else begin\n    // bypass AW channel\n    assign m_axi_awid = s_axi_awid;\n    assign m_axi_awaddr = s_axi_awaddr;\n    assign m_axi_awlen = s_axi_awlen;\n    assign m_axi_awsize = s_axi_awsize;\n    assign m_axi_awburst = s_axi_awburst;\n    assign m_axi_awlock = s_axi_awlock;\n    assign m_axi_awcache = s_axi_awcache;\n    assign m_axi_awprot = s_axi_awprot;\n    assign m_axi_awqos = s_axi_awqos;\n    assign m_axi_awregion = s_axi_awregion;\n    assign m_axi_awuser = AWUSER_ENABLE ? s_axi_awuser : {AWUSER_WIDTH{1'b0}};\n    assign m_axi_awvalid = s_axi_awvalid;\n    assign s_axi_awready = m_axi_awready;\n\n    assign hold = 1'b0;\nend\n\nendgenerate\n\n// bypass B channel\nassign s_axi_bid = m_axi_bid;\nassign s_axi_bresp = m_axi_bresp;\nassign s_axi_buser = BUSER_ENABLE ? m_axi_buser : {BUSER_WIDTH{1'b0}};\nassign s_axi_bvalid = m_axi_bvalid;\nassign m_axi_bready = s_axi_bready;\n\nassign m_axi_wvalid = m_axi_wvalid_reg;\n\nassign m_axi_wdata = m_axi_w_reg[DATA_WIDTH-1:0];\nassign m_axi_wstrb = m_axi_w_reg[STRB_OFFSET +: STRB_WIDTH];\nassign m_axi_wlast = m_axi_w_reg[LAST_OFFSET];\nassign m_axi_wuser = WUSER_ENABLE ? m_axi_w_reg[WUSER_OFFSET +: WUSER_WIDTH] : {WUSER_WIDTH{1'b0}};\n\n// Write logic\nalways @* begin\n    write = 1'b0;\n\n    wr_ptr_next = wr_ptr_reg;\n\n    if (s_axi_wvalid) begin\n        // input data valid\n        if (!full && !hold) begin\n            // not full, perform write\n            write = 1'b1;\n            wr_ptr_next = wr_ptr_reg + 1;\n        end\n    end\nend\n\nalways @(posedge clk) begin\n    wr_ptr_reg <= wr_ptr_next;\n    wr_addr_reg <= wr_ptr_next;\n\n    if (write) begin\n        mem[wr_addr_reg[FIFO_ADDR_WIDTH-1:0]] <= s_axi_w;\n    end\n\n    if (rst) begin\n        wr_ptr_reg <= {FIFO_ADDR_WIDTH+1{1'b0}};\n    end\nend\n\n// Read logic\nalways @* begin\n    read = 1'b0;\n\n    rd_ptr_next = rd_ptr_reg;\n\n    mem_read_data_valid_next = mem_read_data_valid_reg;\n\n    if (store_output || !mem_read_data_valid_reg) begin\n        // output data not valid OR currently being transferred\n        if (!empty) begin\n            // not empty, perform read\n            read = 1'b1;\n            mem_read_data_valid_next = 1'b1;\n            rd_ptr_next = rd_ptr_reg + 1;\n        end else begin\n            // empty, invalidate\n            mem_read_data_valid_next = 1'b0;\n        end\n    end\nend\n\nalways @(posedge clk) begin\n    rd_ptr_reg <= rd_ptr_next;\n    rd_addr_reg <= rd_ptr_next;\n\n    mem_read_data_valid_reg <= mem_read_data_valid_next;\n\n    if (read) begin\n        mem_read_data_reg <= mem[rd_addr_reg[FIFO_ADDR_WIDTH-1:0]];\n    end\n\n    if (rst) begin\n        rd_ptr_reg <= {FIFO_ADDR_WIDTH+1{1'b0}};\n        mem_read_data_valid_reg <= 1'b0;\n    end\nend\n\n// Output register\nalways @* begin\n    store_output = 1'b0;\n\n    m_axi_wvalid_next = m_axi_wvalid_reg;\n\n    if (m_axi_wready || !m_axi_wvalid) begin\n        store_output = 1'b1;\n        m_axi_wvalid_next = mem_read_data_valid_reg;\n    end\nend\n\nalways @(posedge clk) begin\n    m_axi_wvalid_reg <= m_axi_wvalid_next;\n\n    if (store_output) begin\n        m_axi_w_reg <= mem_read_data_reg;\n    end\n\n    if (rst) begin\n        m_axi_wvalid_reg <= 1'b0;\n    end\nend\n\nendmodule\n\n`resetall\n","lang":"verilog"};
processSrcData(g_data);