
// This file was autogenerated by PeakRDL-uvm
package dma_ral;
    `include "uvm_macros.svh"
    import uvm_pkg::*;
    
    // Reg - channel_registers::CMD_REG0
    class channel_registers__CMD_REG0 extends uvm_reg;
        rand uvm_reg_field RD_START_ADDR;

        function new(string name = "channel_registers__CMD_REG0");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.RD_START_ADDR = new("RD_START_ADDR");
            this.RD_START_ADDR.configure(this, 32, 0, "RW", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : channel_registers__CMD_REG0

    // Reg - channel_registers::CMD_REG1
    class channel_registers__CMD_REG1 extends uvm_reg;
        rand uvm_reg_field WR_START_ADDR;

        function new(string name = "channel_registers__CMD_REG1");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.WR_START_ADDR = new("WR_START_ADDR");
            this.WR_START_ADDR.configure(this, 32, 0, "RW", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : channel_registers__CMD_REG1

    // Reg - channel_registers::CMD_REG2
    class channel_registers__CMD_REG2 extends uvm_reg;
        rand uvm_reg_field BUFFER_SIZE;

        function new(string name = "channel_registers__CMD_REG2");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.BUFFER_SIZE = new("BUFFER_SIZE");
            this.BUFFER_SIZE.configure(this, 16, 0, "RW", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : channel_registers__CMD_REG2

    // Reg - channel_registers::CMD_REG3
    class channel_registers__CMD_REG3 extends uvm_reg;
        rand uvm_reg_field CMD_SET_INT;
        rand uvm_reg_field CMD_LAST;
        rand uvm_reg_field CMD_NEXT_ADDR;

        function new(string name = "channel_registers__CMD_REG3");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.CMD_SET_INT = new("CMD_SET_INT");
            this.CMD_SET_INT.configure(this, 1, 0, "RW", 0, 'h0, 1, 1, 0);
            this.CMD_LAST = new("CMD_LAST");
            this.CMD_LAST.configure(this, 1, 1, "RW", 0, 'h0, 1, 1, 0);
            this.CMD_NEXT_ADDR = new("CMD_NEXT_ADDR");
            this.CMD_NEXT_ADDR.configure(this, 28, 4, "RW", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : channel_registers__CMD_REG3

    // Reg - channel_registers::STATIC_REG0
    class channel_registers__STATIC_REG0 extends uvm_reg;
        rand uvm_reg_field RD_BURST_MAX_SIZE;

        function new(string name = "channel_registers__STATIC_REG0");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.RD_BURST_MAX_SIZE = new("RD_BURST_MAX_SIZE");
            this.RD_BURST_MAX_SIZE.configure(this, 10, 0, "RW", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : channel_registers__STATIC_REG0

    // Reg - channel_registers::STATIC_REG1
    class channel_registers__STATIC_REG1 extends uvm_reg;
        rand uvm_reg_field WR_BURST_MAX_SIZE;

        function new(string name = "channel_registers__STATIC_REG1");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.WR_BURST_MAX_SIZE = new("WR_BURST_MAX_SIZE");
            this.WR_BURST_MAX_SIZE.configure(this, 10, 0, "RW", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : channel_registers__STATIC_REG1

    // Reg - channel_registers::CH_START_REG
    class channel_registers__CH_START_REG extends uvm_reg;
        rand uvm_reg_field CH_START;

        function new(string name = "channel_registers__CH_START_REG");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.CH_START = new("CH_START");
            this.CH_START.configure(this, 1, 0, "WO", 0, 'h0, 0, 1, 0);
        endfunction : build
    endclass : channel_registers__CH_START_REG

    // Addrmap - channel_registers
    class channel_registers extends uvm_reg_block;
        rand channel_registers__CMD_REG0 CMD_REG0;
        rand channel_registers__CMD_REG1 CMD_REG1;
        rand channel_registers__CMD_REG2 CMD_REG2;
        rand channel_registers__CMD_REG3 CMD_REG3;
        rand channel_registers__STATIC_REG0 STATIC_REG0;
        rand channel_registers__STATIC_REG1 STATIC_REG1;
        rand channel_registers__CH_START_REG CH_START_REG;

        function new(string name = "channel_registers");
            super.new(name);
        endfunction : new

        virtual function void build();
            this.default_map = create_map("reg_map", 0, 4, UVM_NO_ENDIAN);
            this.CMD_REG0 = new("CMD_REG0");
            this.CMD_REG0.configure(this);

            this.CMD_REG0.build();
            this.default_map.add_reg(this.CMD_REG0, 'h0);
            this.CMD_REG1 = new("CMD_REG1");
            this.CMD_REG1.configure(this);

            this.CMD_REG1.build();
            this.default_map.add_reg(this.CMD_REG1, 'h4);
            this.CMD_REG2 = new("CMD_REG2");
            this.CMD_REG2.configure(this);

            this.CMD_REG2.build();
            this.default_map.add_reg(this.CMD_REG2, 'h8);
            this.CMD_REG3 = new("CMD_REG3");
            this.CMD_REG3.configure(this);

            this.CMD_REG3.build();
            this.default_map.add_reg(this.CMD_REG3, 'hc);
            this.STATIC_REG0 = new("STATIC_REG0");
            this.STATIC_REG0.configure(this);

            this.STATIC_REG0.build();
            this.default_map.add_reg(this.STATIC_REG0, 'h10);
            this.STATIC_REG1 = new("STATIC_REG1");
            this.STATIC_REG1.configure(this);

            this.STATIC_REG1.build();
            this.default_map.add_reg(this.STATIC_REG1, 'h14);
            this.CH_START_REG = new("CH_START_REG");
            this.CH_START_REG.configure(this);

            this.CH_START_REG.build();
            this.default_map.add_reg(this.CH_START_REG, 'h44);
        endfunction : build
    endclass : channel_registers

endpackage: dma_ral
